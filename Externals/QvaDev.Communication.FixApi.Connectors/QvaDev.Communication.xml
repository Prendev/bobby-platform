<?xml version="1.0"?>
<doc>
    <assembly>
        <name>QvaDev.Communication</name>
    </assembly>
    <members>
        <member name="T:QvaDev.Communication.ConnectionManager">
            <summary>
            Represents a class, which manages connections.
            </summary>
        </member>
        <member name="T:QvaDev.Communication.DataReceivedEventArgs">
            <summary>
            Represents the data of <see cref="E:QvaDev.Communication.DuplexStreamConcurrentHandler.DataReceived"/> event.
            </summary>
        </member>
        <member name="P:QvaDev.Communication.DataReceivedEventArgs.Buffer">
            <summary>
            Gets the buffer of received data. The length of actually received data is returned by <see cref="P:QvaDev.Communication.DataReceivedEventArgs.Length"/> property.
            </summary>
        </member>
        <member name="P:QvaDev.Communication.DataReceivedEventArgs.Length">
            <summary>
            Gets the actual length of <see cref="P:QvaDev.Communication.DataReceivedEventArgs.Buffer"/> to process.
            </summary>
        </member>
        <member name="T:QvaDev.Communication.EventArgs`1">
            <summary>
            Represents a simple event argument of type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type of the event argument.</typeparam>
        </member>
        <member name="P:QvaDev.Communication.EventArgs`1.EventData">
            <summary>
            Gets the event data.
            </summary>
        </member>
        <member name="M:QvaDev.Communication.EventArgs`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:QvaDev.Communication.EventArgs`1"/> class.
            </summary>
            <param name="arg">The argument.</param>
        </member>
        <member name="M:QvaDev.Communication.EventHandlerExtensions.InvokeSafe``1(System.EventHandler{``0},System.Object,``0)">
            <summary>
            Invoking the user's self subscription without risking the stop of reader/writer thread due to an error in user's event handler.
            If <see cref="T:System.OperationCanceledException"/> is thrown it is propagated to the caller.
            </summary>
        </member>
        <member name="M:QvaDev.Communication.WaitHandleExtensions.WaitOneAsync(System.Threading.WaitHandle,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Waits for a signal asynchronously on the provided <paramref name="handle"/>.
            </summary>
        </member>
        <member name="M:QvaDev.Communication.WaitHandleExtensions.WaitOneAsync(System.Threading.WaitHandle,System.Threading.CancellationToken)">
            <summary>
            Waits for a signal asynchronously on the provided <paramref name="handle"/>.
            </summary>
        </member>
        <member name="M:QvaDev.Communication.DictionaryExtensions.GetValueOrDefault``1(System.Collections.Generic.IDictionary{System.String,System.Object},System.String,``0)">
            <summary>
            Tries to get the typed value from a <see cref="T:System.String"/>-<see cref="T:System.Object"/> dictionary for the given key.
            </summary>
            <param name="dictionary">The dictionary.</param>
            <param name="key">The dictionary key.</param>
            <param name="defaultValue">The default value to return if <paramref name="key"/> not found or its actual type is not compatible with <typeparamref name="TActualValue"/>.</param>
            <typeparam name="TActualValue">The actual type of the stored value.</typeparam>
            <returns>The found value or <paramref name="defaultValue"/> if <paramref name="key"/> not found or its type is wrong.</returns>
        </member>
        <member name="M:QvaDev.Communication.DictionaryExtensions.GetValueOrDefault``3(System.Collections.Generic.IDictionary{``0,``1},``0,``2)">
            <summary>
            Tries to get the typed value from a dictionary for the given key.
            </summary>
            <param name="dictionary">The dictionary.</param>
            <param name="key">The dictionary key.</param>
            <param name="defaultValue">The default value to return if <paramref name="key"/> not found or its actual type is not compatible with <typeparamref name="TActualValue"/>.</param>
            <typeparam name="TKey">The type of value</typeparam>
            <typeparam name="TValue">Type of the stored values in the <paramref name="dictionary"/>.</typeparam>
            <typeparam name="TActualValue">The actual type of the stored value.</typeparam>
            <returns>The found value or <paramref name="defaultValue"/> if <paramref name="key"/> not found or its type is wrong.</returns>
        </member>
        <member name="T:QvaDev.Communication.TaskCompletionManager">
            <summary>
            Represents a manager for completable <see cref="T:System.Threading.Tasks.Task"/> instances, which automatically timed out if their result is not set in a specified time interval.
            </summary>
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="M:QvaDev.Communication.TaskCompletionManager.#ctor(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:QvaDev.Communication.TaskCompletionManager"/> class.
            </summary>
            <param name="interval">The interval, in milliseconds, for checking task statuses.</param>
            <param name="timeout">The interval, in milliseconds, after an uncompleted task will timeout.</param>
            <param name="throwErrorOnTimeout">If <c>true</c>, a <see cref="T:System.TimeoutException"/> will be thrown on timeout. If <c>false</c>, the created task will be completed by setting the default result.</param>
        </member>
        <member name="M:QvaDev.Communication.TaskCompletionManager.IsCompleted(System.Object)">
            <summary>
            Gets whether the <see cref="T:System.Threading.Tasks.Task"/> of the specified <paramref name="key"/> is completed.
            </summary>
            <param name="key">The key of the <see cref="T:System.Threading.Tasks.Task"/>.</param>
            <returns><see langword="null"/> if no <see cref="T:System.Threading.Tasks.Task"/> found with the specified <paramref name="key"/>,
            <c>true</c> if the corresponding <see cref="T:System.Threading.Tasks.Task"/> is completed,
            <c>false</c> if the corresponding <see cref="T:System.Threading.Tasks.Task"/> is not completed.</returns>
        </member>
        <member name="M:QvaDev.Communication.TaskCompletionManager.CreateCompletableTask``1(System.Object)">
            <summary>
            Creates a <see cref="T:System.Threading.Tasks.Task`1"/>, which can be completed by using the public methods of this <see cref="T:QvaDev.Communication.TaskCompletionManager"/> instance.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="key">The key, which can be used to complete the result <see cref="T:System.Threading.Tasks.Task`1"/> by calling the methods of this <see cref="T:QvaDev.Communication.TaskCompletionManager"/> instance.
            If the same key is re-used multiple times, the possibly not completed previous task will be canceled.</param>
            <returns>A not completed <see cref="T:System.Threading.Tasks.Task`1"/> instance.</returns>
        </member>
        <member name="M:QvaDev.Communication.TaskCompletionManager.CreateCompletableTask(System.Object)">
            <summary>
            Creates a <see cref="T:System.Threading.Tasks.Task"/>, which can be completed by using the public methods of this <see cref="T:QvaDev.Communication.TaskCompletionManager"/> instance.
            </summary>
            <param name="key">The key, which can be used to complete the result <see cref="T:System.Threading.Tasks.Task"/> by calling the methods of this <see cref="T:QvaDev.Communication.TaskCompletionManager"/> instance.
            If the same key is re-used multiple times, the possibly not completed previous task will be canceled.</param>
            <returns>A not completed <see cref="T:System.Threading.Tasks.Task"/> instance.</returns>
        </member>
        <member name="M:QvaDev.Communication.TaskCompletionManager.ReplaceCompletableTask``1(System.Object,``0,System.Exception)">
            <summary>
            Creates a <see cref="T:System.Threading.Tasks.Task`1"/>, which can be completed by using the public methods of this <see cref="T:QvaDev.Communication.TaskCompletionManager"/> instance.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="key">The key, which can be used to complete the result <see cref="T:System.Threading.Tasks.Task`1"/> by calling the methods of this <see cref="T:QvaDev.Communication.TaskCompletionManager"/> instance.
            If the same key is re-used multiple times, the possibly not completed previous task will be canceled.</param>
            <param name="oldTaskResult">If there is an old task to replace, then </param>
            <returns>A not completed <see cref="T:System.Threading.Tasks.Task`1"/> instance.</returns>
        </member>
        <member name="M:QvaDev.Communication.TaskCompletionManager.ReplaceCompletableTask(System.Object,System.Exception)">
            <summary>
            Creates a <see cref="T:System.Threading.Tasks.Task`1"/>, which can be completed by using the public methods of this <see cref="T:QvaDev.Communication.TaskCompletionManager"/> instance.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="key">The key, which can be used to complete the result <see cref="T:System.Threading.Tasks.Task`1"/> by calling the methods of this <see cref="T:QvaDev.Communication.TaskCompletionManager"/> instance.
            If the same key is re-used multiple times, the possibly not completed previous task will be canceled.</param>
            <returns>A not completed <see cref="T:System.Threading.Tasks.Task`1"/> instance.</returns>
        </member>
        <member name="M:QvaDev.Communication.TaskCompletionManager.RemoveAll(System.Func{System.Object,System.Boolean},System.Exception)">
            <summary>
            Removes all <see cref="T:System.Threading.Tasks.Task"/>s from the <see cref="T:QvaDev.Communication.TaskCompletionManager"/> selected by the provided <paramref name="predicate"/>
            and cancels all of the removed unfinished tasks.
            </summary>
            <param name="predicate">The predicate, which selects the entries to remove.</param>
            <param name="error">If <see langword="null"/>, then the unfinished tasks to remove will be canceled; otherwise, they will be finished with error.</param>
        </member>
        <member name="M:QvaDev.Communication.TaskCompletionManager.Clear">
            <summary>
            Removes all <see cref="T:System.Threading.Tasks.Task"/>s from the <see cref="T:QvaDev.Communication.TaskCompletionManager"/> and cancels all of the removed unfinished tasks.
            </summary>
        </member>
        <member name="M:QvaDev.Communication.TaskCompletionManager.Dispose">
            <summary>
            Disposes this <see cref="T:QvaDev.Communication.TaskCompletionManager"/> instance.
            </summary>
        </member>
        <member name="M:QvaDev.Communication.TaskCompletionManager.ContainsKey(System.Object)">
            <summary>
            Determines whether the <see cref="T:QvaDev.Communication.TaskCompletionManager"/> contains a <see cref="T:System.Threading.Tasks.Task"/> with specified <paramref name="key"/>.
            </summary>
            <param name="key">The key to check.</param>
            <returns><c>true</c> if the specified <paramref name="key"/> exists in current <see cref="T:QvaDev.Communication.TaskCompletionManager"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:QvaDev.Communication.TaskCompletionManager.TryGetTask(System.Object,System.Threading.Tasks.Task@)">
            <summary>
            Tries the get a <see cref="T:System.Threading.Tasks.Task"/> with specified <paramref name="key"/>.
            </summary>
            <param name="key">The key of the <see cref="T:System.Threading.Tasks.Task"/> to get.</param>
            <param name="task">The result <see cref="T:System.Threading.Tasks.Task"/> if the return value is <c>true</c>;otherwise, <see langword="null"/>.</param>
            <returns><c>true</c>, if <paramref name="key"/> exists in current <see cref="T:QvaDev.Communication.TaskCompletionManager"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:QvaDev.Communication.TaskCompletionManager.TryGetTask``1(System.Object,System.Threading.Tasks.Task{``0}@)">
            <summary>
            Tries the get a <see cref="T:System.Threading.Tasks.Task`1"/> with specified <paramref name="key"/>.
            </summary>
            <param name="key">The key of the <see cref="T:System.Threading.Tasks.Task`1"/> to get.</param>
            <param name="task">The result <see cref="T:System.Threading.Tasks.Task`1"/> if the return value is <c>true</c>;otherwise, <see langword="null"/>.</param>
            <returns><c>true</c>, if <paramref name="key"/> exists in current <see cref="T:QvaDev.Communication.TaskCompletionManager"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:QvaDev.Communication.TaskCompletionManager.SetCompleted(System.Object,System.Boolean)">
            <summary>
            Sets a <see cref="T:System.Threading.Tasks.Task"/> completed of the specified <paramref name="key"/>, which was created by the <see cref="M:QvaDev.Communication.TaskCompletionManager.CreateCompletableTask(System.Object)"/> method.
            </summary>
            <param name="key">The key of the <see cref="T:System.Threading.Tasks.Task"/> to complete.</param>
            <param name="remove"><c>true</c> to remove the completed <see cref="T:System.Threading.Tasks.Task"/> from the <see cref="T:QvaDev.Communication.TaskCompletionManager"/>; otherwise, <c>false</c>.</param>
        </member>
        <member name="M:QvaDev.Communication.TaskCompletionManager.SetResult``1(System.Object,``0,System.Boolean)">
            <summary>
            Sets the result of a <see cref="T:System.Threading.Tasks.Task`1"/> of the specified <paramref name="key"/>, which was created by the <see cref="M:QvaDev.Communication.TaskCompletionManager.CreateCompletableTask``1(System.Object)"/> method.
            </summary>
            <param name="key">The key of the <see cref="T:System.Threading.Tasks.Task`1"/> to complete.</param>
            <param name="result">The desired result of the <see cref="T:System.Threading.Tasks.Task`1"/> to set.</param>
            <param name="remove"><c>true</c> to remove the completed <see cref="T:System.Threading.Tasks.Task`1"/> from the <see cref="T:QvaDev.Communication.TaskCompletionManager"/>; otherwise, <c>false</c>.</param>
        </member>
        <member name="M:QvaDev.Communication.TaskCompletionManager.SetCanceled(System.Object,System.Boolean)">
            <summary>
            Cancels the <see cref="T:System.Threading.Tasks.Task"/> of the specified <paramref name="key"/>.
            </summary>
            <param name="key">The key of the <see cref="T:System.Threading.Tasks.Task"/> to cancel.</param>
            <param name="remove"><c>true</c> to remove the completed <see cref="T:System.Threading.Tasks.Task`1"/> from the <see cref="T:QvaDev.Communication.TaskCompletionManager"/>; otherwise, <c>false</c>.</param>
        </member>
        <member name="M:QvaDev.Communication.TaskCompletionManager.SetError(System.Object,System.Exception,System.Boolean)">
            <summary>
            Fails the <see cref="T:System.Threading.Tasks.Task"/> of the specified <paramref name="key"/> with the provided <paramref name="error"/>.
            </summary>
            <param name="key">The key of the <see cref="T:System.Threading.Tasks.Task"/> to fail.</param>
            <param name="error">The <see cref="T:System.Exception"/> to set.</param>
            <param name="remove"><c>true</c> to remove the completed <see cref="T:System.Threading.Tasks.Task`1"/> from the <see cref="T:QvaDev.Communication.TaskCompletionManager"/>; otherwise, <c>false</c>.</param>
        </member>
        <member name="T:QvaDev.Communication.CurrencyPair">
            <summary>
            Represents a currency pair type <see cref="T:QvaDev.Communication.Symbol"/>.
            </summary>
        </member>
        <member name="P:QvaDev.Communication.CurrencyPair.Base">
            <summary>
            Gets the base currency of the <see cref="T:QvaDev.Communication.CurrencyPair"/>.
            </summary>
        </member>
        <member name="P:QvaDev.Communication.CurrencyPair.Quote">
            <summary>
            Gets the quote currency of the <see cref="T:QvaDev.Communication.CurrencyPair"/>.
            </summary>
        </member>
        <member name="M:QvaDev.Communication.CurrencyPair.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:QvaDev.Communication.CurrencyPair"/> class.
            </summary>
            <param name="baseCurrency">The base currency.</param>
            <param name="quoteCurrency">The quote currency.</param>
        </member>
        <member name="M:QvaDev.Communication.CurrencyPair.TryParse(System.String,QvaDev.Communication.CurrencyPair@)">
            <summary>
            Tries to parse the specified <see cref="T:System.String"/> to a <see cref="T:QvaDev.Communication.CurrencyPair"/>.
            </summary>
        </member>
        <member name="M:QvaDev.Communication.CurrencyPair.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="format">The format specifier. See the constants defined in the <see cref="T:QvaDev.Communication.Symbol"/> <see kangword="struct"/>.</param>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="T:QvaDev.Communication.Symbol">
            <summary>
            Represents an instrument symbol.
            </summary>
        </member>
        <member name="F:QvaDev.Communication.Symbol.Empty">
            <summary>
            Represents products, which do not have a symbol.
            </summary>
            <remarks>See <a href="http://www.onixs.biz/fix-dictionary/4.4/tagNum_55.html">FIX API Symbol Tag</a>.</remarks>
        </member>
        <member name="M:QvaDev.Communication.Symbol.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:QvaDev.Communication.Symbol"/> class.
            </summary>
            <param name="value">The value of the symbol.</param>
        </member>
        <member name="M:QvaDev.Communication.Symbol.Parse(System.String,QvaDev.Communication.SymbolParseOptions)">
            <summary>
            Parses the specified <see cref="T:System.String"/> to a <see cref="T:QvaDev.Communication.Symbol"/>.
            </summary>
        </member>
        <member name="M:QvaDev.Communication.Symbol.TryParse(System.String,QvaDev.Communication.Symbol@,QvaDev.Communication.SymbolParseOptions)">
            <summary>
            Tries to parse the specified <see cref="T:System.String"/> to a <see cref="T:QvaDev.Communication.Symbol"/>.
            </summary>
        </member>
        <member name="M:QvaDev.Communication.Symbol.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
        </member>
        <member name="M:QvaDev.Communication.Symbol.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="format">The format specifier. See the constants defined in the <see cref="T:QvaDev.Communication.Symbol"/> and <see cref="T:QvaDev.Communication.CurrencyPair"/> classes.</param>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="M:QvaDev.Communication.Symbol.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <remarks>This implementation allows that a <see cref="T:QvaDev.Communication.Symbol"/> can be equal to its derived types such as a <see cref="T:QvaDev.Communication.CurrencyPair"/>. This is an intended behavior.</remarks>
        </member>
        <member name="M:QvaDev.Communication.Symbol.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
        </member>
        <member name="T:QvaDev.Communication.Logger">
            <summary>
            The technology independent logger of the application.
            </summary>
        </member>
        <member name="P:QvaDev.Communication.Logger.Instance">
            <summary>
            Gets or sets the logger instance for the current application.
            </summary>
        </member>
        <member name="T:QvaDev.Communication.DuplexStreamConcurrentHandler">
            <summary>
            Provides continuous <see cref="T:System.IO.Stream"/> read/write on dedicated <see cref="T:System.Threading.Thread"/>s and provides
            events for handling statuses and incoming data. Suggested to use for streams, which have just occasionally available data, which has to be processed immediately.
            </summary>
        </member>
        <member name="E:QvaDev.Communication.DuplexStreamConcurrentHandler.DataReceived">
            <summary>
            Occurs when data is received on the underlying <see cref="T:System.IO.Stream"/>. The event is invoked on the reader thread.
            </summary>
            <remarks>
            An unhandled non-fatal <see cref="T:System.Exception"/> in the event handler will not let the reader thread stop.
            However, if an <see cref="T:System.OperationCanceledException"/> is caught from the handler, the <see cref="T:QvaDev.Communication.DuplexStreamConcurrentHandler"/> will be stopped.
            </remarks>
        </member>
        <member name="E:QvaDev.Communication.DuplexStreamConcurrentHandler.StreamEnded">
            <summary>
            Occurs when the underlying <see cref="T:System.IO.Stream"/> is out of data.
            The event is invoked on the reader or writer thread. The <see cref="T:QvaDev.Communication.DuplexStreamConcurrentHandler"/> will be stopped after invoking the event.
            </summary>
        </member>
        <member name="E:QvaDev.Communication.DuplexStreamConcurrentHandler.Error">
            <summary>
            Occurs when exception is thrown in the dedicated writer or reader thread of the current <see cref="T:QvaDev.Communication.DuplexStreamConcurrentHandler"/> instance.
            The event is invoked on the reader or writer thread just before disposing the <see cref="T:QvaDev.Communication.DuplexStreamConcurrentHandler"/> instance.
            </summary>
        </member>
        <member name="P:QvaDev.Communication.DuplexStreamConcurrentHandler.UnderlyingStream">
            <summary>
            Gets the underlying stream.
            </summary>
        </member>
        <member name="P:QvaDev.Communication.DuplexStreamConcurrentHandler.IsRunning">
            <summary>
            Gets whether the receiving/sending loop is running.
            </summary>
        </member>
        <member name="P:QvaDev.Communication.DuplexStreamConcurrentHandler.IsDisposed">
            <summary>
            Gets whether this <see cref="T:QvaDev.Communication.DuplexStreamConcurrentHandler"/> instance is disposed.
            </summary>
        </member>
        <member name="M:QvaDev.Communication.DuplexStreamConcurrentHandler.#ctor(System.IO.Stream,System.Boolean,System.Func{System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:QvaDev.Communication.DuplexStreamConcurrentHandler"/> class.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> to read/write. Must be able to handle parallel read and write operations.</param>
            <param name="closeStream"><c>true</c> to close the <paramref name="stream"/> on disposing this <see cref="T:QvaDev.Communication.DuplexStreamConcurrentHandler"/> instance.
            <br/>Default value: <c>true</c></param>
            <param name="isDataAvailable">If provided, it will be polled from the reader thread whether data is available. May cause a few milliseconds delay in obtaining the data
            but can help to react to <see cref="M:QvaDev.Communication.DuplexStreamConcurrentHandler.Stop"/> nicely without aborting the reader thread.</param>
            <exception cref="T:System.ArgumentNullException"><param name="stream"> is <see langword="null"/>.</param></exception>
            <remarks>
            To start listening to the received and to be sent messages call the <see cref="M:QvaDev.Communication.DuplexStreamConcurrentHandler.Start"/> method after subscribing events.
            </remarks>
        </member>
        <member name="M:QvaDev.Communication.DuplexStreamConcurrentHandler.Start">
            <summary>
            Starts listening to the received and to be sent messages. Before call this method subscribe events in order not to miss any incoming message.
            </summary>
            <exception cref="T:System.ObjectDisposedException">This <see cref="T:QvaDev.Communication.DuplexStreamConcurrentHandler"/> instance is already disposed.</exception>
        </member>
        <member name="M:QvaDev.Communication.DuplexStreamConcurrentHandler.Stop">
            <summary>
            Stops listening to the received and to be sent messages. Listening can be restarted by calling <see cref="M:QvaDev.Communication.DuplexStreamConcurrentHandler.Start"/> again.
            </summary>
            <exception cref="T:System.ObjectDisposedException">This <see cref="T:QvaDev.Communication.DuplexStreamConcurrentHandler"/> instance is already disposed.</exception>
        </member>
        <member name="M:QvaDev.Communication.DuplexStreamConcurrentHandler.SendSynchronously(System.Byte[])">
            <summary>
            Sends the <paramref name="data"/> synchronously and immediately.
            </summary>
            <param name="data">The data to send.</param>
        </member>
        <member name="M:QvaDev.Communication.DuplexStreamConcurrentHandler.EnqueueToSend(System.Byte[])">
            <summary>
            Enqueues the <paramref name="data"/> to be sent to the write queue and returns. If this <see cref="T:QvaDev.Communication.DuplexStreamConcurrentHandler"/> is started,
            then the data will be sent to the underlying stream on a separated thread.
            </summary>
            <param name="data">The data to send.</param>
        </member>
        <member name="M:QvaDev.Communication.DuplexStreamConcurrentHandler.Dispose">
            <summary>
            Disposes the <see cref="T:QvaDev.Communication.DuplexStreamConcurrentHandler"/> instance.
            </summary>
        </member>
    </members>
</doc>
