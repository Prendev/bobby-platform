<?xml version="1.0"?>
<doc>
    <assembly>
        <name>QvaDev.Communication</name>
    </assembly>
    <members>
        <member name="T:QvaDev.Communication.Interfaces.IConnectorConfiguration">
            <summary>
            Represents the configuration of an <see cref="T:QvaDev.Communication.Interfaces.IConnector"/> instance.
            </summary>
        </member>
        <member name="M:QvaDev.Communication.Interfaces.IConnectorConfiguration.GetConnectorType">
            <summary>
            Gets the type of the connector this configuration belongs to. Expected to be an <see cref="T:QvaDev.Communication.Interfaces.IConnector"/> implementation with a constructor,
            which has an argument of the type of this configuration.
            </summary>
        </member>
        <member name="T:QvaDev.Communication.Interfaces.IConnector">
            <summary>
            Represents a connector regardless of the used protocol.
            </summary>
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="E:QvaDev.Communication.Interfaces.IConnector.Closed">
            <summary>
            Occurs when the connector closes (disconnects).
            </summary>
        </member>
        <member name="E:QvaDev.Communication.Interfaces.IConnector.Connected">
            <summary>
            Occurs when the connector connected. If this <see cref="T:QvaDev.Communication.Interfaces.IConnector"/> is a managed one it can occur without calling the <see cref="M:QvaDev.Communication.Interfaces.IConnector.ConnectAsync"/> explicitly.
            </summary>
        </member>
        <member name="P:QvaDev.Communication.Interfaces.IConnector.IsConnected">
            <summary>
            Gets whether the connector is connected.
            </summary>
        </member>
        <member name="P:QvaDev.Communication.Interfaces.IConnector.IsDisposed">
            <summary>
            Gets whether this instance is disposed.
            </summary>
        </member>
        <member name="M:QvaDev.Communication.Interfaces.IConnector.ConnectAsync">
            <summary>
            Connects the connector.
            </summary>
        </member>
        <member name="M:QvaDev.Communication.Interfaces.IConnector.DisconnectAsync">
            <summary>
            Disconnects the connector.
            </summary>
        </member>
        <member name="M:QvaDev.Communication.Interfaces.IConnector.SubscribeMarketDataAsync(QvaDev.Communication.Symbol,System.Int32)">
            <summary>
            Subscribes to the market data of the specified symbol <paramref name="symbol"/>.
            </summary>
            <param name="symbol">The symbol to subscribe to.</param>
            <param name="marketDepth">The market depth to obtain. 0 means full book. This parameter is optional.
            <br/>Default value: <c>0</c>.</param>
        </member>
        <member name="T:QvaDev.Communication.ConnectionManagementRules.LogRule">
            <summary>
            Represents a logging rule can be attached to a <see cref="T:QvaDev.Communication.ConnectionManagementRules.RuleBase"/> instance. Can be used to emit a log if the associated rule matches.
            </summary>
        </member>
        <member name="P:QvaDev.Communication.ConnectionManagementRules.LogRule.Level">
            <summary>
            Gets or sets the log level for the associated rule.
            </summary>
        </member>
        <member name="P:QvaDev.Communication.ConnectionManagementRules.LogRule.Message">
            <summary>
            Gets or sets a message for this <see cref="T:QvaDev.Communication.ConnectionManagementRules.LogRule"/> if <see cref="P:QvaDev.Communication.ConnectionManagementRules.LogRule.LogMessageFactory"/> is <see langword="null"/>.
            </summary>
        </member>
        <member name="P:QvaDev.Communication.ConnectionManagementRules.LogRule.LogMessageFactory">
            <summary>
            Gets or sets the log message factory for this <see cref="T:QvaDev.Communication.ConnectionManagementRules.LogRule"/>.
            <br/>The first parameter is the <see cref="T:QvaDev.Communication.ConnectionManagementRules.RuleBase"/> this <see cref="T:QvaDev.Communication.ConnectionManagementRules.LogRule"/> belongs to.
            <br/>The second parameter is the managed <see cref="T:QvaDev.Communication.Interfaces.IConnector"/> instance.
            <br/>The third parameter is the argument object was used to evaluate the <see cref="T:QvaDev.Communication.ConnectionManagementRules.LogRule"/> instance.
            <br/>If the returned object is <see langword="null"/>, then no log will be emitted. Otherwise, the returned object will be passed to the <see cref="T:QvaDev.Communication.Logger"/>.
            </summary>
        </member>
        <member name="T:QvaDev.Communication.ConnectionManagementRules.ConnectionManagementContext">
            <summary>
            Represents a context when evaluating connection management rules.
            </summary>
        </member>
        <member name="F:QvaDev.Communication.ConnectionManagementRules.ConnectionManagementContext.UserConnecting">
            <summary>
            The managed <see cref="T:QvaDev.Communication.Interfaces.IConnector"/> is being connected explicitly.
            The additional argument of the <see cref="M:QvaDev.Communication.ConnectionManagementRules.RuleBase.IsMatch(QvaDev.Communication.ConnectionManagementRules.ConnectionManagementContext,System.Object)"/> and <see cref="M:QvaDev.Communication.ConnectionManagementRules.RuleBase.Execute(QvaDev.Communication.ConnectionManagementRules.ConnectionManagementContext,QvaDev.Communication.Interfaces.IConnector,System.Object)"/> methods is always <see langword="null"/>.
            </summary>
        </member>
        <member name="F:QvaDev.Communication.ConnectionManagementRules.ConnectionManagementContext.UserDisconnecting">
            <summary>
            The managed <see cref="T:QvaDev.Communication.Interfaces.IConnector"/> is being disconnected explicitly.
            The additional argument of the <see cref="M:QvaDev.Communication.ConnectionManagementRules.RuleBase.IsMatch(QvaDev.Communication.ConnectionManagementRules.ConnectionManagementContext,System.Object)"/> and <see cref="M:QvaDev.Communication.ConnectionManagementRules.RuleBase.Execute(QvaDev.Communication.ConnectionManagementRules.ConnectionManagementContext,QvaDev.Communication.Interfaces.IConnector,System.Object)"/> methods is always <see langword="null"/>.
            </summary>
        </member>
        <member name="F:QvaDev.Communication.ConnectionManagementRules.ConnectionManagementContext.Connected">
            <summary>
            The managed <see cref="T:QvaDev.Communication.Interfaces.IConnector"/> has been connected.
            The additional argument of the <see cref="M:QvaDev.Communication.ConnectionManagementRules.RuleBase.IsMatch(QvaDev.Communication.ConnectionManagementRules.ConnectionManagementContext,System.Object)"/> and <see cref="M:QvaDev.Communication.ConnectionManagementRules.RuleBase.Execute(QvaDev.Communication.ConnectionManagementRules.ConnectionManagementContext,QvaDev.Communication.Interfaces.IConnector,System.Object)"/> methods is always <see langword="null"/>.
            </summary>
        </member>
        <member name="F:QvaDev.Communication.ConnectionManagementRules.ConnectionManagementContext.Disconnected">
            <summary>
            The managed <see cref="T:QvaDev.Communication.Interfaces.IConnector"/> has been disconnected.
            The additional argument of the <see cref="M:QvaDev.Communication.ConnectionManagementRules.RuleBase.IsMatch(QvaDev.Communication.ConnectionManagementRules.ConnectionManagementContext,System.Object)"/> and <see cref="M:QvaDev.Communication.ConnectionManagementRules.RuleBase.Execute(QvaDev.Communication.ConnectionManagementRules.ConnectionManagementContext,QvaDev.Communication.Interfaces.IConnector,System.Object)"/> methods is <see langword="null"/> if there was no error; otherwise, it is an <see cref="T:System.Exception"/> instance.
            </summary>
        </member>
        <member name="F:QvaDev.Communication.ConnectionManagementRules.ConnectionManagementContext.Disposed">
            <summary>
            The <see cref="T:QvaDev.Communication.ConnectionManager"/> instance has been disposed.
            The additional argument of the <see cref="M:QvaDev.Communication.ConnectionManagementRules.RuleBase.IsMatch(QvaDev.Communication.ConnectionManagementRules.ConnectionManagementContext,System.Object)"/> and <see cref="M:QvaDev.Communication.ConnectionManagementRules.RuleBase.Execute(QvaDev.Communication.ConnectionManagementRules.ConnectionManagementContext,QvaDev.Communication.Interfaces.IConnector,System.Object)"/> methods is always <see langword="null"/>.
            </summary>
        </member>
        <member name="T:QvaDev.Communication.ConnectionManagementRules.ReconnectIfExceptionMatches">
            <summary>
            Represents a rule for reconnecting after a specified time if the connection has been closed with an exception containing a specific message.
            </summary>
            <seealso cref="T:QvaDev.Communication.ConnectionManagementRules.ReconnectAfterDelay" />
        </member>
        <member name="P:QvaDev.Communication.ConnectionManagementRules.ReconnectIfExceptionMatches.ContainedMessagePatterns">
            <summary>
            Gets or sets the message fragments, which satisfy the rule. Each line is evaluated separately until the rule is satisfied.
            </summary>
        </member>
        <member name="T:QvaDev.Communication.ConnectionManagementRules.RuleBase">
            <summary>
            Represents a connection management rule.
            </summary>
        </member>
        <member name="P:QvaDev.Communication.ConnectionManagementRules.RuleBase.Description">
            <summary>
            Gets or sets the description of the rule.
            </summary>
        </member>
        <member name="P:QvaDev.Communication.ConnectionManagementRules.RuleBase.LogRule">
            <summary>
            Gets or sets a custom log rule for this rule. Will be emitted if the rule is activated.
            </summary>
        </member>
        <member name="M:QvaDev.Communication.ConnectionManagementRules.RuleBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:QvaDev.Communication.ConnectionManagementRules.RuleBase"/> class.
            </summary>
        </member>
        <member name="M:QvaDev.Communication.ConnectionManagementRules.RuleBase.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
        </member>
        <member name="M:QvaDev.Communication.ConnectionManagementRules.RuleBase.IsMatch(QvaDev.Communication.ConnectionManagementRules.ConnectionManagementContext,System.Object)">
            <summary>
            Determines whether this rule matches the specified context and argument.
            </summary>
            <param name="context">The context of the evaluation.</param>
            <param name="arg">An optional additional argument. See the <see cref="T:QvaDev.Communication.ConnectionManagementRules.ConnectionManagementContext"/> for details.</param>
            <returns><see langword="true"/> if the current instance matches; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:QvaDev.Communication.ConnectionManagementRules.RuleBase.Execute(QvaDev.Communication.ConnectionManagementRules.ConnectionManagementContext,QvaDev.Communication.Interfaces.IConnector,System.Object)">
            <summary>
            Executes the current rule actions. The base implementation handles the logging. Call the base implementation for the default log handling.
            </summary>
            <param name="context">The context of the evaluation.</param>
            <param name="arg">An optional additional argument. See the <see cref="T:QvaDev.Communication.ConnectionManagementRules.ConnectionManagementContext"/> for details.</param>
            <param name="connector">The managed connector instance.</param>
            <returns><see langword="true"/>To continue the evaluation of the other rules in the same context; <see langword="false"/> to break the evaluation.
            The base implementation returns <see langword="true"/>.</returns>
        </member>
        <member name="T:QvaDev.Communication.ConnectionManagementRules.ReconnectAfterDelay">
            <summary>
            Represents a rule for reconnecting after a specified time if the connection has been closed.
            The log is processed only context is <see cref="F:QvaDev.Communication.ConnectionManagementRules.ConnectionManagementContext.Disconnected"/>.
            The rules processing is continued only if context is not <see cref="F:QvaDev.Communication.ConnectionManagementRules.ConnectionManagementContext.Disconnected"/>.
            </summary>
        </member>
        <member name="P:QvaDev.Communication.ConnectionManagementRules.ReconnectAfterDelay.Delay">
            <summary>
            Gets or sets the delay in seconds.
            </summary>
        </member>
        <member name="T:QvaDev.Communication.ConnectionManagementRules.SubscribeMarketData">
            <summary>
            Represents a rule, which makes possible auto subscription for market data.
            Triggered only in <see cref="F:QvaDev.Communication.ConnectionManagementRules.ConnectionManagementContext.Connected"/> context.
            Processing other rules are continued if <see cref="P:QvaDev.Communication.ConnectionManagementRules.SubscribeMarketData.ContinueProcessing"/> is <see langword="true"/>.
            </summary>
            <seealso cref="T:QvaDev.Communication.ConnectionManagementRules.RuleBase" />
        </member>
        <member name="P:QvaDev.Communication.ConnectionManagementRules.SubscribeMarketData.Subscriptions">
            <summary>
            Gets the subscriptions for this rule.
            </summary>
        </member>
        <member name="P:QvaDev.Communication.ConnectionManagementRules.SubscribeMarketData.ContinueProcessing">
            <summary>
            Gets or sets whether the evaluation of rules can be continued if this rule is executed.
            </summary>
        </member>
        <member name="M:QvaDev.Communication.ScheduledTaskManager`1.AddOrReplace(`0,System.Action,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Adds a new scheduled task to the manager or replaces an already existing one.
            </summary>
            <param name="key">The key. Must not be <see langword="null"/>.</param>
            <param name="action">The action to execute when scheduled.</param>
            <param name="interval">The interval in milliseconds to execute the <paramref name="action"/>.</param>
            <param name="start"><see langword="true"/> to start the timer immediately; otherwise, <see langword="false"/>.</param>
            <param name="repeating"><see langword="true"/> to allow to execute the <paramref name="action"/> repeatedly; <see langword="false"/> to execute the task only once. The timing can be started again by the <see cref="M:QvaDev.Communication.ScheduledTaskManager`1.Update(`0,System.Nullable{System.Int32},System.Nullable{System.Boolean})"/> method.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QvaDev.Communication.ScheduledTaskManager`1.Update(`0,System.Nullable{System.Int32},System.Nullable{System.Boolean})">
            <summary>
            Updates the interval and active state of specified scheduled task.
            </summary>
            <param name="key">The key. Must not be <see langword="null"/>.</param>
            <param name="interval">If not <see langword="null"/>, the new interval in milliseconds of the corresponding task. If specified for and already running task, then the timer will be reset.</param>
            <param name="enabled">If not <see langword="null"/>, sets the new enabled status of the corresponding task.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">No scheduled task found with the specified <paramref name="key"/>.</exception>
        </member>
        <member name="M:QvaDev.Communication.ScheduledTaskManager`1.ResetTimer(`0)">
            <summary>
            Resets the timer for the corresponding tasks, meaning, if the task is currently active, then its trigger will not occur before the specified interval.
            </summary>
            <param name="key">The key.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">No scheduled task found with the specified <paramref name="key"/>.</exception>
        </member>
        <member name="M:QvaDev.Communication.ScheduledTaskManager`1.Exists(`0)">
            <summary>
            Gets whether a scheduled task with the specified <paramref name="key"/> exists in the scheduler.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="M:QvaDev.Communication.ScheduledTaskManager`1.Remove(`0)">
            <summary>
            Removes the task of the specified <paramref name="key"/> from the scheduler.
            </summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QvaDev.Communication.ScheduledTaskManager`1.IsActive(`0)">
            <summary>
            Gets whether a scheduled task with the specified <paramref name="key"/> exists and is currently active in the scheduler, meaning, it will be executed when the specified interval is elapsed.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="M:QvaDev.Communication.ScheduledTaskManager`1.RemoveAll">
            <summary>
            Removes all tasks from the scheduler.
            </summary>
        </member>
        <member name="M:QvaDev.Communication.ScheduledTaskManager`1.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:QvaDev.Communication.ConnectionManager">
            <summary>
            Adds a management layer to an existing <see cref="T:QvaDev.Communication.Interfaces.IConnector"/> instance.
            </summary>
        </member>
        <member name="E:QvaDev.Communication.ConnectionManager.Closed">
            <summary>
            Occurs when the wrapped connector closes (disconnects).
            </summary>
        </member>
        <member name="E:QvaDev.Communication.ConnectionManager.Connected">
            <summary>
            Occurs when the wrapped connector closes (disconnects).
            </summary>
        </member>
        <member name="P:QvaDev.Communication.ConnectionManager.Connector">
            <summary>
            Gets the wrapped managed connector.
            </summary>
        </member>
        <member name="P:QvaDev.Communication.ConnectionManager.IsDisposed">
            <summary>
            Gets whether this instance is disposed.
            </summary>
        </member>
        <member name="P:QvaDev.Communication.ConnectionManager.IsConnected">
            <summary>
            Gets whether the wrapped connector is connected.
            </summary>
        </member>
        <member name="M:QvaDev.Communication.ConnectionManager.#ctor(QvaDev.Communication.ConnectionManagerConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:QvaDev.Communication.ConnectionManager"/> class.
            </summary>
            <param name="configuration">The configuration.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="configuration"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:QvaDev.Communication.ConnectionManager.#ctor(QvaDev.Communication.Interfaces.IConnectorConfiguration,QvaDev.Communication.ConnectionManagementRules.RulesCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:QvaDev.Communication.ConnectionManager"/> class.
            </summary>
            <param name="connectorConfig">The connector configuration.</param>
            <param name="rules">The rules to use.</param>
        </member>
        <member name="M:QvaDev.Communication.ConnectionManager.#ctor(QvaDev.Communication.Interfaces.IConnector,QvaDev.Communication.ConnectionManagementRules.RulesCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:QvaDev.Communication.ConnectionManager"/> class.
            </summary>
            <param name="connector">The connector to manage.</param>
            <param name="rules">The rules to use.</param>
            <exception cref="T:System.ArgumentNullException">connector</exception>
        </member>
        <member name="M:QvaDev.Communication.ConnectionManager.Dispose">
            <summary>
            Closes and releases the managed <see cref="T:QvaDev.Communication.Interfaces.IConnector"/>.
            </summary>
        </member>
        <member name="M:QvaDev.Communication.ConnectionManager.ConnectAsync">
            <summary>
            Connects the wrapped connector.
            </summary>
        </member>
        <member name="M:QvaDev.Communication.ConnectionManager.DisconnectAsync">
            <summary>
            Disconnects the wrapped connector.
            </summary>
        </member>
        <member name="M:QvaDev.Communication.ConnectionManager.SubscribeMarketDataAsync(QvaDev.Communication.Symbol,System.Int32)">
            <summary>
            Subscribes to the market data of the specified symbol <paramref name="symbol"/>.
            </summary>
            <param name="symbol">The symbol to subscribe to.</param>
            <param name="marketDepth">The market depth to obtain. 0 means full book. This parameter is optional.
            <br/>Default value: <c>0</c>.</param>
        </member>
        <member name="T:QvaDev.Communication.ConnectionManagerConfiguration">
            <summary>
            Represents the configuration of the <see cref="T:QvaDev.Communication.ConnectionManager"/> class.
            </summary>
        </member>
        <member name="P:QvaDev.Communication.ConnectionManagerConfiguration.ConnectorConfiguration">
            <summary>
            Gets or sets the configuration of the connector to be managed.
            </summary>
        </member>
        <member name="P:QvaDev.Communication.ConnectionManagerConfiguration.ManagementRules">
            <summary>
            Gets or sets the management rules for the maintained connection.
            </summary>
        </member>
        <member name="T:QvaDev.Communication.ConnectorFactory">
            <summary>
            Contains factory methods for creating and discovering connectors.
            </summary>
        </member>
        <member name="M:QvaDev.Communication.ConnectorFactory.CreateConnector(QvaDev.Communication.Interfaces.IConnectorConfiguration)">
            <summary>
            Creates an <see cref="T:QvaDev.Communication.Interfaces.IConnector"/> instance for the given <paramref name="connectorConfig"/>.
            </summary>
            <param name="connectorConfig">The connector configuration.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="connectorConfig"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">Invalid connector type, or no proper constructor found.</exception>
        </member>
        <member name="M:QvaDev.Communication.ConnectorFactory.RegisterConnectorAssembly(System.Reflection.Assembly)">
            <summary>
            Registers the specified <paramref name="assembly"/> in which the <see cref="M:QvaDev.Communication.ConnectorFactory.GetConnectorTypes"/> and <see cref="M:QvaDev.Communication.ConnectorFactory.GetConfigurationTypes"/> methods look for connector and configuration types.
            </summary>
            <param name="assembly">The assembly.</param>
        </member>
        <member name="M:QvaDev.Communication.ConnectorFactory.GetConnectorTypes">
            <summary>
            Gets the connector types from the assemblies registered by the <see cref="M:QvaDev.Communication.ConnectorFactory.RegisterConnectorAssembly(System.Reflection.Assembly)"/> methods including
            the results of the previous <see cref="M:QvaDev.Communication.ConnectorFactory.GetConfigurationType(System.Type)"/> calls so far.
            </summary>
            <returns>A collection of t</returns>
        </member>
        <member name="M:QvaDev.Communication.ConnectorFactory.GetConfigurationTypes">
            <summary>
            Gets the configuration types from the assemblies registered by the <see cref="M:QvaDev.Communication.ConnectorFactory.RegisterConnectorAssembly(System.Reflection.Assembly)"/> methods including
            the results of the previous <see cref="M:QvaDev.Communication.ConnectorFactory.GetConfigurationType(System.Type)"/> calls so far.
            </summary>
            <returns>A collection of t</returns>
        </member>
        <member name="M:QvaDev.Communication.ConnectorFactory.GetConfigurationType(System.Type)">
            <summary>
            Gets the type of the configuration of the specified <paramref name="connectorType"/>.
            </summary>
            <param name="connectorType">Type of the connector. Must be an <see cref="T:QvaDev.Communication.Interfaces.IConnector"/> implementation.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="connectorType"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="connectorType"/> is not an implementation of <see cref="T:QvaDev.Communication.Interfaces.IConnector"/> or
            does not have a constructor with a single parameter of an <see cref="T:QvaDev.Communication.Interfaces.IConnectorConfiguration"/> parameter.</exception>
        </member>
        <member name="M:QvaDev.Communication.ConnectorFactory.GetConfigurationCtor(System.Type,System.Boolean)">
            <summary>
            Gets the configuration constructor for a connector type.
            </summary>
        </member>
        <member name="P:QvaDev.Communication.ClosedEventArgs.Error">
            <summary>
            If the closing occurred due to an error gets the causing exception.
            If closing occurred due to user request this property returns null.
            </summary>
        </member>
        <member name="M:QvaDev.Communication.ClosedEventArgs.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:QvaDev.Communication.ClosedEventArgs"/> class.
            </summary>
            <param name="exception">The exception or <see langword="null"/> if no error occurred.</param>
        </member>
        <member name="T:QvaDev.Communication.DataReceivedEventArgs">
            <summary>
            Represents the data of <see cref="E:QvaDev.Communication.DuplexStreamConcurrentHandler.DataReceived"/> event.
            </summary>
        </member>
        <member name="P:QvaDev.Communication.DataReceivedEventArgs.Buffer">
            <summary>
            Gets the buffer of received data. The length of actually received data is returned by <see cref="P:QvaDev.Communication.DataReceivedEventArgs.Length"/> property.
            </summary>
        </member>
        <member name="P:QvaDev.Communication.DataReceivedEventArgs.Length">
            <summary>
            Gets the actual length of <see cref="P:QvaDev.Communication.DataReceivedEventArgs.Buffer"/> to process.
            </summary>
        </member>
        <member name="T:QvaDev.Communication.EventArgs`1">
            <summary>
            Represents a simple event argument of type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type of the event argument.</typeparam>
        </member>
        <member name="P:QvaDev.Communication.EventArgs`1.EventData">
            <summary>
            Gets the event data.
            </summary>
        </member>
        <member name="M:QvaDev.Communication.EventArgs`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:QvaDev.Communication.EventArgs`1"/> class.
            </summary>
            <param name="arg">The argument.</param>
        </member>
        <member name="M:QvaDev.Communication.EventHandlerExtensions.InvokeSafe``1(System.EventHandler,System.Object,``0)">
            <summary>
            Invoking the user's self subscription without risking the stop of reader/writer thread due to an error in user's event handler.
            If <see cref="T:System.OperationCanceledException"/> is thrown it is propagated to the caller.
            </summary>
        </member>
        <member name="M:QvaDev.Communication.EventHandlerExtensions.InvokeSafe``1(System.EventHandler{``0},System.Object,``0)">
            <summary>
            Invoking the user's self subscription without risking the stop of reader/writer thread due to an error in user's event handler.
            If <see cref="T:System.OperationCanceledException"/> is thrown it is propagated to the caller.
            </summary>
        </member>
        <member name="M:QvaDev.Communication.WaitHandleExtensions.WaitOneAsync(System.Threading.WaitHandle,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Waits for a signal asynchronously on the provided <paramref name="handle"/>.
            </summary>
        </member>
        <member name="M:QvaDev.Communication.WaitHandleExtensions.WaitOneAsync(System.Threading.WaitHandle,System.Threading.CancellationToken)">
            <summary>
            Waits for a signal asynchronously on the provided <paramref name="handle"/>.
            </summary>
        </member>
        <member name="M:QvaDev.Communication.DictionaryExtensions.GetValueOrDefault``1(System.Collections.Generic.IDictionary{System.String,System.Object},System.String,``0)">
            <summary>
            Tries to get the typed value from a <see cref="T:System.String"/>-<see cref="T:System.Object"/> dictionary for the given key.
            </summary>
            <param name="dictionary">The dictionary.</param>
            <param name="key">The dictionary key.</param>
            <param name="defaultValue">The default value to return if <paramref name="key"/> not found or its actual type is not compatible with <typeparamref name="TActualValue"/>.</param>
            <typeparam name="TActualValue">The actual type of the stored value.</typeparam>
            <returns>The found value or <paramref name="defaultValue"/> if <paramref name="key"/> not found or its type is wrong.</returns>
        </member>
        <member name="M:QvaDev.Communication.DictionaryExtensions.GetValueOrDefault``3(System.Collections.Generic.IDictionary{``0,``1},``0,``2)">
            <summary>
            Tries to get the typed value from a dictionary for the given key.
            </summary>
            <param name="dictionary">The dictionary.</param>
            <param name="key">The dictionary key.</param>
            <param name="defaultValue">The default value to return if <paramref name="key"/> not found or its actual type is not compatible with <typeparamref name="TActualValue"/>.</param>
            <typeparam name="TKey">The type of value</typeparam>
            <typeparam name="TValue">Type of the stored values in the <paramref name="dictionary"/>.</typeparam>
            <typeparam name="TActualValue">The actual type of the stored value.</typeparam>
            <returns>The found value or <paramref name="defaultValue"/> if <paramref name="key"/> not found or its type is wrong.</returns>
        </member>
        <member name="T:QvaDev.Communication.TaskCompletionManager`1">
            <summary>
            Represents a manager for completable <see cref="T:System.Threading.Tasks.Task"/> instances, which automatically timed out if their result is not set in a specified time interval.
            </summary>
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="M:QvaDev.Communication.TaskCompletionManager`1.#ctor(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:QvaDev.Communication.TaskCompletionManager`1"/> class.
            </summary>
            <param name="interval">The interval, in milliseconds, for checking task statuses.</param>
            <param name="timeout">The interval, in milliseconds, after an uncompleted task will timeout.</param>
            <param name="throwErrorOnTimeout">If <c>true</c>, a <see cref="T:System.TimeoutException"/> will be thrown on timeout. If <c>false</c>, the created task will be completed by setting the default result.</param>
        </member>
        <member name="M:QvaDev.Communication.TaskCompletionManager`1.IsCompleted(`0)">
            <summary>
            Gets whether the <see cref="T:System.Threading.Tasks.Task"/> of the specified <paramref name="key"/> is completed.
            </summary>
            <param name="key">The key of the <see cref="T:System.Threading.Tasks.Task"/>.</param>
            <returns><see langword="null"/> if no <see cref="T:System.Threading.Tasks.Task"/> found with the specified <paramref name="key"/>,
            <c>true</c> if the corresponding <see cref="T:System.Threading.Tasks.Task"/> is completed,
            <c>false</c> if the corresponding <see cref="T:System.Threading.Tasks.Task"/> is not completed.</returns>
        </member>
        <member name="M:QvaDev.Communication.TaskCompletionManager`1.CreateCompletableTask``1(`0)">
            <summary>
            Creates a <see cref="T:System.Threading.Tasks.Task`1"/>, which can be completed by using the public methods of this <see cref="T:QvaDev.Communication.TaskCompletionManager`1"/> instance.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="key">The key, which can be used to complete the result <see cref="T:System.Threading.Tasks.Task`1"/> by calling the methods of this <see cref="T:QvaDev.Communication.TaskCompletionManager`1"/> instance.
            If the same key is re-used multiple times, the possibly not completed previous task will be canceled.</param>
            <returns>A not completed <see cref="T:System.Threading.Tasks.Task`1"/> instance.</returns>
        </member>
        <member name="M:QvaDev.Communication.TaskCompletionManager`1.CreateCompletableTask(`0)">
            <summary>
            Creates a <see cref="T:System.Threading.Tasks.Task"/>, which can be completed by using the public methods of this <see cref="T:QvaDev.Communication.TaskCompletionManager`1"/> instance.
            </summary>
            <param name="key">The key, which can be used to complete the result <see cref="T:System.Threading.Tasks.Task"/> by calling the methods of this <see cref="T:QvaDev.Communication.TaskCompletionManager`1"/> instance.
            If the same key is re-used multiple times, the possibly not completed previous task will be canceled.</param>
            <returns>A not completed <see cref="T:System.Threading.Tasks.Task"/> instance.</returns>
        </member>
        <member name="M:QvaDev.Communication.TaskCompletionManager`1.ReplaceCompletableTask``1(`0,``0,System.Exception)">
            <summary>
            Creates a <see cref="T:System.Threading.Tasks.Task`1"/>, which can be completed by using the public methods of this <see cref="T:QvaDev.Communication.TaskCompletionManager`1"/> instance.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="key">The key, which can be used to complete the result <see cref="T:System.Threading.Tasks.Task`1"/> by calling the methods of this <see cref="T:QvaDev.Communication.TaskCompletionManager`1"/> instance.
            If the same key is re-used multiple times, the possibly not completed previous task will be canceled.</param>
            <param name="oldTaskResult">If there is an old task to replace, then </param>
            <returns>A not completed <see cref="T:System.Threading.Tasks.Task`1"/> instance.</returns>
        </member>
        <member name="M:QvaDev.Communication.TaskCompletionManager`1.ReplaceCompletableTask(`0,System.Exception)">
            <summary>
            Creates a <see cref="T:System.Threading.Tasks.Task`1"/>, which can be completed by using the public methods of this <see cref="T:QvaDev.Communication.TaskCompletionManager`1"/> instance.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="key">The key, which can be used to complete the result <see cref="T:System.Threading.Tasks.Task`1"/> by calling the methods of this <see cref="T:QvaDev.Communication.TaskCompletionManager`1"/> instance.
            If the same key is re-used multiple times, the possibly not completed previous task will be canceled.</param>
            <returns>A not completed <see cref="T:System.Threading.Tasks.Task`1"/> instance.</returns>
        </member>
        <member name="M:QvaDev.Communication.TaskCompletionManager`1.RemoveAll(System.Func{`0,System.Boolean},System.Exception)">
            <summary>
            Removes all <see cref="T:System.Threading.Tasks.Task"/>s from the <see cref="T:QvaDev.Communication.TaskCompletionManager`1"/> selected by the provided <paramref name="predicate"/>
            and cancels all of the removed unfinished tasks.
            </summary>
            <param name="predicate">The predicate, which selects the entries to remove.</param>
            <param name="error">If <see langword="null"/>, then the unfinished tasks to remove will be canceled; otherwise, they will be finished with error.</param>
        </member>
        <member name="M:QvaDev.Communication.TaskCompletionManager`1.Clear">
            <summary>
            Removes all <see cref="T:System.Threading.Tasks.Task"/>s from the <see cref="T:QvaDev.Communication.TaskCompletionManager`1"/> and cancels all of the removed unfinished tasks.
            </summary>
        </member>
        <member name="M:QvaDev.Communication.TaskCompletionManager`1.Dispose">
            <summary>
            Disposes this <see cref="T:QvaDev.Communication.TaskCompletionManager`1"/> instance.
            </summary>
        </member>
        <member name="M:QvaDev.Communication.TaskCompletionManager`1.ContainsKey(`0)">
            <summary>
            Determines whether the <see cref="T:QvaDev.Communication.TaskCompletionManager`1"/> contains a <see cref="T:System.Threading.Tasks.Task"/> with specified <paramref name="key"/>.
            </summary>
            <param name="key">The key to check.</param>
            <returns><c>true</c> if the specified <paramref name="key"/> exists in current <see cref="T:QvaDev.Communication.TaskCompletionManager`1"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:QvaDev.Communication.TaskCompletionManager`1.TryGetTask(`0,System.Threading.Tasks.Task@)">
            <summary>
            Tries the get a <see cref="T:System.Threading.Tasks.Task"/> with specified <paramref name="key"/>.
            </summary>
            <param name="key">The key of the <see cref="T:System.Threading.Tasks.Task"/> to get.</param>
            <param name="task">The result <see cref="T:System.Threading.Tasks.Task"/> if the return value is <c>true</c>;otherwise, <see langword="null"/>.</param>
            <returns><c>true</c>, if <paramref name="key"/> exists in current <see cref="T:QvaDev.Communication.TaskCompletionManager`1"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:QvaDev.Communication.TaskCompletionManager`1.TryGetTask``1(`0,System.Threading.Tasks.Task{``0}@)">
            <summary>
            Tries the get a <see cref="T:System.Threading.Tasks.Task`1"/> with specified <paramref name="key"/>.
            </summary>
            <param name="key">The key of the <see cref="T:System.Threading.Tasks.Task`1"/> to get.</param>
            <param name="task">The result <see cref="T:System.Threading.Tasks.Task`1"/> if the return value is <c>true</c>;otherwise, <see langword="null"/>.</param>
            <returns><c>true</c>, if <paramref name="key"/> exists in current <see cref="T:QvaDev.Communication.TaskCompletionManager`1"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:QvaDev.Communication.TaskCompletionManager`1.SetCompleted(`0,System.Boolean)">
            <summary>
            Sets a <see cref="T:System.Threading.Tasks.Task"/> completed of the specified <paramref name="key"/>, which was created by the <see cref="M:QvaDev.Communication.TaskCompletionManager`1.CreateCompletableTask(`0)"/> method.
            </summary>
            <param name="key">The key of the <see cref="T:System.Threading.Tasks.Task"/> to complete.</param>
            <param name="remove"><c>true</c> to remove the completed <see cref="T:System.Threading.Tasks.Task"/> from the <see cref="T:QvaDev.Communication.TaskCompletionManager`1"/>; otherwise, <c>false</c>.</param>
        </member>
        <member name="M:QvaDev.Communication.TaskCompletionManager`1.SetResult``1(`0,``0,System.Boolean)">
            <summary>
            Sets the result of a <see cref="T:System.Threading.Tasks.Task`1"/> of the specified <paramref name="key"/>, which was created by the <see cref="M:QvaDev.Communication.TaskCompletionManager`1.CreateCompletableTask``1(`0)"/> method.
            </summary>
            <param name="key">The key of the <see cref="T:System.Threading.Tasks.Task`1"/> to complete.</param>
            <param name="result">The desired result of the <see cref="T:System.Threading.Tasks.Task`1"/> to set.</param>
            <param name="remove"><c>true</c> to remove the completed <see cref="T:System.Threading.Tasks.Task`1"/> from the <see cref="T:QvaDev.Communication.TaskCompletionManager`1"/>; otherwise, <c>false</c>.</param>
        </member>
        <member name="M:QvaDev.Communication.TaskCompletionManager`1.SetCanceled(`0,System.Boolean)">
            <summary>
            Cancels the <see cref="T:System.Threading.Tasks.Task"/> of the specified <paramref name="key"/>.
            </summary>
            <param name="key">The key of the <see cref="T:System.Threading.Tasks.Task"/> to cancel.</param>
            <param name="remove"><c>true</c> to remove the completed <see cref="T:System.Threading.Tasks.Task`1"/> from the <see cref="T:QvaDev.Communication.TaskCompletionManager`1"/>; otherwise, <c>false</c>.</param>
        </member>
        <member name="M:QvaDev.Communication.TaskCompletionManager`1.SetError(`0,System.Exception,System.Boolean)">
            <summary>
            Fails the <see cref="T:System.Threading.Tasks.Task"/> of the specified <paramref name="key"/> with the provided <paramref name="error"/>.
            </summary>
            <param name="key">The key of the <see cref="T:System.Threading.Tasks.Task"/> to fail.</param>
            <param name="error">The <see cref="T:System.Exception"/> to set.</param>
            <param name="remove"><c>true</c> to remove the completed <see cref="T:System.Threading.Tasks.Task`1"/> from the <see cref="T:QvaDev.Communication.TaskCompletionManager`1"/>; otherwise, <c>false</c>.</param>
        </member>
        <member name="T:QvaDev.Communication.CurrencyPair">
            <summary>
            Represents a currency pair type <see cref="T:QvaDev.Communication.Symbol"/>.
            </summary>
        </member>
        <member name="P:QvaDev.Communication.CurrencyPair.Base">
            <summary>
            Gets the base currency of the <see cref="T:QvaDev.Communication.CurrencyPair"/>.
            </summary>
        </member>
        <member name="P:QvaDev.Communication.CurrencyPair.Quote">
            <summary>
            Gets the quote currency of the <see cref="T:QvaDev.Communication.CurrencyPair"/>.
            </summary>
        </member>
        <member name="M:QvaDev.Communication.CurrencyPair.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:QvaDev.Communication.CurrencyPair"/> class.
            </summary>
            <param name="baseCurrency">The base currency.</param>
            <param name="quoteCurrency">The quote currency.</param>
        </member>
        <member name="M:QvaDev.Communication.CurrencyPair.TryParse(System.String,QvaDev.Communication.CurrencyPair@)">
            <summary>
            Tries to parse the specified <see cref="T:System.String"/> to a <see cref="T:QvaDev.Communication.CurrencyPair"/>.
            </summary>
        </member>
        <member name="M:QvaDev.Communication.CurrencyPair.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="format">The format specifier. See the constants defined in the <see cref="T:QvaDev.Communication.Symbol"/> <see kangword="struct"/>.</param>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="T:QvaDev.Communication.Symbol">
            <summary>
            Represents an instrument symbol.
            </summary>
        </member>
        <member name="F:QvaDev.Communication.Symbol.Empty">
            <summary>
            Represents products, which do not have a symbol.
            </summary>
            <remarks>See <a href="http://www.onixs.biz/fix-dictionary/4.4/tagNum_55.html">FIX API Symbol Tag</a>.</remarks>
        </member>
        <member name="M:QvaDev.Communication.Symbol.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:QvaDev.Communication.Symbol"/> class.
            </summary>
            <param name="value">The value of the symbol.</param>
        </member>
        <member name="M:QvaDev.Communication.Symbol.Parse(System.String,QvaDev.Communication.SymbolParseOptions)">
            <summary>
            Parses the specified <see cref="T:System.String"/> to a <see cref="T:QvaDev.Communication.Symbol"/>.
            </summary>
        </member>
        <member name="M:QvaDev.Communication.Symbol.TryParse(System.String,QvaDev.Communication.Symbol@,QvaDev.Communication.SymbolParseOptions)">
            <summary>
            Tries to parse the specified <see cref="T:System.String"/> to a <see cref="T:QvaDev.Communication.Symbol"/>.
            </summary>
        </member>
        <member name="M:QvaDev.Communication.Symbol.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
        </member>
        <member name="M:QvaDev.Communication.Symbol.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="format">The format specifier. See the constants defined in the <see cref="T:QvaDev.Communication.Symbol"/> and <see cref="T:QvaDev.Communication.CurrencyPair"/> classes.</param>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="M:QvaDev.Communication.Symbol.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <remarks>This implementation allows that a <see cref="T:QvaDev.Communication.Symbol"/> can be equal to its derived types such as a <see cref="T:QvaDev.Communication.CurrencyPair"/>. This is an intended behavior.</remarks>
        </member>
        <member name="M:QvaDev.Communication.Symbol.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
        </member>
        <member name="T:QvaDev.Communication.Logger">
            <summary>
            The technology independent logger of the application. Logger instances can be added by the <see cref="M:QvaDev.Communication.Logger.AddLogger(Common.Logging.ILog)"/> method.
            </summary>
        </member>
        <member name="P:QvaDev.Communication.Logger.DisplayContent">
            <summary>
            Gets or sets a callback, which is called when the content of an object is needed to be dumped created by the <see cref="M:QvaDev.Communication.Logger.ToContentPresenter(System.Object,System.String)"/> method.
            If not set, a default logic will be used.
            </summary>
        </member>
        <member name="M:QvaDev.Communication.Logger.AddLogger(Common.Logging.ILog)">
            <summary>
            Adds a logger to the application.
            </summary>
            <param name="logger">The logger instance to add.</param>
        </member>
        <member name="M:QvaDev.Communication.Logger.Trace(System.Object,System.Exception)">
            <summary>
            Log a message object with the <see cref="F:Common.Logging.LogLevel.Trace" /> level including
            the stack trace of the <see cref="T:System.Exception" /> passed
            as a parameter.
            </summary>
            <param name="message">The message object to log.</param>
            <param name="exception">The exception to log, including its stack trace.</param>
        </member>
        <member name="M:QvaDev.Communication.Logger.Trace(System.Action{Common.Logging.FormatMessageHandler},System.Exception)">
            <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Trace" /> level using a callback to obtain the message
            </summary>
            <remarks>
            Using this method avoids the cost of creating a message and evaluating message arguments
            that probably won't be logged due to loglevel settings.
            </remarks>
            <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
            <param name="exception">The exception to log, including its stack trace.</param>
        </member>
        <member name="M:QvaDev.Communication.Logger.Debug(System.Object,System.Exception)">
            <summary>
            Log a message object with the <see cref="F:Common.Logging.LogLevel.Debug" /> level including
            the stack trace of the <see cref="T:System.Exception" /> passed
            as a parameter.
            </summary>
            <param name="message">The message object to log.</param>
            <param name="exception">The exception to log, including its stack trace.</param>
        </member>
        <member name="M:QvaDev.Communication.Logger.Debug(System.Action{Common.Logging.FormatMessageHandler},System.Exception)">
            <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Debug" /> level using a callback to obtain the message
            </summary>
            <remarks>
            Using this method avoids the cost of creating a message and evaluating message arguments
            that probably won't be logged due to loglevel settings.
            </remarks>
            <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
            <param name="exception">The exception to log, including its stack trace.</param>
        </member>
        <member name="M:QvaDev.Communication.Logger.Info(System.Object,System.Exception)">
            <summary>
            Log a message object with the <see cref="F:Common.Logging.LogLevel.Info" /> level including
            the stack trace of the <see cref="T:System.Exception" /> passed
            as a parameter.
            </summary>
            <param name="message">The message object to log.</param>
            <param name="exception">The exception to log, including its stack trace.</param>
        </member>
        <member name="M:QvaDev.Communication.Logger.Info(System.Action{Common.Logging.FormatMessageHandler},System.Exception)">
            <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Info" /> level using a callback to obtain the message
            </summary>
            <remarks>
            Using this method avoids the cost of creating a message and evaluating message arguments
            that probably won't be logged due to loglevel settings.
            </remarks>
            <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
            <param name="exception">The exception to log, including its stack trace.</param>
        </member>
        <member name="M:QvaDev.Communication.Logger.Warn(System.Object,System.Exception)">
            <summary>
            Log a message object with the <see cref="F:Common.Logging.LogLevel.Warn" /> level including
            the stack trace of the <see cref="T:System.Exception" /> passed
            as a parameter.
            </summary>
            <param name="message">The message object to log.</param>
            <param name="exception">The exception to log, including its stack trace.</param>
        </member>
        <member name="M:QvaDev.Communication.Logger.Warn(System.Action{Common.Logging.FormatMessageHandler},System.Exception)">
            <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Warn" /> level using a callback to obtain the message
            </summary>
            <remarks>
            Using this method avoids the cost of creating a message and evaluating message arguments
            that probably won't be logged due to loglevel settings.
            </remarks>
            <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
            <param name="exception">The exception to log, including its stack trace.</param>
        </member>
        <member name="M:QvaDev.Communication.Logger.Error(System.Object,System.Exception)">
            <summary>
            Log a message object with the <see cref="F:Common.Logging.LogLevel.Error" /> level including
            the stack trace of the <see cref="T:System.Exception" /> passed
            as a parameter.
            </summary>
            <param name="message">The message object to log.</param>
            <param name="exception">The exception to log, including its stack trace.</param>
        </member>
        <member name="M:QvaDev.Communication.Logger.Error(System.Action{Common.Logging.FormatMessageHandler},System.Exception)">
            <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Error" /> level using a callback to obtain the message
            </summary>
            <remarks>
            Using this method avoids the cost of creating a message and evaluating message arguments
            that probably won't be logged due to loglevel settings.
            </remarks>
            <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
            <param name="exception">The exception to log, including its stack trace.</param>
        </member>
        <member name="M:QvaDev.Communication.Logger.Fatal(System.Object,System.Exception)">
            <summary>
            Log a message object with the <see cref="F:Common.Logging.LogLevel.Fatal" /> level including
            the stack trace of the <see cref="T:System.Exception" /> passed
            as a parameter.
            </summary>
            <param name="message">The message object to log.</param>
            <param name="exception">The exception to log, including its stack trace.</param>
        </member>
        <member name="M:QvaDev.Communication.Logger.Fatal(System.Action{Common.Logging.FormatMessageHandler},System.Exception)">
            <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Fatal" /> level using a callback to obtain the message
            </summary>
            <remarks>
            Using this method avoids the cost of creating a message and evaluating message arguments
            that probably won't be logged due to loglevel settings.
            </remarks>
            <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
            <param name="exception">The exception to log, including its stack trace.</param>
        </member>
        <member name="M:QvaDev.Communication.Logger.ToContentPresenter(System.Object,System.String)">
            <summary>
            Returns a class, whose <see cref="M:System.Object.ToString"/> method dumps the content of the provided class. The default implementation displays the top-level public properties
            but this can be overridden by setting the <see cref="P:QvaDev.Communication.Logger.DisplayContent"/> delegate.
            </summary>
            <param name="obj">The object whose content should be dumped.</param>
            <param name="message">A message, by which the object content will be prefixed in the log.</param>
            <returns></returns>
        </member>
        <member name="T:QvaDev.Communication.DuplexStreamConcurrentHandler">
            <summary>
            Provides continuous <see cref="T:System.IO.Stream"/> read/write on dedicated <see cref="T:System.Threading.Thread"/>s and provides
            events for handling statuses and incoming data. Suggested to use for streams, which have just occasionally available data, which has to be processed immediately.
            </summary>
        </member>
        <member name="E:QvaDev.Communication.DuplexStreamConcurrentHandler.DataReceived">
            <summary>
            Occurs when data is received on the underlying <see cref="T:System.IO.Stream"/>. The event is invoked on the reader thread.
            </summary>
            <remarks>
            An unhandled non-fatal <see cref="T:System.Exception"/> in the event handler will not let the reader thread stop.
            However, if an <see cref="T:System.OperationCanceledException"/> is caught from the handler, the <see cref="T:QvaDev.Communication.DuplexStreamConcurrentHandler"/> will be stopped.
            </remarks>
        </member>
        <member name="E:QvaDev.Communication.DuplexStreamConcurrentHandler.StreamEnded">
            <summary>
            Occurs when the underlying <see cref="T:System.IO.Stream"/> is out of data.
            The event is invoked on the reader or writer thread. The <see cref="T:QvaDev.Communication.DuplexStreamConcurrentHandler"/> will be stopped after invoking the event.
            </summary>
        </member>
        <member name="E:QvaDev.Communication.DuplexStreamConcurrentHandler.Error">
            <summary>
            Occurs when exception is thrown in the dedicated writer or reader thread of the current <see cref="T:QvaDev.Communication.DuplexStreamConcurrentHandler"/> instance.
            The event is invoked on the reader or writer thread just before disposing the <see cref="T:QvaDev.Communication.DuplexStreamConcurrentHandler"/> instance.
            </summary>
        </member>
        <member name="P:QvaDev.Communication.DuplexStreamConcurrentHandler.UnderlyingStream">
            <summary>
            Gets the underlying stream.
            </summary>
        </member>
        <member name="P:QvaDev.Communication.DuplexStreamConcurrentHandler.IsRunning">
            <summary>
            Gets whether the receiving/sending loop is running.
            </summary>
        </member>
        <member name="P:QvaDev.Communication.DuplexStreamConcurrentHandler.IsDisposed">
            <summary>
            Gets whether this <see cref="T:QvaDev.Communication.DuplexStreamConcurrentHandler"/> instance is disposed.
            </summary>
        </member>
        <member name="M:QvaDev.Communication.DuplexStreamConcurrentHandler.#ctor(System.IO.Stream,System.Boolean,System.Func{System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:QvaDev.Communication.DuplexStreamConcurrentHandler"/> class.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> to read/write. Must be able to handle parallel read and write operations.</param>
            <param name="closeStream"><c>true</c> to close the <paramref name="stream"/> on disposing this <see cref="T:QvaDev.Communication.DuplexStreamConcurrentHandler"/> instance.
            <br/>Default value: <c>true</c></param>
            <param name="isDataAvailable">If provided, it will be polled from the reader thread whether data is available. May cause a few milliseconds delay in obtaining the data
            but can help to react to <see cref="M:QvaDev.Communication.DuplexStreamConcurrentHandler.Stop"/> nicely without aborting the reader thread.</param>
            <exception cref="T:System.ArgumentNullException"><param name="stream"> is <see langword="null"/>.</param></exception>
            <remarks>
            To start listening to the received and to be sent messages call the <see cref="M:QvaDev.Communication.DuplexStreamConcurrentHandler.Start"/> method after subscribing events.
            </remarks>
        </member>
        <member name="M:QvaDev.Communication.DuplexStreamConcurrentHandler.Start">
            <summary>
            Starts listening to the received and to be sent messages. Before call this method subscribe events in order not to miss any incoming message.
            </summary>
            <exception cref="T:System.ObjectDisposedException">This <see cref="T:QvaDev.Communication.DuplexStreamConcurrentHandler"/> instance is already disposed.</exception>
        </member>
        <member name="M:QvaDev.Communication.DuplexStreamConcurrentHandler.Stop">
            <summary>
            Stops listening to the received and to be sent messages. Listening can be restarted by calling <see cref="M:QvaDev.Communication.DuplexStreamConcurrentHandler.Start"/> again.
            </summary>
            <exception cref="T:System.ObjectDisposedException">This <see cref="T:QvaDev.Communication.DuplexStreamConcurrentHandler"/> instance is already disposed.</exception>
        </member>
        <member name="M:QvaDev.Communication.DuplexStreamConcurrentHandler.SendSynchronously(System.Byte[])">
            <summary>
            Sends the <paramref name="data"/> synchronously and immediately.
            </summary>
            <param name="data">The data to send.</param>
        </member>
        <member name="M:QvaDev.Communication.DuplexStreamConcurrentHandler.EnqueueToSend(System.Byte[])">
            <summary>
            Enqueues the <paramref name="data"/> to be sent to the write queue and returns. If this <see cref="T:QvaDev.Communication.DuplexStreamConcurrentHandler"/> is started,
            then the data will be sent to the underlying stream on a separated thread.
            </summary>
            <param name="data">The data to send.</param>
        </member>
        <member name="M:QvaDev.Communication.DuplexStreamConcurrentHandler.Dispose">
            <summary>
            Disposes the <see cref="T:QvaDev.Communication.DuplexStreamConcurrentHandler"/> instance.
            </summary>
        </member>
    </members>
</doc>
