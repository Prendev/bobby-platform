<?xml version="1.0"?>
<doc>
    <assembly>
        <name>KGySoft.Json</name>
    </assembly>
    <members>
        <member name="T:KGySoft.Json.JsonArray">
            <summary>
            Represents a JSON array, interpreted as a list of <see cref="T:KGySoft.Json.JsonValue"/> elements.
            Use the <see cref="O:KGySoft.Json.JsonArray.ToString">ToString</see> or <see cref="O:KGySoft.Json.JsonArray.WriteTo">WriteTo</see> methods to convert it to JSON.
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <remarks>
            <para>Just like in JavaScript, the <see cref="O:KGySoft.Json.JsonArray.ToString">ToString</see> (and <see cref="O:KGySoft.Json.JsonArray.WriteTo">WriteTo</see>)
            methods replace <see cref="F:KGySoft.Json.JsonValue.Undefined"/> values with <see cref="F:KGySoft.Json.JsonValue.Null"/>.</para>
            <para>Obtaining an element by the <see cref="P:KGySoft.Json.JsonArray.Item(System.Int32)">indexer</see> using an invalid index returns <see cref="F:KGySoft.Json.JsonValue.Undefined"/>,
            which is also a JavaScript-compatible behavior.</para>
            <note type="tip">See the <strong>Remarks</strong> section of the <see cref="T:KGySoft.Json.JsonValue"/> type for more details and examples.</note>
            </remarks>
            <seealso cref="T:KGySoft.Json.JsonValue"/>
            <seealso cref="T:KGySoft.Json.JsonObject"/>
        </member>
        <member name="P:KGySoft.Json.JsonArray.Length">
            <summary>
            Gets the number of elements contained in the <see cref="T:KGySoft.Json.JsonArray"/>.
            </summary>
        </member>
        <member name="P:KGySoft.Json.JsonArray.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified <paramref name="index"/>.
            When the indexer is read, using an invalid index returns <see cref="F:KGySoft.Json.JsonValue.Undefined"/>, just like in JavaScript.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <returns>The element at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The indexer is set and <paramref name="index"/> is less than zero or greater or equal to <see cref="P:KGySoft.Json.JsonArray.Length"/>.</exception>
        </member>
        <member name="M:KGySoft.Json.JsonArray.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:KGySoft.Json.JsonArray"/> class.
            </summary>
        </member>
        <member name="M:KGySoft.Json.JsonArray.#ctor(System.Collections.Generic.IEnumerable{KGySoft.Json.JsonValue})">
            <summary>
            Initializes a new instance of the <see cref="T:KGySoft.Json.JsonArray"/> class from a collection of <see cref="T:KGySoft.Json.JsonValue"/> items.
            </summary>
            <param name="items">The items to be added to this <see cref="T:KGySoft.Json.JsonArray"/>.</param>
        </member>
        <member name="M:KGySoft.Json.JsonArray.Parse(System.IO.TextReader)">
            <summary>
            Reads a <see cref="T:KGySoft.Json.JsonArray"/> from a <see cref="T:System.IO.TextReader"/> that contains a JSON array.
            </summary>
            <param name="reader">A <see cref="T:System.IO.TextReader"/> that will be read for the <see cref="T:KGySoft.Json.JsonArray"/> content.</param>
            <returns>A <see cref="T:KGySoft.Json.JsonArray"/> that contains the JSON array data that was read from the specified <see cref="T:System.IO.TextReader"/>.</returns>
        </member>
        <member name="M:KGySoft.Json.JsonArray.Parse(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Reads a <see cref="T:KGySoft.Json.JsonArray"/> from a <see cref="T:System.IO.Stream"/> that contains JSON array.
            </summary>
            <param name="stream">A <see cref="T:System.IO.Stream"/> that will be read for the <see cref="T:KGySoft.Json.JsonArray"/> content.</param>
            <param name="encoding">An <see cref="T:System.Text.Encoding"/> that specifies the encoding of the JSON array data in the <paramref name="stream"/>.
            If <see langword="null"/>, then <see cref="P:System.Text.Encoding.UTF8"/> encoding will be used. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <returns>A <see cref="T:KGySoft.Json.JsonArray"/> that contains the JSON array data that was read from the specified <paramref name="stream"/>.</returns>
        </member>
        <member name="M:KGySoft.Json.JsonArray.Parse(System.String)">
            <summary>
            Reads a <see cref="T:KGySoft.Json.JsonArray"/> from a <see cref="T:System.String">string</see> that contains JSON array.
            </summary>
            <param name="s">A string that will be read for the <see cref="T:KGySoft.Json.JsonArray"/> content.</param>
            <returns>A <see cref="T:KGySoft.Json.JsonArray"/> that contains the JSON array data that was read from the specified string.</returns>
        </member>
        <member name="M:KGySoft.Json.JsonArray.TryParse(System.IO.TextReader,KGySoft.Json.JsonArray@)">
            <summary>
            Tries to read a <see cref="T:KGySoft.Json.JsonArray"/> from a <see cref="T:System.IO.TextReader"/> that contains JSON array.
            </summary>
            <param name="reader">A <see cref="T:System.IO.TextReader"/> that will be read for the <see cref="T:KGySoft.Json.JsonArray"/> content.</param>
            <param name="value">When this method returns <see langword="true"/>, the result of the parsing;
            otherwise, <see langword="null"/>. This parameter is passed uninitialized.</param>
            <returns><see langword="true"/> if the parsing was successful; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:KGySoft.Json.JsonArray.TryParse(System.IO.Stream,KGySoft.Json.JsonArray@,System.Text.Encoding)">
            <summary>
            Tries to read a <see cref="T:KGySoft.Json.JsonArray"/> from a <see cref="T:System.IO.Stream"/> that contains JSON array.
            </summary>
            <param name="stream">A <see cref="T:System.IO.Stream"/> that will be read for the <see cref="T:KGySoft.Json.JsonArray"/> content.</param>
            <param name="value">When this method returns <see langword="true"/>, the result of the parsing;
            otherwise, <see langword="null"/>. This parameter is passed uninitialized.</param>
            <param name="encoding">An <see cref="T:System.Text.Encoding"/> that specifies the encoding of the JSON array data in the <paramref name="stream"/>.
            If <see langword="null"/>, then <see cref="P:System.Text.Encoding.UTF8"/> encoding will be used. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <returns><see langword="true"/> if the parsing was successful; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:KGySoft.Json.JsonArray.TryParse(System.String,KGySoft.Json.JsonArray@)">
            <summary>
            Tries to read a <see cref="T:KGySoft.Json.JsonArray"/> from a <see cref="T:System.String">string</see> that contains JSON array.
            </summary>
            <param name="s">A string that will be read for the <see cref="T:KGySoft.Json.JsonArray"/> content.</param>
            <param name="value">When this method returns <see langword="true"/>, the result of the parsing;
            otherwise, <see langword="null"/>. This parameter is passed uninitialized.</param>
            <returns><see langword="true"/> if the parsing was successful; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:KGySoft.Json.JsonArray.Add(KGySoft.Json.JsonValue)">
            <summary>
            Adds an <paramref name="item"/> to the <see cref="T:KGySoft.Json.JsonArray"/>.
            </summary>
            <param name="item">The item to add to the <see cref="T:KGySoft.Json.JsonArray"/>.</param>
        </member>
        <member name="M:KGySoft.Json.JsonArray.Insert(System.Int32,KGySoft.Json.JsonValue)">
            <summary>
            Inserts an <paramref name="item"/> to the <see cref="T:KGySoft.Json.JsonArray"/> at the specified <paramref name="index"/>.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item"/> should be inserted.</param>
            <param name="item">The <see cref="T:KGySoft.Json.JsonValue"/> to insert into the <see cref="T:KGySoft.Json.JsonArray"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than zero or greater than <see cref="P:KGySoft.Json.JsonArray.Length"/>.</exception>
        </member>
        <member name="M:KGySoft.Json.JsonArray.Contains(KGySoft.Json.JsonValue)">
            <summary>
            Determines whether the <see cref="T:KGySoft.Json.JsonArray"/> contains the specific <paramref name="item"/>.
            </summary>
            <returns>
            <see langword="true"/> if <paramref name="item"/> is found in the <see cref="T:KGySoft.Json.JsonArray"/>; otherwise, <see langword="false"/>.
            </returns>
            <param name="item">The <see cref="T:KGySoft.Json.JsonValue"/> to locate in the <see cref="T:KGySoft.Json.JsonArray"/>.</param>
        </member>
        <member name="M:KGySoft.Json.JsonArray.IndexOf(KGySoft.Json.JsonValue)">
            <summary>
            Determines the index of a specific value in the <see cref="T:KGySoft.Json.JsonArray"/>.
            </summary>
            <param name="item">The <see cref="T:KGySoft.Json.JsonValue"/> to locate in the <see cref="T:KGySoft.Json.JsonArray"/>.</param>
            <returns>The index of <paramref name="item"/> if found in the array; otherwise, -1. </returns>
        </member>
        <member name="M:KGySoft.Json.JsonArray.Remove(KGySoft.Json.JsonValue)">
            <summary>
            Removes the first occurrence of the specific <paramref name="item"/> from the <see cref="T:KGySoft.Json.JsonArray"/>.
            </summary>
            <param name="item">The <see cref="T:KGySoft.Json.JsonValue"/> to remove from the <see cref="T:KGySoft.Json.JsonArray"/>.</param>
            <returns> <see langword="true"/> if <paramref name="item"/> was successfully removed from the <see cref="T:KGySoft.Json.JsonArray"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:KGySoft.Json.JsonArray.RemoveAt(System.Int32)">
            <summary>
            Removes the value from the <see cref="T:KGySoft.Json.JsonArray"/> at the specified <paramref name="index"/>.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index in the <see cref="T:KGySoft.Json.JsonArray"/>.</exception>
        </member>
        <member name="M:KGySoft.Json.JsonArray.Clear">
            <summary>
            Removes all items from the <see cref="T:KGySoft.Json.JsonArray"/>.
            </summary>
        </member>
        <member name="M:KGySoft.Json.JsonArray.CopyTo(KGySoft.Json.JsonValue[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:KGySoft.Json.JsonArray" /> to an <see cref="T:System.Array"/> of <see cref="T:KGySoft.Json.JsonValue"/> elements, starting at the specified <paramref name="arrayIndex"/>.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:KGySoft.Json.JsonArray"/>.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying begins.</param>
        </member>
        <member name="M:KGySoft.Json.JsonArray.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:KGySoft.Json.JsonArray"/>.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1"/> instance that can be used to iterate though the elements of the <see cref="T:KGySoft.Json.JsonArray"/>.</returns>
        </member>
        <member name="M:KGySoft.Json.JsonArray.GetHashCode">
            <summary>
            Returns a hash code for this <see cref="T:KGySoft.Json.JsonArray"/> instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:KGySoft.Json.JsonArray.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance. This method performs a deep comparison.
            Allows comparing also to <see cref="T:KGySoft.Json.JsonValue"/> instances with <see cref="F:KGySoft.Json.JsonValueType.Array"/>&#160;<see cref="P:KGySoft.Json.JsonValue.Type"/>.
            </summary>
            <param name="obj">The object to compare with this instance.</param>
            <returns><see langword="true"/> if the specified object is equal to this instance; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:KGySoft.Json.JsonArray.ToString">
            <summary>
            Returns a minimized JSON string that represents this <see cref="T:KGySoft.Json.JsonArray"/>.
            </summary>
            <returns>A minimized JSON string that represents this <see cref="T:KGySoft.Json.JsonArray"/>.</returns>
        </member>
        <member name="M:KGySoft.Json.JsonArray.ToString(System.String)">
            <summary>
            Returns a JSON string that represents this <see cref="T:KGySoft.Json.JsonArray"/>.
            </summary>
            <param name="indent">Specifies the indentation string to produce a formatted JSON.
            If <see langword="null"/> or empty, then a minimized JSON is returned. Using non-whitespace characters may produce an invalid JSON.</param>
            <returns>A JSON string that represents this <see cref="T:KGySoft.Json.JsonArray"/>.</returns>
        </member>
        <member name="M:KGySoft.Json.JsonArray.WriteTo(System.IO.TextWriter,System.String)">
            <summary>
            Writes this <see cref="T:KGySoft.Json.JsonArray"/> instance into a <see cref="T:System.IO.TextReader"/>.
            </summary>
            <param name="writer">A <see cref="T:System.IO.TextWriter"/> to write the <see cref="T:KGySoft.Json.JsonArray"/> into.</param>
            <param name="indent">Specifies the indentation string to produce a formatted JSON.
            If <see langword="null"/> or empty, then a minimized JSON is returned. Using non-whitespace characters may produce an invalid JSON. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
        </member>
        <member name="M:KGySoft.Json.JsonArray.WriteTo(System.Text.StringBuilder,System.String)">
            <summary>
            Writes this <see cref="T:KGySoft.Json.JsonArray"/> instance into a <see cref="T:KGySoft.Json.JsonArray"/>.
            </summary>
            <param name="builder">A <see cref="T:System.Text.StringBuilder"/> to write the <see cref="T:KGySoft.Json.JsonValue"/> into.</param>
            <param name="indent">Specifies the indentation string to produce a formatted JSON.
            If <see langword="null"/> or empty, then a minimized JSON is returned. Using non-whitespace characters may produce an invalid JSON. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
        </member>
        <member name="M:KGySoft.Json.JsonArray.WriteTo(System.IO.Stream,System.Text.Encoding,System.String)">
            <summary>
            Writes this <see cref="T:KGySoft.Json.JsonArray"/> instance into a <see cref="T:System.IO.Stream"/> using the specified <paramref name="encoding"/>.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> to write the <see cref="T:KGySoft.Json.JsonArray"/> into.</param>
            <param name="encoding">An <see cref="T:System.Text.Encoding"/> that specifies the encoding of the JSON data in the <paramref name="stream"/>.
            If <see langword="null"/>, then <see cref="P:System.Text.Encoding.UTF8"/> encoding will be used. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <param name="indent">Specifies the indentation string to produce a formatted JSON.
            If <see langword="null"/> or empty, then a minimized JSON is returned. Using non-whitespace characters may produce an invalid JSON. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
        </member>
        <member name="T:KGySoft.Json.JsonModule">
            <summary>
            Represents the <c>KGySoft.Json</c> module.
            </summary>
        </member>
        <member name="M:KGySoft.Json.JsonModule.Initialize">
            <summary>
            Initializes the <c>KGySoft.Json</c> module. It initializes the resource manager for string resources and registers its central management
            in the <a href="http://docs.kgysoft.net/corelibraries/?topic=html/T_KGySoft_LanguageSettings.htm" target="_blank">LanguageSettings</a> class.
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <remarks>
            <note>The module initializer is executed automatically when any member is accessed in the module for the first time. This method is public to able
            to trigger module initialization without performing any other operation. Normally you don't need to call it explicitly but it can be useful if you use
            the KGySoft JSON Libraries in an application and you want to configure resource management on starting the application via
            the <a href="http://docs.kgysoft.net/corelibraries/?topic=html/T_KGySoft_LanguageSettings.htm" target="_blank">LanguageSettings</a> class.
            In such case you can call this method before configuring language settings to make sure that the resources of
            the <c>KGySoft.Json.dll</c> are also affected by the settings.</note>
            </remarks>
        </member>
        <member name="T:KGySoft.Json.JsonObject">
            <summary>
            Represents a JSON object, interpreted as a <see cref="T:System.String">string</see>-<see cref="T:KGySoft.Json.JsonValue"/> dictionary
            and also as a list of <see cref="T:KGySoft.Json.JsonProperty"/> elements.
            Use the <see cref="O:KGySoft.Json.JsonObject.ToString">ToString</see> or <see cref="O:KGySoft.Json.JsonObject.WriteTo">WriteTo</see> methods to convert it to JSON.
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <remarks>
            <para>Just like in JavaScript, the <see cref="O:KGySoft.Json.JsonObject.ToString">ToString</see> (and <see cref="O:KGySoft.Json.JsonObject.WriteTo">WriteTo</see>)
            methods filter out properties with <see cref="F:KGySoft.Json.JsonValue.Undefined"/> values.</para>
            <para>Obtaining a nonexistent property by the <see cref="P:KGySoft.Json.JsonObject.Item(System.String)">string indexer</see> returns <see cref="F:KGySoft.Json.JsonValue.Undefined"/>,
            which is also a JavaScript-compatible behavior.</para>
            <note>Using LINQ extension methods on a <see cref="T:KGySoft.Json.JsonObject"/> may cause ambiguity due to its list/dictionary duality.
            It is recommended to perform the LINQ operations on the <see cref="P:KGySoft.Json.JsonObject.Entries"/> property so it is not needed to specify the type arguments of the LINQ extension methods.</note>
            <para>Due to performance reasons <see cref="T:KGySoft.Json.JsonObject"/> allows adding duplicate keys; however, getting the properties by
            the <see cref="P:KGySoft.Json.JsonObject.Item(System.String)">string indexer</see> retrieves always the lastly set value, just like in JavaScript.
            <note type="tip">Populating the <see cref="T:KGySoft.Json.JsonObject"/> only by the <see cref="M:KGySoft.Json.JsonObject.#ctor(System.Collections.Generic.IDictionary{System.String,KGySoft.Json.JsonValue})">dictionary constructor</see>
            or the <see cref="P:KGySoft.Json.JsonObject.Item(System.String)">string indexer</see> ensures that no duplicate property names are added.</note></para>
            <para>If the <see cref="T:KGySoft.Json.JsonObject"/> contains duplicate property names, then the <see cref="O:KGySoft.Json.JsonObject.ToString">ToString</see>
            and <see cref="O:KGySoft.Json.JsonObject.WriteTo">WriteTo</see> methods dump all of them by default.
            It's not an issue for JavaScript, which allows parsing such a JSON string where the duplicate keys will have the lastly defined value.
            But you can explicitly call the <see cref="M:KGySoft.Json.JsonObject.EnsureUniqueKeys">EnsureUniqueKeys</see> method to remove the duplicate keys (keeping the lastly defined values)
            before producing the JSON string.</para>
            <note type="tip">See the <strong>Remarks</strong> section of the <see cref="T:KGySoft.Json.JsonValue"/> type for more details and examples.</note>
            </remarks>
            <seealso cref="T:KGySoft.Json.JsonValue"/>
            <seealso cref="T:KGySoft.Json.JsonObject"/>
        </member>
        <member name="P:KGySoft.Json.JsonObject.Count">
            <summary>
            Gets the number of properties contained in the <see cref="T:KGySoft.Json.JsonObject"/>,
            including possible duplicates and properties with <see cref="F:KGySoft.Json.JsonValue.Undefined"/> value.
            </summary>
        </member>
        <member name="P:KGySoft.Json.JsonObject.Keys">
            <summary>
            Gets a collection of the property names in this <see cref="T:KGySoft.Json.JsonObject"/>.
            This property returns distinct property names even if there are duplicate keys.
            </summary>
        </member>
        <member name="P:KGySoft.Json.JsonObject.Values">
            <summary>
            Gets a collection of the property values in this <see cref="T:KGySoft.Json.JsonObject"/>.
            If there are duplicate property names, then this property may return more elements than the <see cref="P:KGySoft.Json.JsonObject.Keys"/> property.
            To avoid that call the <see cref="M:KGySoft.Json.JsonObject.EnsureUniqueKeys">EnsureUniqueKeys</see> method before getting this property.
            </summary>
        </member>
        <member name="P:KGySoft.Json.JsonObject.Entries">
            <summary>
            Gets the property entries of this <see cref="T:KGySoft.Json.JsonObject"/>, including possible duplicates.
            This property simply returns the self reference. It can be useful to be able to use LINQ extension methods
            on a <see cref="T:KGySoft.Json.JsonObject"/> without ambiguity.
            </summary>
        </member>
        <member name="P:KGySoft.Json.JsonObject.Item(System.Int32)">
            <summary>
            Gets or sets the property at the specified <paramref name="index"/>.
            </summary>
            <param name="index">The zero-based index of the property to get or set.</param>
            <returns>The element at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than zero or greater or equal to <see cref="P:KGySoft.Json.JsonObject.Count"/>.</exception>
            <exception cref="T:System.ArgumentException">The value is set and the <see cref="P:KGySoft.Json.JsonProperty.Name"/> of the <paramref name="value"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:KGySoft.Json.JsonObject.Item(System.String)">
            <summary>
            Gets or sets the value of a property by name. When the indexer is read, using a nonexistent <paramref name="propertyName"/>
            returns <see cref="F:KGySoft.Json.JsonValue.Undefined"/>, just like in JavaScript.
            </summary>
            <param name="propertyName">The name of the property to get or set.</param>
            <returns>The value of the property with the specified <paramref name="propertyName"/>, or <see cref="F:KGySoft.Json.JsonValue.Undefined"/> if no such property is found.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="propertyName"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:KGySoft.Json.JsonObject.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:KGySoft.Json.JsonObject"/> class.
            </summary>
        </member>
        <member name="M:KGySoft.Json.JsonObject.#ctor(System.Collections.Generic.IEnumerable{KGySoft.Json.JsonProperty},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:KGySoft.Json.JsonObject"/> class from a collection of <see cref="T:KGySoft.Json.JsonProperty"/> items.
            </summary>
            <param name="properties">The properties to be added to this <see cref="T:KGySoft.Json.JsonObject"/>.</param>
            <param name="allowDuplicates"><see langword="true"/> to allow duplicate multiple elements with the same <see cref="P:KGySoft.Json.JsonProperty.Name"/>;
            <see langword="false"/> to overwrite recurring names with the latest value. This parameter is optional.
            <br/>Default value: <see langword="true"/>.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="properties"/> parameter is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="properties"/> parameter contains a <see cref="T:KGySoft.Json.JsonProperty"/> with <see langword="null"/>&#160;<see cref="P:KGySoft.Json.JsonProperty.Name"/>.</exception>
        </member>
        <member name="M:KGySoft.Json.JsonObject.#ctor(System.Collections.Generic.IDictionary{System.String,KGySoft.Json.JsonValue})">
            <summary>
            Initializes a new instance of the <see cref="T:KGySoft.Json.JsonObject"/> class from a dictionary.
            </summary>
            <param name="properties">The properties to be added to this <see cref="T:KGySoft.Json.JsonObject"/>.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="properties"/> parameter is <see langword="null"/>.</exception>
        </member>
        <member name="M:KGySoft.Json.JsonObject.Parse(System.IO.TextReader)">
            <summary>
            Reads a <see cref="T:KGySoft.Json.JsonObject"/> from a <see cref="T:System.IO.TextReader"/> that contains a JSON object.
            </summary>
            <param name="reader">A <see cref="T:System.IO.TextReader"/> that will be read for the <see cref="T:KGySoft.Json.JsonObject"/> content.</param>
            <returns>A <see cref="T:KGySoft.Json.JsonObject"/> that contains the JSON object data that was read from the specified <see cref="T:System.IO.TextReader"/>.</returns>
        </member>
        <member name="M:KGySoft.Json.JsonObject.Parse(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Reads a <see cref="T:KGySoft.Json.JsonObject"/> from a <see cref="T:System.IO.Stream"/> that contains JSON object.
            </summary>
            <param name="stream">A <see cref="T:System.IO.Stream"/> that will be read for the <see cref="T:KGySoft.Json.JsonObject"/> content.</param>
            <param name="encoding">An <see cref="T:System.Text.Encoding"/> that specifies the encoding of the JSON object data in the <paramref name="stream"/>.
            If <see langword="null"/>, then <see cref="P:System.Text.Encoding.UTF8"/> encoding will be used. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <returns>A <see cref="T:KGySoft.Json.JsonObject"/> that contains the JSON object data that was read from the specified <paramref name="stream"/>.</returns>
        </member>
        <member name="M:KGySoft.Json.JsonObject.Parse(System.String)">
            <summary>
            Reads a <see cref="T:KGySoft.Json.JsonObject"/> from a <see cref="T:System.String">string</see> that contains JSON object.
            </summary>
            <param name="s">A string that will be read for the <see cref="T:KGySoft.Json.JsonObject"/> content.</param>
            <returns>A <see cref="T:KGySoft.Json.JsonObject"/> that contains the JSON object data that was read from the specified string.</returns>
        </member>
        <member name="M:KGySoft.Json.JsonObject.TryParse(System.IO.TextReader,KGySoft.Json.JsonObject@)">
            <summary>
            Tries to read a <see cref="T:KGySoft.Json.JsonObject"/> from a <see cref="T:System.IO.TextReader"/> that contains JSON object.
            </summary>
            <param name="reader">A <see cref="T:System.IO.TextReader"/> that will be read for the <see cref="T:KGySoft.Json.JsonObject"/> content.</param>
            <param name="value">When this method returns <see langword="true"/>, the result of the parsing;
            otherwise, <see langword="null"/>. This parameter is passed uninitialized.</param>
            <returns><see langword="true"/> if the parsing was successful; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:KGySoft.Json.JsonObject.TryParse(System.IO.Stream,KGySoft.Json.JsonObject@,System.Text.Encoding)">
            <summary>
            Tries to read a <see cref="T:KGySoft.Json.JsonObject"/> from a <see cref="T:System.IO.Stream"/> that contains JSON object.
            </summary>
            <param name="stream">A <see cref="T:System.IO.Stream"/> that will be read for the <see cref="T:KGySoft.Json.JsonObject"/> content.</param>
            <param name="value">When this method returns <see langword="true"/>, the result of the parsing;
            otherwise, <see langword="null"/>. This parameter is passed uninitialized.</param>
            <param name="encoding">An <see cref="T:System.Text.Encoding"/> that specifies the encoding of the JSON object data in the <paramref name="stream"/>.
            If <see langword="null"/>, then <see cref="P:System.Text.Encoding.UTF8"/> encoding will be used. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <returns><see langword="true"/> if the parsing was successful; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:KGySoft.Json.JsonObject.TryParse(System.String,KGySoft.Json.JsonObject@)">
            <summary>
            Tries to read a <see cref="T:KGySoft.Json.JsonObject"/> from a <see cref="T:System.String">string</see> that contains JSON object.
            </summary>
            <param name="s">A string that will be read for the <see cref="T:KGySoft.Json.JsonObject"/> content.</param>
            <param name="value">When this method returns <see langword="true"/>, the result of the parsing;
            otherwise, <see langword="null"/>. This parameter is passed uninitialized.</param>
            <returns><see langword="true"/> if the parsing was successful; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:KGySoft.Json.JsonObject.Add(KGySoft.Json.JsonProperty)">
            <summary>
            Adds an <paramref name="item"/> to this <see cref="T:KGySoft.Json.JsonObject"/>.
            </summary>
            <param name="item">The item to add to the <see cref="T:KGySoft.Json.JsonObject"/>.</param>
            <exception cref="T:System.ArgumentException">The <see cref="P:KGySoft.Json.JsonProperty.Name"/> of the <paramref name="item"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:KGySoft.Json.JsonObject.Add(System.String,KGySoft.Json.JsonValue)">
            <summary>
            Adds a pair of <paramref name="name"/> and <paramref name="value"/> to this <see cref="T:KGySoft.Json.JsonObject"/>.
            </summary>
            <param name="name">The name of the property to add to the <see cref="T:KGySoft.Json.JsonObject"/>.</param>
            <param name="value">The value of the property to add to the <see cref="T:KGySoft.Json.JsonObject"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:KGySoft.Json.JsonObject.Insert(System.Int32,KGySoft.Json.JsonProperty)">
            <summary>
            Inserts an <paramref name="item"/> to the <see cref="T:KGySoft.Json.JsonObject"/> at the specified <paramref name="index"/>.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item"/> should be inserted.</param>
            <param name="item">The <see cref="T:KGySoft.Json.JsonProperty"/> to insert into the <see cref="T:KGySoft.Json.JsonObject"/>.</param>
            <exception cref="T:System.ArgumentException">The <see cref="P:KGySoft.Json.JsonProperty.Name"/> of the <paramref name="item"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than zero or greater than <see cref="P:KGySoft.Json.JsonObject.Count"/>.</exception>
        </member>
        <member name="M:KGySoft.Json.JsonObject.Contains(System.String)">
            <summary>
            Determines whether the <see cref="T:KGySoft.Json.JsonObject"/> contains a property with the specified <paramref name="propertyName"/>.
            </summary>
            <returns>
            <see langword="true"/> if <paramref name="propertyName"/> is found in the <see cref="T:KGySoft.Json.JsonObject"/>; otherwise, <see langword="false"/>.
            </returns>
            <param name="propertyName">The name of the property to locate in the <see cref="T:KGySoft.Json.JsonObject"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="propertyName"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:KGySoft.Json.JsonObject.IndexOf(System.String)">
            <summary>
            Determines the index of a specific property in the <see cref="T:KGySoft.Json.JsonObject"/>.
            </summary>
            <param name="propertyName">The name of the property to locate in the <see cref="T:KGySoft.Json.JsonObject"/>.</param>
            <returns> The index of the property if found in the <see cref="T:KGySoft.Json.JsonObject"/>; otherwise, -1.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="propertyName"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:KGySoft.Json.JsonObject.TryGetValue(System.String,KGySoft.Json.JsonValue@)">
            <summary>
            Tries to get the value associated with the specified <paramref name="propertyName"/> from the <see cref="T:KGySoft.Json.JsonObject"/>.
            </summary>
            <returns><see langword="true"/> if the key was found in the <see cref="T:KGySoft.Json.JsonObject"/>; otherwise, <see langword="false"/>.</returns>
            <param name="propertyName">The name of the property to get.</param>
            <param name="value">When this method returns, the value associated with the specified name, if the <paramref name="propertyName"/> is found;
            otherwise, <see cref="F:KGySoft.Json.JsonValue.Undefined"/>. This parameter is passed uninitialized.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="propertyName"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:KGySoft.Json.JsonObject.RemoveAt(System.Int32)">
            <summary>
            Removes the property from the <see cref="T:KGySoft.Json.JsonObject"/> at the specified <paramref name="index"/>.
            </summary>
            <param name="index">The zero-based index of the property to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than zero or greater or equal to <see cref="P:KGySoft.Json.JsonObject.Count"/>.</exception>
        </member>
        <member name="M:KGySoft.Json.JsonObject.Remove(System.String)">
            <summary>
            Removes one occurrence of the properties with the specific <paramref name="propertyName"/> from the <see cref="T:KGySoft.Json.JsonObject"/>.
            </summary>
            <param name="propertyName">The name of the property to remove from the <see cref="T:KGySoft.Json.JsonObject"/>.</param>
            <returns><see langword="true"/> if a property with <paramref name="propertyName"/> was successfully removed from the <see cref="T:KGySoft.Json.JsonObject"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:KGySoft.Json.JsonObject.Clear">
            <summary>
            Removes all properties from the <see cref="T:KGySoft.Json.JsonObject"/>.
            </summary>
        </member>
        <member name="M:KGySoft.Json.JsonObject.EnsureUniqueKeys">
            <summary>
            Removes possible duplicate keys from the <see cref="T:KGySoft.Json.JsonObject"/>, keeping only the last occurrence of each key.
            </summary>
        </member>
        <member name="M:KGySoft.Json.JsonObject.CopyTo(KGySoft.Json.JsonProperty[],System.Int32)">
            <summary>
            Copies the properties of the <see cref="T:KGySoft.Json.JsonObject" /> to an <see cref="T:System.Array"/> of <see cref="T:KGySoft.Json.JsonProperty"/> elements, starting at the specified <paramref name="arrayIndex"/>.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:KGySoft.Json.JsonObject"/>.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying begins.</param>
        </member>
        <member name="M:KGySoft.Json.JsonObject.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:KGySoft.Json.JsonObject"/>.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1"/> instance that can be used to iterate though the elements of the <see cref="T:KGySoft.Json.JsonObject"/>.</returns>
        </member>
        <member name="M:KGySoft.Json.JsonObject.GetHashCode">
            <summary>
            Returns a hash code for this <see cref="T:KGySoft.Json.JsonObject"/> instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:KGySoft.Json.JsonObject.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance. This method performs a deep comparison.
            Allows comparing also to <see cref="T:KGySoft.Json.JsonValue"/> instances with <see cref="F:KGySoft.Json.JsonValueType.Object"/>&#160;<see cref="P:KGySoft.Json.JsonValue.Type"/>.
            </summary>
            <param name="obj">The object to compare with this instance.</param>
            <returns><see langword="true"/> if the specified object is equal to this instance; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:KGySoft.Json.JsonObject.ToString">
            <summary>
            Returns a minimized JSON string that represents this <see cref="T:KGySoft.Json.JsonObject"/>.
            </summary>
            <returns>A minimized JSON string that represents this <see cref="T:KGySoft.Json.JsonObject"/>.</returns>
        </member>
        <member name="M:KGySoft.Json.JsonObject.ToString(System.String)">
            <summary>
            Returns a JSON string that represents this <see cref="T:KGySoft.Json.JsonObject"/>.
            </summary>
            <param name="indent">Specifies the indentation string to produce a formatted JSON.
            If <see langword="null"/> or empty, then a minimized JSON is returned. Using non-whitespace characters may produce an invalid JSON.</param>
            <returns>A JSON string that represents this <see cref="T:KGySoft.Json.JsonObject"/>.</returns>
        </member>
        <member name="M:KGySoft.Json.JsonObject.WriteTo(System.IO.TextWriter,System.String)">
            <summary>
            Writes this <see cref="T:KGySoft.Json.JsonObject"/> instance into a <see cref="T:System.IO.TextReader"/>.
            </summary>
            <param name="writer">A <see cref="T:System.IO.TextWriter"/> to write the <see cref="T:KGySoft.Json.JsonObject"/> into.</param>
            <param name="indent">Specifies the indentation string to produce a formatted JSON.
            If <see langword="null"/> or empty, then a minimized JSON is returned. Using non-whitespace characters may produce an invalid JSON. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
        </member>
        <member name="M:KGySoft.Json.JsonObject.WriteTo(System.Text.StringBuilder,System.String)">
            <summary>
            Writes this <see cref="T:KGySoft.Json.JsonObject"/> instance into a <see cref="T:KGySoft.Json.JsonObject"/>.
            </summary>
            <param name="builder">A <see cref="T:System.Text.StringBuilder"/> to write the <see cref="T:KGySoft.Json.JsonValue"/> into.</param>
            <param name="indent">Specifies the indentation string to produce a formatted JSON.
            If <see langword="null"/> or empty, then a minimized JSON is returned. Using non-whitespace characters may produce an invalid JSON. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
        </member>
        <member name="M:KGySoft.Json.JsonObject.WriteTo(System.IO.Stream,System.Text.Encoding,System.String)">
            <summary>
            Writes this <see cref="T:KGySoft.Json.JsonObject"/> instance into a <see cref="T:System.IO.Stream"/> using the specified <paramref name="encoding"/>.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> to write the <see cref="T:KGySoft.Json.JsonObject"/> into.</param>
            <param name="encoding">An <see cref="T:System.Text.Encoding"/> that specifies the encoding of the JSON data in the <paramref name="stream"/>.
            If <see langword="null"/>, then <see cref="P:System.Text.Encoding.UTF8"/> encoding will be used. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <param name="indent">Specifies the indentation string to produce a formatted JSON.
            If <see langword="null"/> or empty, then a minimized JSON is returned. Using non-whitespace characters may produce an invalid JSON. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
        </member>
        <member name="T:KGySoft.Json.JsonProperty">
            <summary>
            Represents a property in a <see cref="T:KGySoft.Json.JsonObject"/>.
            </summary>
            <seealso cref="T:KGySoft.Json.JsonObject"/>
        </member>
        <member name="P:KGySoft.Json.JsonProperty.Name">
            <summary>
            Gets the name of the property. It can be <see langword="null"/> only for a default <see cref="T:KGySoft.Json.JsonProperty"/>
            instance that was created without the public <see cref="M:KGySoft.Json.JsonProperty.#ctor(System.String,KGySoft.Json.JsonValue)">constructor</see>.
            </summary>
        </member>
        <member name="P:KGySoft.Json.JsonProperty.Value">
            <summary>
            Gets the value of the property.
            </summary>
        </member>
        <member name="M:KGySoft.Json.JsonProperty.op_Equality(KGySoft.Json.JsonProperty,KGySoft.Json.JsonProperty)">
            <summary>
            Determines whether two specified <see cref="T:KGySoft.Json.JsonProperty"/> instances have the same value.
            </summary>
            <param name="left">The left argument of the equality check.</param>
            <param name="right">The right argument of the equality check.</param>
            <returns>The result of the equality check.</returns>
        </member>
        <member name="M:KGySoft.Json.JsonProperty.op_Inequality(KGySoft.Json.JsonProperty,KGySoft.Json.JsonProperty)">
            <summary>
            Determines whether two specified <see cref="T:KGySoft.Json.JsonProperty"/> instances have different values.
            </summary>
            <param name="left">The left argument of the inequality check.</param>
            <param name="right">The right argument of the inequality check.</param>
            <returns>The result of the inequality check.</returns>
        </member>
        <member name="M:KGySoft.Json.JsonProperty.op_Implicit(System.ValueTuple{System.String,KGySoft.Json.JsonValue})~KGySoft.Json.JsonProperty">
            <summary>
            Performs an implicit conversion from <see cref="T:System.ValueTuple`2"/> to <see cref="T:KGySoft.Json.JsonProperty"/>.
            </summary>
            <param name="property">The tuple to be converted to a <see cref="T:KGySoft.Json.JsonProperty"/>.</param>
            <returns>
            A <see cref="T:KGySoft.Json.JsonProperty"/> instance that represents the original value.
            </returns>
        </member>
        <member name="M:KGySoft.Json.JsonProperty.op_Implicit(System.Collections.Generic.KeyValuePair{System.String,KGySoft.Json.JsonValue})~KGySoft.Json.JsonProperty">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Collections.Generic.KeyValuePair`2"/> to <see cref="T:KGySoft.Json.JsonProperty"/>.
            </summary>
            <param name="property">The key-value pair to be converted to a <see cref="T:KGySoft.Json.JsonProperty"/>.</param>
            <returns>
            A <see cref="T:KGySoft.Json.JsonProperty"/> instance that represents the original value.
            </returns>
        </member>
        <member name="M:KGySoft.Json.JsonProperty.#ctor(System.String,KGySoft.Json.JsonValue)">
            <summary>
            Initializes a new instance of the <see cref="T:KGySoft.Json.JsonProperty"/> struct.
            </summary>
            <param name="name">The name of the property.</param>
            <param name="value">The value of the property.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:KGySoft.Json.JsonProperty.Equals(KGySoft.Json.JsonProperty)">
            <summary>
            Indicates whether the current <see cref="T:KGySoft.Json.JsonProperty"/> instance is equal to another one specified in the <paramref name="other"/> parameter.
            </summary>
            <param name="other">A <see cref="T:KGySoft.Json.JsonProperty"/> instance to compare with this instance.</param>
            <returns><see langword="true"/> if the current object is equal to the <paramref name="other"/> parameter; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:KGySoft.Json.JsonProperty.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object">object</see> is equal to this instance.
            </summary>
            <param name="obj">An <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns><see langword="true"/> if the specified object is equal to this instance; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:KGySoft.Json.JsonProperty.GetHashCode">
            <summary>
            Returns a hash code for this <see cref="T:KGySoft.Json.JsonProperty"/> instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:KGySoft.Json.JsonProperty.ToString">
            <summary>
            Gets the string representation of this <see cref="T:KGySoft.Json.JsonProperty"/>.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:KGySoft.Json.JsonValue">
             <summary>
             Represents a value that can be converted to JSON. It can hold JavaScript primitive types
             such as <see cref="F:KGySoft.Json.JsonValueType.Null"/>, <see cref="F:KGySoft.Json.JsonValueType.Boolean"/>, <see cref="F:KGySoft.Json.JsonValueType.Number"/> and <see cref="F:KGySoft.Json.JsonValueType.String"/>,
             and it can be assigned also from <see cref="T:KGySoft.Json.JsonArray"/> and <see cref="T:KGySoft.Json.JsonObject"/> types.
             Its default value represents the JavaScript <see cref="F:KGySoft.Json.JsonValueType.Undefined"/> value.
             Use the <see cref="O:KGySoft.Json.JsonValue.ToString">ToString</see> or <see cref="O:KGySoft.Json.JsonValue.WriteTo">WriteTo</see> methods to convert it to JSON.
             <br/>See the <strong>Remarks</strong> section for details and examples.
             </summary>
             <remarks>
             <para>A <see cref="T:KGySoft.Json.JsonValue"/> instance represents any JavaScript type that can appear in JSON (see also the <see cref="P:KGySoft.Json.JsonValue.Type"/> property
             and the <see cref="T:KGySoft.Json.JsonValueType"/> enumeration), including the <see cref="F:KGySoft.Json.JsonValue.Undefined"/> value, which is not valid in a JSON document.</para>
             <para>The default value of a <see cref="T:KGySoft.Json.JsonValue"/> instance equals to the <see cref="F:KGySoft.Json.JsonValue.Undefined"/> field, which represents the <c>undefined</c> type in JavaScript.
             Just like in JavaScript, you can add <see cref="F:KGySoft.Json.JsonValue.Undefined"/> values to arrays and objects but when you "stringify" them
             by the <see cref="O:KGySoft.Json.JsonValue.ToString">ToString</see> or <see cref="O:KGySoft.Json.JsonValue.WriteTo">WriteTo</see> methods, they will be
             either replaced with <see cref="F:KGySoft.Json.JsonValue.Null"/> (in a <see cref="T:KGySoft.Json.JsonArray"/>) or simply ignored (in a <see cref="T:KGySoft.Json.JsonObject"/>).
             <code lang="C#"><![CDATA[
             JsonValue value = default; // = JsonValue.Undefined; = new JsonValue();
             
             Console.WriteLine(value); // undefined
             Console.WriteLine(value.Type); // Undefined
             Console.WriteLine(value.IsUndefined); // True
             Console.WriteLine(value == JsonValue.Undefined); // True
             ]]></code>
             <note><see cref="O:KGySoft.Json.JsonValue.ToString">ToString</see> and <see cref="O:KGySoft.Json.JsonValue.WriteTo">WriteTo</see> behave differently
             for a standalone <see cref="F:KGySoft.Json.JsonValue.Undefined"/> value. Whereas <see cref="O:KGySoft.Json.JsonValue.ToString">ToString</see> produces the string <c>undefined</c>,
             <see cref="O:KGySoft.Json.JsonValue.WriteTo">WriteTo</see> will not write anything into the output.</note></para>
             <para>The <see cref="F:KGySoft.Json.JsonValue.Null"/> field represents the <c>null</c> type in JavaScript. Conversion from a .NET <see langword="null"/> is also possible
             but only with an explicit type cast.
             <code lang="C#"><![CDATA[
             JsonValue value = JsonValue.Null; // = (string)null; = (bool?)null; = (JsonObject)null; etc.
             
             Console.WriteLine(value); // null
             Console.WriteLine(value.Type); // Null
             Console.WriteLine(value.IsNull); // True
             Console.WriteLine(value == JsonValue.Null); // True
             ]]></code></para>
             <para>A <see cref="T:KGySoft.Json.JsonValue"/> can also store a <see cref="F:KGySoft.Json.JsonValueType.Boolean"/> value, which can be either the value of the <see cref="F:KGySoft.Json.JsonValue.True"/> or <see cref="F:KGySoft.Json.JsonValue.False"/> fields.
             An implicit conversion from the .NET <see cref="T:System.Boolean"/> type also exists.
             <code lang="C#"><![CDATA[
             JsonValue value = true; // = JsonValue.True; = new JsonValue(true);
             
             Console.WriteLine(value); // true
             Console.WriteLine(value.Type); // Boolean
             Console.WriteLine(value.AsBoolean); // True
             Console.WriteLine(value == JsonValue.True); // True
             Console.WriteLine(value == true); // True
             ]]></code></para>
             <para>A <see cref="T:KGySoft.Json.JsonValue"/> can also store a <see cref="F:KGySoft.Json.JsonValueType.Number"/>. Though a JavaScript number is always
             a <a href="https://en.wikipedia.org/wiki/Double-precision_floating-point_format" target="_blank">double-precision 64-bit binary format IEEE 754</a> value,
             which is the same as the .NET <see cref="T:System.Double"/> type, a <see cref="T:KGySoft.Json.JsonValue"/> can hold any number with any precision.
             You can use the <see cref="P:KGySoft.Json.JsonValue.AsNumber"/> property to get the same value as JavaScript would also get and the <see cref="P:KGySoft.Json.JsonValue.AsLiteral"/> property, which returns
             the actual value as it will be dumped when converting the value to JSON. An implicit conversion from the .NET <see cref="T:System.Double"/> type also exists.
             <note type="warning">It is not recommended to write wide numeric .NET types (<see cref="T:System.Int64"/>, <see cref="T:System.Decimal"/>, etc.) as a
             JSON <see cref="F:KGySoft.Json.JsonValueType.Number"/> because when processed by JavaScript, the precision of these values might be lost without any warning.
             If you are sure that you want to store such values as numbers, use the <see cref="M:KGySoft.Json.JsonValue.CreateNumberUnchecked(System.String)"/> method or
             the <see cref="O:KGySoft.Json.JsonValueExtensions.ToJson">JsonValueExtensions.ToJson</see> overloads with <c>asString: false</c> parameter.</note>
             <code lang="C#"><![CDATA[
             JsonValue value = 1.25; // = new JsonValue(1.25);
             
             Console.WriteLine(value); // 1.25
             Console.WriteLine(value.Type); // Number
             Console.WriteLine(value.AsNumber); // 1.25
            
             // Using a long value beyond double precision
             long longValue = (1L << 53) + 1;
             value = longValue; // this produces a compile-time warning about possible loss of precision
             Console.WriteLine(value); // 9007199254740993
             Console.WriteLine($"{value.AsNumber:R}"); // 9007199254740992 - this is what JavaScript will see
             Console.WriteLine(value.AsLiteral); // 9007199254740993 - this is the actual stored value
            
             value = longValue.ToJson(asString: false); // this is how the compile-time warning can be avoided
             Console.WriteLine(value); // 9007199254740993
            
             value = longValue.ToJson(); // this is the recommended solution to prevent losing precision
             Console.WriteLine(value); // "9007199254740993" - note that ToJson produces strings for wide numeric types by default
             ]]></code></para>
             <para>A <see cref="T:KGySoft.Json.JsonValue"/> can also store a <see cref="F:KGySoft.Json.JsonValueType.String"/>. An implicit conversion from the .NET <see cref="T:System.String"/> type also exists.
             <code lang="C#"><![CDATA[
             JsonValue value = "some \"value\""; // = new JsonValue("some \"value\"");
             
             Console.WriteLine(value); // "some \"value\""
             Console.WriteLine(value.Type); // String
             Console.WriteLine(value.AsString); // some "value"
             ]]></code></para>
             <para>A <see cref="T:KGySoft.Json.JsonValue"/> can also store an <see cref="F:KGySoft.Json.JsonValueType.Array"/>, which is represented by the <see cref="T:KGySoft.Json.JsonArray"/> type.
             An implicit conversion from <see cref="T:KGySoft.Json.JsonArray"/> also exists. If a <see cref="T:KGySoft.Json.JsonValue"/> represents an array, then you can use the
             <see cref="P:KGySoft.Json.JsonValue.Item(System.Int32)">int indexer</see> to access the array elements. Just like in JavaScript, accessing an invalid index returns <see cref="F:KGySoft.Json.JsonValue.Undefined"/>.
             To change array values use the <see cref="T:KGySoft.Json.JsonArray"/> instance returned by the <see cref="P:KGySoft.Json.JsonValue.AsArray"/> property.
             <code lang="C#"><![CDATA[
             JsonValue value = new JsonArray { true, 1, 2.35, JsonValue.Null, "value" };
             // which is the shorthand of: new JsonValue(new JsonArray { JsonValue.True, new JsonValue(1), new JsonValue(2.35), JsonValue.Null, new JsonValue("value") });
             
             Console.WriteLine(value); // [true,1,2.35,null,"value"]
             Console.WriteLine(value.Type); // Array
             Console.WriteLine(value[2]); // 2.35
             Console.WriteLine(value[42]); // undefined
             ]]></code></para>
             <para>A <see cref="T:KGySoft.Json.JsonValue"/> can also store an <see cref="F:KGySoft.Json.JsonValueType.Object"/>, which is represented by the <see cref="T:KGySoft.Json.JsonObject"/> type.
             An implicit conversion from <see cref="T:KGySoft.Json.JsonObject"/> also exists. If a <see cref="T:KGySoft.Json.JsonValue"/> represents an object, then you can use the
             <see cref="P:KGySoft.Json.JsonValue.Item(System.String)">string indexer</see> to access the properties by name. Just like in JavaScript, accessing a nonexistent property returns <see cref="F:KGySoft.Json.JsonValue.Undefined"/>.
             To change object properties use the <see cref="T:KGySoft.Json.JsonObject"/> instance returned by the <see cref="P:KGySoft.Json.JsonValue.AsObject"/> property.
             <code lang="C#"><![CDATA[
             JsonValue value = new JsonObject
             {
                 ("Bool", true), // which is the shorthand of new JsonProperty("Bool", new JsonValue(true))
                 // { "Bool", true }, // alternative syntax on platforms where ValueTuple types are not available
                 ("Number", 1.23),
                 ("String", "value"),
                 ("Object", new JsonObject
                 {
                    ("Null", JsonValue.Null),
                    ("Array", new JsonArray { 42 }),
                 })
             };
            
             Console.WriteLine(value); // {"Bool":true,"Number":1.23,"String":"value","Object":{"Null":null,"Array":[42]}}
             Console.WriteLine(value.Type); // Object
             Console.WriteLine(value["Object"]); // {"Null":null,"Array":[42]}
             Console.WriteLine(value["Object"]["Array"]); // [42]
             Console.WriteLine(value["Object"]["Array"][0]); // 42
             Console.WriteLine(value["UnknownProperty"]); // undefined
             ]]></code></para>
             <note type="tip">
             <see cref="T:KGySoft.Json.JsonValue"/> members provide conversions to and from types that have their counterpart in JavaScript.
             If you want to treat the JSON <see cref="F:KGySoft.Json.JsonValueType.Number"/> and <see cref="F:KGySoft.Json.JsonValueType.String"/> types as specific .NET types
             such as <see cref="T:System.Int64"/>, <see cref="T:System.Decimal"/>, <see cref="T:System.Enum"/>, <see cref="T:System.DateTime"/>, <see cref="T:System.Guid"/> and more,
             then use the extension methods of the <see cref="T:KGySoft.Json.JsonValueExtensions"/> class. It also has a bunch of <see cref="O:KGySoft.Json.JsonValueExtensions.ToJson">ToJson</see>
             methods that can convert the common .NET types to <see cref="T:KGySoft.Json.JsonValue"/>.
             </note>
             </remarks>
             <example>
             <para>The following examples demonstrate how to serialize and deserialize objects to and from <see cref="T:KGySoft.Json.JsonValue"/>.
             <note><see cref="N:KGySoft.Json">KGySoft.Json</see> has no built-in automated ways to serialize and deserialize C# types.
             But in practice even when using other serializers you either need to decorate the C# classes with attributes or you have to
             define converters where you specify the exact mapping because .NET classes and JSON objects usually cannot be
             just automatically mapped to each other if they both follow the usual naming conventions. The following examples show
             how to manually do the serialization and deserialization, which actually can be more effective than letting a serializer
             resolve attributes or expressions by reflection.</note>
             </para>
             <para>Consider the following JSON document:
             <code lang="JSON"><![CDATA[
             {
               "id": "a4a5b192-fac9-4d7c-a826-1653761fe200",
               "firstName": "John",
               "lastName": "Smith",
               "birth": "19780611",
               "active": true,
               "lastLogin": 1579955315,
               "status": "fully-trusted",
               "balances": [
                 {
                   "currency": "USD",
                   "balance": "23462.4527"
                 },
                 {
                   "currency": "BTC",
                   "balance": "0.0567521461"
                 }
               ]
             }]]></code></para>
             <para>And the corresponding C# model:
             <code lang="C#"><![CDATA[
             public class Account
             {
                 public Guid Id { get; set; }
                 public string FirstName { get; set; }
                 public string? MiddleName { get; set; } // optional
                 public string LastName { get; set; }
                 public DateTime DateOfBirth { get; set; } // yyyyMMdd
                 public bool IsActive { get; set; }
                 public DateTime? LastLogin { get; set; } // Stored as Unix seconds
                 public AccountStatus Status { get; set; } // Stored as lowercase values with hyphens
                 public IList<AccountBalance> Balances { get; } = new Collection<AccountBalance>();
             }
            
             public enum AccountStatus { Basic, Confirmed, FullyTrusted, Disabled } // It follows the .NET naming conventions
             
             public class AccountBalance
             {
                public string Currency { get; set; }
                public decimal Balance { get; set; }
             }
             ]]></code></para>
             <para><strong>Serialization:</strong> When serializing, we just build a <see cref="T:KGySoft.Json.JsonValue"/>. The actual serialization is done by the <see cref="O:KGySoft.Json.JsonValue.ToString">ToString</see>
             or <see cref="O:KGySoft.Json.JsonValue.WriteTo">WriteTo</see> methods.
             <code lang="C#"><![CDATA[
             // in this example conversion is separated from the model as an extension method
             public static JsonValue ToJson(this Account acc)
             {
                 var result = new JsonObject
                 {
                     ("id", acc.Id.ToJson()), // using ToJson(Guid)
                     ("firstName", acc.FirstName), // implicit conversion from string
                     ("lastName", acc.LastName), // implicit conversion from string
                     ("birth", acc.DateOfBirth.ToJson("yyyyMMdd")), // ToJson(DateTime, string) with exact format
                     ("active", acc.IsActive), // implicit conversion from bool
                     ("lastLogin", acc.LastLogin.ToJson(JsonDateTimeFormat.UnixSeconds, asString: false)), // Unix seconds as number
                     ("status", acc.Status.ToJson(JsonEnumFormat.LowerCaseWithHyphens)) // using ToJson<TEnum>()
                 };
            
                 // adding the optional middle name (it wasn't defined in the example JSON above)
                 if (acc.MiddleName != null)
                     result.Add("middleName", acc.MiddleName); // or: result["middleName"] = acc.MiddleName;
            
                 // for collections and nested objects we can delegate the job to other extension methods
                 if (acc.Balances.Count > 0)
                     result["balances"] = new JsonArray(acc.Balances.Select(b => b.ToJson()));
            
                 return result; // now it will be converted to JsonValue but we can also change the return type to JsonObject
             }
            
             public static JsonValue ToJson(this AccountBalance balance) => new JsonObject
             {
                 ("currency", balance.Currency), // implicit conversion from string
                 ("balance", balance.Balance.ToJson(asString: true)), // the default of ToJson(decimal) would be a string anyway
             };
             ]]></code></para>
             <para><strong>Deserialization:</strong> Once you have a parsed <see cref="T:KGySoft.Json.JsonValue"/> (see the <see cref="O:KGySoft.Json.JsonValue.Parse">Parse</see>
             and <see cref="O:KGySoft.Json.JsonValue.TryParse">TryParse</see> methods), retrieving the values becomes very straightforward:
             <code lang="C#"><![CDATA[
             // as above, this is now an extension method but could be even a constructor with JsonValue or JsonObject parameter
             public static Account ToAccount(this JsonValue json)
             {
                 // Here we mainly use the As... methods that return null if the conversion fails
                 // but you can also use the TryGet... or Get...OrDefault methods.
                 var result = new Account
                 {
                     Id = json["id"].AsGuid() ?? throw new ArgumentException("'id' is missing or invalid"),
                     FirstName = json["firstName"].AsString ?? throw new ArgumentException("'firstName' is missing or invalid"),
                     MiddleName = json["middleName"].AsString, // simply returns null if missing (json["middleName"].IsUndefined)
                     LastName = json["lastName"].AsString ?? throw new ArgumentException("'lastName' is missing or invalid"),
                     DateOfBirth = json["birth"].AsDateTime("yyyyMMdd") ?? throw new ArgumentException("'birth' is missing or invalid"),
                     IsActive = json["active"].GetBooleanOrDefault(false), // it will be false if missing (could be AsBoolean ?? false)
                     LastLogin = json["lastLogin"].AsDateTime(JsonDateTimeFormat.UnixSeconds), // will be null if missing or invalid
                     Status = json["status"].GetEnumOrDefault(true, AccountStatus.Disabled) // true to ignore case and hyphens
                 };
            
                 var balances = json["balances"];
             
                 // a missing 'balances' is accepted
                 if (balances.IsUndefined) // or: balances == JsonValue.Undefined
                     return result;
            
                 // but if exists, must be an array
                 if (balances.Type != JsonValueType.Array) // or: balances.AsArray is not JsonArray
                     throw new ArgumentException("'balances' is invalid");
            
                 foreach (JsonValue balance in balances.AsArray)
                     result.Balances.Add(balance.ToBalance());
            
                 return result;
             }
            
             public static AccountBalance ToBalance(this JsonValue json) => new AccountBalance
             {
                 Currency = json["currency"].AsString ?? throw new ArgumentException("'currency' is missing or invalid"),
                 Balance = json["balance"].AsDecimal() ?? 0m // or AsDecimal(JsonValueType.String) to disallow JSON numbers
             };
             ]]></code></para>
             </example>
             <seealso cref="T:KGySoft.Json.JsonArray"/>
             <seealso cref="T:KGySoft.Json.JsonObject"/>
             <seealso cref="T:KGySoft.Json.JsonValueExtensions"/>
        </member>
        <member name="F:KGySoft.Json.JsonValue.Undefined">
            <summary>
            Represents the JavaScript <c>undefined</c> value. The <see cref="P:KGySoft.Json.JsonValue.Type"/> of the value is also <see cref="F:KGySoft.Json.JsonValueType.Undefined"/>.
            This is the value of a default <see cref="T:KGySoft.Json.JsonValue"/> instance.
            </summary>
        </member>
        <member name="F:KGySoft.Json.JsonValue.Null">
            <summary>
            Represents the JavaScript <c>null</c> value. The <see cref="P:KGySoft.Json.JsonValue.Type"/> of the value is also <see cref="F:KGySoft.Json.JsonValueType.Null"/>.
            </summary>
        </member>
        <member name="F:KGySoft.Json.JsonValue.True">
            <summary>
            Represents the JavaScript <c>true</c> value. The <see cref="P:KGySoft.Json.JsonValue.Type"/> of the value is <see cref="F:KGySoft.Json.JsonValueType.Boolean"/>.
            </summary>
        </member>
        <member name="F:KGySoft.Json.JsonValue.False">
            <summary>
            Represents the JavaScript <c>false</c> value. The <see cref="P:KGySoft.Json.JsonValue.Type"/> of the value is <see cref="F:KGySoft.Json.JsonValueType.Boolean"/>.
            </summary>
        </member>
        <member name="F:KGySoft.Json.JsonValue.value">
            <summary>
            The stored value. Can be <see langword="null"/> (undefined),
            <see cref="T:System.String"/> (all primitive types except undefined),
            <see cref="T:KGySoft.Json.JsonArray"/> and <see cref="T:KGySoft.Json.JsonObject"/>.
            </summary>
        </member>
        <member name="P:KGySoft.Json.JsonValue.Type">
            <summary>
            Gets the JavaScript type of this <see cref="T:KGySoft.Json.JsonValue"/>.
            </summary>
        </member>
        <member name="P:KGySoft.Json.JsonValue.IsUndefined">
            <summary>
            Gets whether this <see cref="T:KGySoft.Json.JsonValue"/> instance has <see cref="F:KGySoft.Json.JsonValueType.Undefined"/>&#160;<see cref="P:KGySoft.Json.JsonValue.Type"/> and equals to the <see cref="F:KGySoft.Json.JsonValue.Undefined"/> instance.
            </summary>
        </member>
        <member name="P:KGySoft.Json.JsonValue.IsNull">
            <summary>
            Gets whether this <see cref="T:KGySoft.Json.JsonValue"/> instance has <see cref="F:KGySoft.Json.JsonValueType.Null"/>&#160;<see cref="P:KGySoft.Json.JsonValue.Type"/> and equals to the <see cref="F:KGySoft.Json.JsonValue.Null"/> instance.
            </summary>
        </member>
        <member name="P:KGySoft.Json.JsonValue.AsBoolean">
            <summary>
            Gets the <see cref="T:System.Boolean">bool</see> value of this <see cref="T:KGySoft.Json.JsonValue"/> instance if it has <see cref="F:KGySoft.Json.JsonValueType.Boolean"/>&#160;<see cref="P:KGySoft.Json.JsonValue.Type"/>;
            or <see langword="null"/>, if its <see cref="P:KGySoft.Json.JsonValue.Type"/> is not <see cref="F:KGySoft.Json.JsonValueType.Boolean"/>.
            To interpret other types as boolean you can use the <see cref="M:KGySoft.Json.JsonValueExtensions.AsBoolean(KGySoft.Json.JsonValue@,KGySoft.Json.JsonValueType)"/> extension method instead.
            </summary>
        </member>
        <member name="P:KGySoft.Json.JsonValue.AsString">
            <summary>
            Gets the <see cref="T:System.String">string</see> value of this <see cref="T:KGySoft.Json.JsonValue"/> instance if it has <see cref="F:KGySoft.Json.JsonValueType.String"/>&#160;<see cref="P:KGySoft.Json.JsonValue.Type"/>;
            or <see langword="null"/>, if its <see cref="P:KGySoft.Json.JsonValue.Type"/> is not <see cref="F:KGySoft.Json.JsonValueType.String"/>.
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <remarks>
            <para>This property returns <see langword="null"/> if this <see cref="T:KGySoft.Json.JsonValue"/> represents a non-string primitive JavaScript literal.
            For non-string primitive types you can use the <see cref="P:KGySoft.Json.JsonValue.AsLiteral"/> property to get their literal value.</para>
            <para>This property gets the string value without quotes and escapes. To return it as a parseable JSON string, use the <see cref="O:KGySoft.Json.JsonValue.ToString">ToString</see> method overloads instead.</para>
            </remarks>
        </member>
        <member name="P:KGySoft.Json.JsonValue.AsNumber">
            <summary>
            Gets the numeric value of this <see cref="T:KGySoft.Json.JsonValue"/> instance if it has <see cref="F:KGySoft.Json.JsonValueType.Number"/>&#160;<see cref="P:KGySoft.Json.JsonValue.Type"/>;
            or <see langword="null"/>, if its <see cref="P:KGySoft.Json.JsonValue.Type"/> is not <see cref="F:KGySoft.Json.JsonValueType.Number"/>.
            The returned value is a <see cref="T:System.Double">double</see> to be conform with JSON <see cref="F:KGySoft.Json.JsonValueType.Number"/> type.
            To retrieve the actual stored raw value use the <see cref="P:KGySoft.Json.JsonValue.AsLiteral"/> property.
            To retrieve the value as .NET numeric types use the methods in the <see cref="T:KGySoft.Json.JsonValueExtensions"/> class.
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <remarks>
            <note type="warning">The JavaScript <see cref="F:KGySoft.Json.JsonValueType.Number"/> type is
            always a <a href="https://en.wikipedia.org/wiki/Double-precision_floating-point_format" target="_blank">double-precision 64-bit binary format IEEE 754</a> value,
            which is the equivalent of the <see cref="T:System.Double">double</see> type in C#. It is not recommended to store C# <see cref="T:System.Int64">long</see> and <see cref="T:System.Decimal">decimal</see>
            types as JavaScript numbers because their precision might be lost silently if the JSON is processed by JavaScript. If you still want to do so use
            the <see cref="O:KGySoft.Json.JsonValueExtensions.ToJson">ToJson</see> extension methods or the <see cref="M:KGySoft.Json.JsonValue.CreateNumberUnchecked(System.String)">CreateNumberUnchecked</see> method.</note>
            <para>When getting this property the stored underlying string is converted to a <see cref="T:System.Double">double</see>
            so it has the same behavior as a JavaScript <see cref="F:KGySoft.Json.JsonValueType.Number"/>.</para>
            <para>If this <see cref="T:KGySoft.Json.JsonValue"/> was created from a C# <see cref="T:System.Int64">long</see> or <see cref="T:System.Decimal">decimal</see> value (see
            the <see cref="O:KGySoft.Json.JsonValueExtensions.ToJson">ToJson</see> overloads), then this property may return a different value due to loss of precision.
            This is how JavaScript also behaves. To get the value as specific .NET numeric types use the extension methods in the <see cref="T:KGySoft.Json.JsonValueExtensions"/> class.</para>
            <para>To retrieve the stored actual raw value without any conversion you can use the <see cref="P:KGySoft.Json.JsonValue.AsLiteral"/> property.</para>
            <para>This property may return <see langword="null"/> if this instance was created by the <see cref="M:KGySoft.Json.JsonValue.CreateNumberUnchecked(System.String)">CreateNumberUnchecked</see>
            method and contains an invalid number.</para>
            <para>This property can also return <see langword="null"/> when a <c>NaN</c> or <c>Infinity</c>/<c>-Infinity</c> was parsed, which are not valid in JSON.
            But even such values can be retrieved as a <see cref="T:System.Double">double</see> by the <see cref="M:KGySoft.Json.JsonValueExtensions.AsDouble(KGySoft.Json.JsonValue@,KGySoft.Json.JsonValueType)">AsDouble</see> extension method.</para>
            </remarks>
        </member>
        <member name="P:KGySoft.Json.JsonValue.AsLiteral">
            <summary>
            If this <see cref="T:KGySoft.Json.JsonValue"/> represents a primitive JavaScript type (<see cref="F:KGySoft.Json.JsonValueType.Undefined"/>, <see cref="F:KGySoft.Json.JsonValueType.Null"/>, <see cref="F:KGySoft.Json.JsonValueType.Boolean"/>,
            <see cref="F:KGySoft.Json.JsonValueType.Number"/>, <see cref="F:KGySoft.Json.JsonValueType.String"/>) or its <see cref="P:KGySoft.Json.JsonValue.Type"/> is <see cref="F:KGySoft.Json.JsonValueType.UnknownLiteral"/>, then gets the underlying string literal;
            otherwise, gets <see langword="null"/>.
            </summary>
        </member>
        <member name="P:KGySoft.Json.JsonValue.AsArray">
            <summary>
            Gets this <see cref="T:KGySoft.Json.JsonValue"/> instance as a <see cref="T:KGySoft.Json.JsonArray"/> if it has <see cref="F:KGySoft.Json.JsonValueType.Array"/>&#160;<see cref="P:KGySoft.Json.JsonValue.Type"/>;
            or <see langword="null"/>, if its <see cref="P:KGySoft.Json.JsonValue.Type"/> is not <see cref="F:KGySoft.Json.JsonValueType.Array"/>.
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <remarks>
            <para>To get array elements you can also read the numeric <see cref="P:KGySoft.Json.JsonValue.Item(System.Int32)">indexer</see> without obtaining the value as a <see cref="T:KGySoft.Json.JsonArray"/>.</para>
            <para>To set/add/remove array elements in a <see cref="T:KGySoft.Json.JsonValue"/> instance you need to use this property or the explicit cast to <see cref="T:KGySoft.Json.JsonArray"/>.</para>
            </remarks>
        </member>
        <member name="P:KGySoft.Json.JsonValue.AsObject">
            <summary>
            Gets this <see cref="T:KGySoft.Json.JsonValue"/> instance as a <see cref="T:KGySoft.Json.JsonObject"/> if it has <see cref="F:KGySoft.Json.JsonValueType.Object"/>&#160;<see cref="P:KGySoft.Json.JsonValue.Type"/>;
            or <see langword="null"/>, if its <see cref="P:KGySoft.Json.JsonValue.Type"/> is not <see cref="F:KGySoft.Json.JsonValueType.Object"/>.
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <remarks>
            <para>To get property values you can also read the string <see cref="P:KGySoft.Json.JsonValue.Item(System.String)">indexer</see> without obtaining the value as a <see cref="T:KGySoft.Json.JsonObject"/>.</para>
            <para>To set/add/remove object properties in a <see cref="T:KGySoft.Json.JsonValue"/> instance you need to use this property or the explicit cast to <see cref="T:KGySoft.Json.JsonObject"/>.</para>
            </remarks>
        </member>
        <member name="P:KGySoft.Json.JsonValue.AsStringInternal">
            <summary>
            Similar to <see cref="P:KGySoft.Json.JsonValue.AsLiteral"/> but returns <see langword="null"/> for <see cref="F:KGySoft.Json.JsonValue.Undefined"/>.
            </summary>
        </member>
        <member name="P:KGySoft.Json.JsonValue.Item(System.Int32)">
            <summary>
            If the type of this <see cref="T:KGySoft.Json.JsonValue"/> is <see cref="F:KGySoft.Json.JsonValueType.Array"/> and <paramref name="arrayIndex"/> is within the valid bounds,
            then gets the value at the specified <paramref name="arrayIndex"/>; otherwise, returns <see cref="F:KGySoft.Json.JsonValue.Undefined"/>.
            Just like in JavaScript, using an invalid index returns <see cref="F:KGySoft.Json.JsonValue.Undefined"/>.
            </summary>
            <param name="arrayIndex">The index of the array element to get.</param>
            <returns>The value at the specified <paramref name="arrayIndex"/>, or <see cref="F:KGySoft.Json.JsonValue.Undefined"/>
            if <paramref name="arrayIndex"/> is invalid or <see cref="P:KGySoft.Json.JsonValue.Type"/> is not <see cref="F:KGySoft.Json.JsonValueType.Array"/>.</returns>
        </member>
        <member name="P:KGySoft.Json.JsonValue.Item(System.String)">
            <summary>
            If the type of this <see cref="T:KGySoft.Json.JsonValue"/> is <see cref="F:KGySoft.Json.JsonValueType.Object"/> and <paramref name="propertyName"/> denotes an existing property,
            then gets the value of the specified <paramref name="propertyName"/>; otherwise, returns <see cref="F:KGySoft.Json.JsonValue.Undefined"/>.
            </summary>
            <param name="propertyName">The name of the property to return its value.</param>
            <returns>The value of the specified <paramref name="propertyName"/>, or <see cref="F:KGySoft.Json.JsonValue.Undefined"/>
            if <paramref name="propertyName"/> is invalid or <see cref="P:KGySoft.Json.JsonValue.Type"/> is not <see cref="F:KGySoft.Json.JsonValueType.Object"/>.</returns>
        </member>
        <member name="M:KGySoft.Json.JsonValue.op_Equality(KGySoft.Json.JsonValue,KGySoft.Json.JsonValue)">
            <summary>
            Determines whether two specified <see cref="T:KGySoft.Json.JsonValue"/> instances have the same value.
            </summary>
            <param name="left">The left argument of the equality check.</param>
            <param name="right">The right argument of the equality check.</param>
            <returns>The result of the equality check.</returns>
        </member>
        <member name="M:KGySoft.Json.JsonValue.op_Inequality(KGySoft.Json.JsonValue,KGySoft.Json.JsonValue)">
            <summary>
            Determines whether two specified <see cref="T:KGySoft.Json.JsonValue"/> instances have different values.
            </summary>
            <param name="left">The left argument of the inequality check.</param>
            <param name="right">The right argument of the inequality check.</param>
            <returns>The result of the inequality check.</returns>
        </member>
        <member name="M:KGySoft.Json.JsonValue.op_Implicit(System.Boolean)~KGySoft.Json.JsonValue">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Boolean">bool</see> to <see cref="T:KGySoft.Json.JsonValue"/>.
            </summary>
            <param name="value">The value to be converted to a <see cref="T:KGySoft.Json.JsonValue"/>.</param>
            <returns>
            A <see cref="T:KGySoft.Json.JsonValue"/> instance that represents the original value.
            </returns>
        </member>
        <member name="M:KGySoft.Json.JsonValue.op_Implicit(System.Nullable{System.Boolean})~KGySoft.Json.JsonValue">
            <summary>
            Performs an implicit conversion from nullable <see cref="T:System.Boolean">bool</see> to <see cref="T:KGySoft.Json.JsonValue"/>.
            </summary>
            <param name="value">The value to be converted to a <see cref="T:KGySoft.Json.JsonValue"/>.</param>
            <returns>
            A <see cref="T:KGySoft.Json.JsonValue"/> instance that represents the original value.
            </returns>
        </member>
        <member name="M:KGySoft.Json.JsonValue.op_Implicit(System.String)~KGySoft.Json.JsonValue">
            <summary>
            Performs an implicit conversion from <see cref="T:System.String">string</see> to <see cref="T:KGySoft.Json.JsonValue"/>.
            </summary>
            <param name="value">The value to be converted to a <see cref="T:KGySoft.Json.JsonValue"/>.</param>
            <returns>
            A <see cref="T:KGySoft.Json.JsonValue"/> instance that represents the original value.
            </returns>
        </member>
        <member name="M:KGySoft.Json.JsonValue.op_Implicit(System.Double)~KGySoft.Json.JsonValue">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Double">double</see> to <see cref="T:KGySoft.Json.JsonValue"/>.
            </summary>
            <param name="value">The value to be converted to a <see cref="T:KGySoft.Json.JsonValue"/>.</param>
            <returns>
            A <see cref="T:KGySoft.Json.JsonValue"/> instance that represents the original value.
            </returns>
        </member>
        <member name="M:KGySoft.Json.JsonValue.op_Implicit(System.Nullable{System.Double})~KGySoft.Json.JsonValue">
            <summary>
            Performs an implicit conversion from nullable <see cref="T:System.Double">double</see> to <see cref="T:KGySoft.Json.JsonValue"/>.
            </summary>
            <param name="value">The value to be converted to a <see cref="T:KGySoft.Json.JsonValue"/>.</param>
            <returns>
            A <see cref="T:KGySoft.Json.JsonValue"/> instance that represents the original value.
            </returns>
        </member>
        <member name="M:KGySoft.Json.JsonValue.op_Implicit(KGySoft.Json.JsonArray)~KGySoft.Json.JsonValue">
            <summary>
            Performs an implicit conversion from <see cref="T:KGySoft.Json.JsonArray"/> to <see cref="T:KGySoft.Json.JsonValue"/>.
            </summary>
            <param name="array">The <see cref="T:KGySoft.Json.JsonArray"/> to be converted to a <see cref="T:KGySoft.Json.JsonValue"/>.</param>
            <returns>
            A <see cref="T:KGySoft.Json.JsonValue"/> instance that represents the original value.
            </returns>
        </member>
        <member name="M:KGySoft.Json.JsonValue.op_Implicit(KGySoft.Json.JsonObject)~KGySoft.Json.JsonValue">
            <summary>
            Performs an implicit conversion from <see cref="T:KGySoft.Json.JsonObject"/> to <see cref="T:KGySoft.Json.JsonValue"/>.
            </summary>
            <param name="obj">The <see cref="T:KGySoft.Json.JsonObject"/> to be converted to a <see cref="T:KGySoft.Json.JsonValue"/>.</param>
            <returns>
            A <see cref="T:KGySoft.Json.JsonValue"/> instance that represents the original value.
            </returns>
        </member>
        <member name="M:KGySoft.Json.JsonValue.op_Implicit(System.Int32)~KGySoft.Json.JsonValue">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Int32">int</see> to <see cref="T:KGySoft.Json.JsonValue"/>.
            </summary>
            <param name="value">The value to be converted to a <see cref="T:KGySoft.Json.JsonValue"/>.</param>
            <returns>
            A <see cref="T:KGySoft.Json.JsonValue"/> instance that represents the original value.
            </returns>
        </member>
        <member name="M:KGySoft.Json.JsonValue.op_Implicit(System.Nullable{System.Int32})~KGySoft.Json.JsonValue">
            <summary>
            Performs an implicit conversion from nullable <see cref="T:System.Int32">int</see> to <see cref="T:KGySoft.Json.JsonValue"/>.
            </summary>
            <param name="value">The value to be converted to a <see cref="T:KGySoft.Json.JsonValue"/>.</param>
            <returns>
            A <see cref="T:KGySoft.Json.JsonValue"/> instance that represents the original value.
            </returns>
        </member>
        <member name="M:KGySoft.Json.JsonValue.op_Implicit(System.UInt32)~KGySoft.Json.JsonValue">
            <summary>
            Performs an implicit conversion from <see cref="T:System.UInt32">uint</see> to <see cref="T:KGySoft.Json.JsonValue"/>.
            </summary>
            <param name="value">The value to be converted to a <see cref="T:KGySoft.Json.JsonValue"/>.</param>
            <returns>
            A <see cref="T:KGySoft.Json.JsonValue"/> instance that represents the original value.
            </returns>
        </member>
        <member name="M:KGySoft.Json.JsonValue.op_Implicit(System.Nullable{System.UInt32})~KGySoft.Json.JsonValue">
            <summary>
            Performs an implicit conversion from nullable <see cref="T:System.UInt32">uint</see> to <see cref="T:KGySoft.Json.JsonValue"/>.
            </summary>
            <param name="value">The value to be converted to a <see cref="T:KGySoft.Json.JsonValue"/>.</param>
            <returns>
            A <see cref="T:KGySoft.Json.JsonValue"/> instance that represents the original value.
            </returns>
        </member>
        <member name="M:KGySoft.Json.JsonValue.op_Implicit(System.Int64)~KGySoft.Json.JsonValue">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Int64">long</see> to <see cref="T:KGySoft.Json.JsonValue"/>.
            This operator exists only to produce a warning because otherwise the implicit conversion from double would also match <see cref="T:System.Int64"/> values.
            </summary>
            <param name="value">The value to be converted to a <see cref="T:KGySoft.Json.JsonValue"/>.</param>
            <returns>
            A <see cref="T:KGySoft.Json.JsonValue"/> instance that represents the original value.
            </returns>
            <remarks>
            <note><strong>Obsolete Note:</strong> Using <see cref="T:System.Int64"/> as a JSON Number may cause loss of precision.
            It is recommended to use the <see cref="M:KGySoft.Json.JsonValueExtensions.ToJson(System.Int64,System.Boolean)">ToJson</see> extension method instead.
            You can pass <see langword="false"/> to the <c>asString</c> parameter to express your intention and to avoid this warning.</note>
            </remarks>
        </member>
        <member name="M:KGySoft.Json.JsonValue.op_Implicit(System.Nullable{System.Int64})~KGySoft.Json.JsonValue">
            <summary>
            Performs an implicit conversion from nullable <see cref="T:System.Int64">long</see> to <see cref="T:KGySoft.Json.JsonValue"/>.
            This operator exists only to produce a warning because otherwise the implicit conversion from double would also match <see cref="T:System.Int64"/> values.
            </summary>
            <param name="value">The value to be converted to a <see cref="T:KGySoft.Json.JsonValue"/>.</param>
            <returns>
            A <see cref="T:KGySoft.Json.JsonValue"/> instance that represents the original value.
            </returns>
            <remarks>
            <note><strong>Obsolete Note:</strong> Using <see cref="T:System.Int64"/> as a JSON Number may cause loss of precision.
            It is recommended to use the <see cref="M:KGySoft.Json.JsonValueExtensions.ToJson(System.Nullable{System.Int64},System.Boolean)">ToJson</see> extension method instead.
            You can pass <see langword="false"/> to the <c>asString</c> parameter to express your intention and to avoid this warning.</note>
            </remarks>
        </member>
        <member name="M:KGySoft.Json.JsonValue.op_Implicit(System.UInt64)~KGySoft.Json.JsonValue">
            <summary>
            Performs an implicit conversion from <see cref="T:System.UInt64">ulong</see> to <see cref="T:KGySoft.Json.JsonValue"/>.
            This operator exists only to produce a warning because otherwise the implicit conversion from double would also match <see cref="T:System.UInt64"/> values.
            </summary>
            <param name="value">The value to be converted to a <see cref="T:KGySoft.Json.JsonValue"/>.</param>
            <returns>
            A <see cref="T:KGySoft.Json.JsonValue"/> instance that represents the original value.
            </returns>
            <remarks>
            <note><strong>Obsolete Note:</strong> Using <see cref="T:System.UInt64"/> as a JSON Number may cause loss of precision.
            It is recommended to use the <see cref="M:KGySoft.Json.JsonValueExtensions.ToJson(System.UInt64,System.Boolean)">ToJson</see> extension method instead.
            You can pass <see langword="false"/> to the <c>asString</c> parameter to express your intention and to avoid this warning.</note>
            </remarks>
        </member>
        <member name="M:KGySoft.Json.JsonValue.op_Implicit(System.Nullable{System.UInt64})~KGySoft.Json.JsonValue">
            <summary>
            Performs an implicit conversion from nullable <see cref="T:System.UInt64">ulong</see> to <see cref="T:KGySoft.Json.JsonValue"/>.
            This operator exists only to produce a warning because otherwise the implicit conversion from double would also match <see cref="T:System.UInt64"/> values.
            </summary>
            <param name="value">The value to be converted to a <see cref="T:KGySoft.Json.JsonValue"/>.</param>
            <returns>
            A <see cref="T:KGySoft.Json.JsonValue"/> instance that represents the original value.
            </returns>
            <remarks>
            <note><strong>Obsolete Note:</strong> Using <see cref="T:System.UInt64"/> as a JSON Number may cause loss of precision.
            It is recommended to use the <see cref="M:KGySoft.Json.JsonValueExtensions.ToJson(System.UInt64,System.Boolean)">ToJson</see> extension method instead.
            You can pass <see langword="false"/> to the <c>asString</c> parameter to express your intention and to avoid this warning.</note>
            </remarks>
        </member>
        <member name="M:KGySoft.Json.JsonValue.op_Explicit(KGySoft.Json.JsonValue)~System.Nullable{System.Boolean}">
            <summary>
            Performs an explicit conversion from <see cref="T:KGySoft.Json.JsonValue"/> to nullable <see cref="T:System.Boolean">bool</see>.
            The conversion succeeds if the <see cref="P:KGySoft.Json.JsonValue.Type"/> property is <see cref="F:KGySoft.Json.JsonValueType.Null"/> or <see cref="F:KGySoft.Json.JsonValueType.Boolean"/>; otherwise, an <see cref="T:System.InvalidCastException"/> is thrown.
            </summary>
            <param name="value">The value to be converted to a <see cref="T:System.Boolean">bool</see>.</param>
            <returns>
            A <see cref="T:System.Boolean">bool</see> instance that represents the original value.
            </returns>
            <exception cref="T:System.InvalidCastException"><paramref name="value"/> does not represent a boolean value.</exception>
        </member>
        <member name="M:KGySoft.Json.JsonValue.op_Explicit(KGySoft.Json.JsonValue)~System.String">
            <summary>
            Performs an explicit conversion from <see cref="T:KGySoft.Json.JsonValue"/> to <see cref="T:System.String">string</see>.
            The conversion succeeds if the <see cref="P:KGySoft.Json.JsonValue.Type"/> property is <see cref="F:KGySoft.Json.JsonValueType.Null"/> or <see cref="F:KGySoft.Json.JsonValueType.String"/>; otherwise, an <see cref="T:System.InvalidCastException"/> is thrown.
            </summary>
            <param name="value">The value to be converted to a <see cref="T:System.String">string</see>.</param>
            <returns>
            A <see cref="T:System.String">string</see> instance that represents the original value.
            </returns>
            <exception cref="T:System.InvalidCastException"><paramref name="value"/> does not represent a string value.</exception>
        </member>
        <member name="M:KGySoft.Json.JsonValue.op_Explicit(KGySoft.Json.JsonValue)~System.Nullable{System.Double}">
            <summary>
            Performs an explicit conversion from <see cref="T:KGySoft.Json.JsonValue"/> to nullable <see cref="T:System.Double">double</see>.
            The conversion succeeds if the <see cref="P:KGySoft.Json.JsonValue.Type"/> property is <see cref="F:KGySoft.Json.JsonValueType.Null"/> or <see cref="F:KGySoft.Json.JsonValueType.Number"/>; otherwise, an <see cref="T:System.InvalidCastException"/> is thrown.
            </summary>
            <param name="value">The value to be converted to a <see cref="T:System.Double">double</see>.</param>
            <returns>
            A <see cref="T:System.Double">double</see> instance that represents the original value.
            </returns>
            <exception cref="T:System.InvalidCastException"><paramref name="value"/> does not represent a numeric value.</exception>
        </member>
        <member name="M:KGySoft.Json.JsonValue.op_Explicit(KGySoft.Json.JsonValue)~KGySoft.Json.JsonArray">
            <summary>
            Performs an explicit conversion from <see cref="T:KGySoft.Json.JsonValue"/> to <see cref="T:KGySoft.Json.JsonArray"/>.
            The conversion succeeds if the <see cref="P:KGySoft.Json.JsonValue.Type"/> property is <see cref="F:KGySoft.Json.JsonValueType.Null"/> or <see cref="F:KGySoft.Json.JsonValueType.Array"/>; otherwise, an <see cref="T:System.InvalidCastException"/> is thrown.
            </summary>
            <param name="value">The value to be converted to a <see cref="T:KGySoft.Json.JsonArray"/>.</param>
            <returns>
            A <see cref="T:KGySoft.Json.JsonArray"/> instance that represents the original value.
            </returns>
            <exception cref="T:System.InvalidCastException"><paramref name="value"/> does not represent an array.</exception>
        </member>
        <member name="M:KGySoft.Json.JsonValue.op_Explicit(KGySoft.Json.JsonValue)~KGySoft.Json.JsonObject">
            <summary>
            Performs an explicit conversion from <see cref="T:KGySoft.Json.JsonValue"/> to <see cref="T:KGySoft.Json.JsonObject"/>.
            The conversion succeeds if the <see cref="P:KGySoft.Json.JsonValue.Type"/> property is <see cref="F:KGySoft.Json.JsonValueType.Null"/> or <see cref="F:KGySoft.Json.JsonValueType.Object"/>; otherwise, an <see cref="T:System.InvalidCastException"/> is thrown.
            </summary>
            <param name="value">The value to be converted to a <see cref="T:KGySoft.Json.JsonObject"/>.</param>
            <returns>
            A <see cref="T:KGySoft.Json.JsonObject"/> instance that represents the original value.
            </returns>
            <exception cref="T:System.InvalidCastException"><paramref name="value"/> does not represent an object.</exception>
        </member>
        <member name="M:KGySoft.Json.JsonValue.#ctor(System.Boolean)">
            <summary>
            Initializes a new <see cref="T:KGySoft.Json.JsonValue"/> struct that represents a boolean value.
            An implicit conversion from the <see cref="T:System.Boolean">bool</see> type also exists.
            </summary>
            <param name="value">The value to initialize the <see cref="T:KGySoft.Json.JsonValue"/> from.</param>
        </member>
        <member name="M:KGySoft.Json.JsonValue.#ctor(System.String)">
            <summary>
            Initializes a new <see cref="T:KGySoft.Json.JsonValue"/> struct that represents a string.
            An implicit conversion from the <see cref="T:System.String">string</see> type also exists.
            </summary>
            <param name="value">The value to initialize the <see cref="T:KGySoft.Json.JsonValue"/> from.</param>
        </member>
        <member name="M:KGySoft.Json.JsonValue.#ctor(System.Double)">
            <summary>
            Initializes a new <see cref="T:KGySoft.Json.JsonValue"/> struct that represents a number.
            An implicit conversion from the <see cref="T:System.Double">double</see> type also exists.
            Some .NET numeric types such as <see cref="T:System.Int64">long</see> and <see cref="T:System.Decimal">decimal</see> are not recommended to be encoded as JSON numbers.
            Use the <see cref="O:KGySoft.Json.JsonValueExtensions.ToJson">ToJson</see> extension methods if you still want to do so.
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <param name="value">The value to initialize the <see cref="T:KGySoft.Json.JsonValue"/> from.</param>
            <remarks>
            <note type="warning">The JavaScript <see cref="F:KGySoft.Json.JsonValueType.Number"/> type is
            always a <a href="https://en.wikipedia.org/wiki/Double-precision_floating-point_format" target="_blank">double-precision 64-bit binary format IEEE 754</a> value,
            which is the equivalent of the <see cref="T:System.Double">double</see> type in C#. It is not recommended to store C# <see cref="T:System.Int64">long</see> and <see cref="T:System.Decimal">decimal</see>
            types as JavaScript numbers because their precision might be lost silently if the JSON is processed by JavaScript.</note>
            <note><list type="bullet">
            <item>JavaScript Number type is actually a double. Other large numeric types (<see cref="T:System.Int64">[u]long</see>/<see cref="T:System.Decimal">decimal</see>) must be encoded as string to
            prevent loss of precision at a real JavaScript side. If you are sure that you want to forcibly treat such types as numbers use
            the <see cref="O:KGySoft.Json.JsonValueExtensions.ToJson">ToJson</see> overloads and pass <see langword="true"/> to their <c>asString</c> parameter.
            You can use also the <see cref="M:KGySoft.Json.JsonValue.CreateNumberUnchecked(System.String)">CreateNumberUnchecked</see> method to create a JSON number directly from a string.</item>
            <item>This method allows <see cref="F:System.Double.NaN"/> and <see cref="F:System.Double.PositiveInfinity"/>/<see cref="F:System.Double.NegativeInfinity"/>,
            which are also invalid in JSON. Parsing these values works though their <see cref="P:KGySoft.Json.JsonValue.Type"/> will be <see cref="F:KGySoft.Json.JsonValueType.UnknownLiteral"/> after parsing.</item>
            </list></note>
            </remarks>
            <seealso cref="P:KGySoft.Json.JsonValue.AsNumber"/>
            <seealso cref="M:KGySoft.Json.JsonValue.CreateNumberUnchecked(System.String)"/>
        </member>
        <member name="M:KGySoft.Json.JsonValue.#ctor(KGySoft.Json.JsonArray)">
            <summary>
            Initializes a new <see cref="T:KGySoft.Json.JsonValue"/> struct that represents an array.
            </summary>
            <param name="array">The <see cref="T:KGySoft.Json.JsonArray"/> to initialize the <see cref="T:KGySoft.Json.JsonValue"/> from.</param>
        </member>
        <member name="M:KGySoft.Json.JsonValue.#ctor(KGySoft.Json.JsonObject)">
            <summary>
            Initializes a new <see cref="T:KGySoft.Json.JsonValue"/> struct that represents an object.
            </summary>
            <param name="obj">The <see cref="T:KGySoft.Json.JsonObject"/> to initialize the <see cref="T:KGySoft.Json.JsonValue"/> from.</param>
        </member>
        <member name="M:KGySoft.Json.JsonValue.Parse(System.IO.TextReader)">
            <summary>
            Reads a <see cref="T:KGySoft.Json.JsonValue"/> from a <see cref="T:System.IO.TextReader"/> that contains JSON data.
            </summary>
            <param name="reader">A <see cref="T:System.IO.TextReader"/> that will be read for the <see cref="T:KGySoft.Json.JsonValue"/> content.</param>
            <returns>A <see cref="T:KGySoft.Json.JsonValue"/> that contains the JSON data that was read from the specified <see cref="T:System.IO.TextReader"/>.</returns>
        </member>
        <member name="M:KGySoft.Json.JsonValue.Parse(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Reads a <see cref="T:KGySoft.Json.JsonValue"/> from a <see cref="T:System.IO.Stream"/> that contains JSON data.
            </summary>
            <param name="stream">A <see cref="T:System.IO.Stream"/> that will be read for the <see cref="T:KGySoft.Json.JsonValue"/> content.</param>
            <param name="encoding">An <see cref="T:System.Text.Encoding"/> that specifies the encoding of the JSON data in the <paramref name="stream"/>.
            If <see langword="null"/>, then <see cref="P:System.Text.Encoding.UTF8"/> encoding will be used. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <returns>A <see cref="T:KGySoft.Json.JsonValue"/> that contains the JSON data that was read from the specified <paramref name="stream"/>.</returns>
        </member>
        <member name="M:KGySoft.Json.JsonValue.Parse(System.String)">
            <summary>
            Reads a <see cref="T:KGySoft.Json.JsonValue"/> from a <see cref="T:System.String">string</see> that contains JSON data.
            </summary>
            <param name="s">A string that will be read for the <see cref="T:KGySoft.Json.JsonValue"/> content.</param>
            <returns>A <see cref="T:KGySoft.Json.JsonValue"/> that contains the JSON data that was read from the specified string.</returns>
        </member>
        <member name="M:KGySoft.Json.JsonValue.TryParse(System.IO.TextReader,KGySoft.Json.JsonValue@)">
            <summary>
            Tries to read a <see cref="T:KGySoft.Json.JsonValue"/> from a <see cref="T:System.IO.TextReader"/> that contains JSON data.
            </summary>
            <param name="reader">A <see cref="T:System.IO.TextReader"/> that will be read for the <see cref="T:KGySoft.Json.JsonValue"/> content.</param>
            <param name="value">When this method returns <see langword="true"/>, the result of the parsing;
            otherwise, <see cref="F:KGySoft.Json.JsonValue.Undefined"/>. This parameter is passed uninitialized.</param>
            <returns><see langword="true"/> if the parsing was successful; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:KGySoft.Json.JsonValue.TryParse(System.IO.Stream,KGySoft.Json.JsonValue@,System.Text.Encoding)">
            <summary>
            Tries to read a <see cref="T:KGySoft.Json.JsonValue"/> from a <see cref="T:System.IO.Stream"/> that contains JSON data.
            </summary>
            <param name="stream">A <see cref="T:System.IO.Stream"/> that will be read for the <see cref="T:KGySoft.Json.JsonValue"/> content.</param>
            <param name="value">When this method returns <see langword="true"/>, the result of the parsing;
            otherwise, <see cref="F:KGySoft.Json.JsonValue.Undefined"/>. This parameter is passed uninitialized.</param>
            <param name="encoding">An <see cref="T:System.Text.Encoding"/> that specifies the encoding of the JSON data in the <paramref name="stream"/>.
            If <see langword="null"/>, then <see cref="P:System.Text.Encoding.UTF8"/> encoding will be used. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <returns><see langword="true"/> if the parsing was successful; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:KGySoft.Json.JsonValue.TryParse(System.String,KGySoft.Json.JsonValue@)">
            <summary>
            Tries to read a <see cref="T:KGySoft.Json.JsonValue"/> from a <see cref="T:System.String">string</see> that contains JSON data.
            </summary>
            <param name="s">A string that will be read for the <see cref="T:KGySoft.Json.JsonValue"/> content.</param>
            <param name="value">When this method returns <see langword="true"/>, the result of the parsing;
            otherwise, <see cref="F:KGySoft.Json.JsonValue.Undefined"/>. This parameter is passed uninitialized.</param>
            <returns><see langword="true"/> if the parsing was successful; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:KGySoft.Json.JsonValue.CreateNumberUnchecked(System.String)">
            <summary>
            Creates a <see cref="T:KGySoft.Json.JsonValue"/> that forcibly treats <paramref name="value"/> as a JSON number,
            even if it cannot be represented as a valid number in JavaScript.
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <param name="value">The value.</param>
            <returns><see cref="F:KGySoft.Json.JsonValue.Null"/>, if <paramref name="value"/> was <see langword="null"/>; otherwise, a <see cref="T:KGySoft.Json.JsonValue"/>
            that contains the specified value as a <see cref="F:KGySoft.Json.JsonValueType.Number"/>.</returns>
            <remarks>
            <note type="warning">This method makes possible to create invalid JSON.</note>
            <para>The <see cref="P:KGySoft.Json.JsonValue.Type"/> property of the result will return <see cref="F:KGySoft.Json.JsonValueType.Number"/> even if <paramref name="value"/> is not a valid number.</para>
            <para>The <see cref="P:KGySoft.Json.JsonValue.AsLiteral"/> property will return the specified <paramref name="value"/>.</para>
            <para>The <see cref="P:KGySoft.Json.JsonValue.AsNumber"/> property of the result may return a less precise value, or even <see langword="null"/>,
            though serializing to JSON by the <see cref="O:KGySoft.Json.JsonValue.ToString">ToString</see> and <see cref="O:KGySoft.Json.JsonValue.WriteTo">WriteTo</see>
            methods preserves the specified <paramref name="value"/>.</para>
            </remarks>
        </member>
        <member name="M:KGySoft.Json.JsonValue.CreateLiteralUnchecked(System.String)">
            <summary>
            Creates a <see cref="T:KGySoft.Json.JsonValue"/> that forcibly treats <paramref name="value"/> as a JSON literal, even if it is invalid in JSON.
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <param name="value">The value.</param>
            <returns><see cref="F:KGySoft.Json.JsonValue.Null"/>, if <paramref name="value"/> was <see langword="null"/>; otherwise, a <see cref="T:KGySoft.Json.JsonValue"/>,
            whose <see cref="P:KGySoft.Json.JsonValue.Type"/> property returns <see cref="F:KGySoft.Json.JsonValueType.UnknownLiteral"/>.</returns>
            <remarks>
            <note type="warning">This method makes possible to create invalid JSON.</note>
            <para>The <see cref="P:KGySoft.Json.JsonValue.Type"/> property of the result will return <see cref="F:KGySoft.Json.JsonValueType.UnknownLiteral"/> even if <paramref name="value"/> is actually a valid JSON literal.</para>
            <para>The <see cref="P:KGySoft.Json.JsonValue.AsLiteral"/> property will return the specified <paramref name="value"/>.</para>
            <para>Serializing to JSON by the <see cref="O:KGySoft.Json.JsonValue.ToString">ToString</see> and <see cref="O:KGySoft.Json.JsonValue.WriteTo">WriteTo</see>
            methods preserves the specified <paramref name="value"/>.</para>
            </remarks>
        </member>
        <member name="M:KGySoft.Json.JsonValue.ToString">
            <summary>
            Returns a minimized JSON string that represents this <see cref="T:KGySoft.Json.JsonValue"/>.
            </summary>
            <returns>A minimized JSON string that represents this <see cref="T:KGySoft.Json.JsonValue"/>.</returns>
        </member>
        <member name="M:KGySoft.Json.JsonValue.ToString(System.String)">
            <summary>
            Returns a JSON string that represents this <see cref="T:KGySoft.Json.JsonValue"/>.
            </summary>
            <param name="indent">Specifies the indentation string to produce a formatted JSON.
            If <see langword="null"/> or empty, then a minimized JSON is returned. Using non-whitespace characters may produce an invalid JSON.</param>
            <returns>A JSON string that represents this <see cref="T:KGySoft.Json.JsonValue"/>.</returns>
        </member>
        <member name="M:KGySoft.Json.JsonValue.Equals(KGySoft.Json.JsonValue)">
            <summary>
            Indicates whether the current <see cref="T:KGySoft.Json.JsonValue"/> instance is equal to another one specified in the <paramref name="other"/> parameter.
            </summary>
            <param name="other">A <see cref="T:KGySoft.Json.JsonValue"/> instance to compare with this instance.</param>
            <returns><see langword="true"/> if the current object is equal to the <paramref name="other"/> parameter; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:KGySoft.Json.JsonValue.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object">object</see> is equal to this instance.
            Allows comparing also to <see cref="T:KGySoft.Json.JsonArray"/>, <see cref="T:KGySoft.Json.JsonObject"/>, <see cref="T:System.String">string</see>, <see cref="T:System.Boolean">bool</see> and .NET numeric types.
            </summary>
            <param name="obj">An <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns><see langword="true"/> if the specified object is equal to this instance; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:KGySoft.Json.JsonValue.GetHashCode">
            <summary>
            Returns a hash code for this <see cref="T:KGySoft.Json.JsonValue"/> instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:KGySoft.Json.JsonValue.WriteTo(System.IO.TextWriter,System.String)">
            <summary>
            Writes this <see cref="T:KGySoft.Json.JsonValue"/> instance into a <see cref="T:System.IO.TextReader"/>.
            </summary>
            <param name="writer">A <see cref="T:System.IO.TextWriter"/> to write the <see cref="T:KGySoft.Json.JsonValue"/> into.</param>
            <param name="indent">Specifies the indentation string to produce a formatted JSON.
            If <see langword="null"/> or empty, then a minimized JSON is returned. Using non-whitespace characters may produce an invalid JSON. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
        </member>
        <member name="M:KGySoft.Json.JsonValue.WriteTo(System.Text.StringBuilder,System.String)">
            <summary>
            Writes this <see cref="T:KGySoft.Json.JsonValue"/> instance into a <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="builder">A <see cref="T:System.Text.StringBuilder"/> to write the <see cref="T:KGySoft.Json.JsonValue"/> into.</param>
            <param name="indent">Specifies the indentation string to produce a formatted JSON.
            If <see langword="null"/> or empty, then a minimized JSON is returned. Using non-whitespace characters may produce an invalid JSON. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
        </member>
        <member name="M:KGySoft.Json.JsonValue.WriteTo(System.IO.Stream,System.Text.Encoding,System.String)">
            <summary>
            Writes this <see cref="T:KGySoft.Json.JsonValue"/> instance into a <see cref="T:System.IO.Stream"/> using the specified <paramref name="encoding"/>.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> to write the <see cref="T:KGySoft.Json.JsonValue"/> into.</param>
            <param name="encoding">An <see cref="T:System.Text.Encoding"/> that specifies the encoding of the JSON data in the <paramref name="stream"/>.
            If <see langword="null"/>, then <see cref="P:System.Text.Encoding.UTF8"/> encoding will be used. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <param name="indent">Specifies the indentation string to produce a formatted JSON.
            If <see langword="null"/> or empty, then a minimized JSON is returned. Using non-whitespace characters may produce an invalid JSON. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
        </member>
        <member name="T:KGySoft.Json.NamespaceDoc">
            <summary>
            Contains types that make possible in-memory JSON manipulation (LINQ to JSON),
            similarly to the <a href="https://docs.microsoft.com/en-us/dotnet/api/System.Xml.Linq" target="_blank">System.Xml.Linq</a>
            namespace for XML content.
            <br/>See the <strong>Remarks</strong> section of the <see cref="T:KGySoft.Json.JsonValue"/> struct for details and examples.
            </summary>
        </member>
        <member name="T:KGySoft.Json.JsonDateTimeFormat">
            <summary>
            Specifies how <see cref="T:System.DateTime"/>, <see cref="T:System.DateTimeOffset"/> and <see cref="!:DateOnly"/> instances are formatted and parsed by the <see cref="T:KGySoft.Json.JsonValueExtensions"/> methods.
            </summary>
        </member>
        <member name="F:KGySoft.Json.JsonDateTimeFormat.Auto">
            <summary>
            <para>When converting a <see cref="T:System.DateTime"/> or <see cref="T:System.DateTimeOffset"/> instance to JSON, it is equivalent to the <see cref="F:KGySoft.Json.JsonDateTimeFormat.Iso8601JavaScript"/>
            format if the target <see cref="P:KGySoft.Json.JsonValue.Type"/> is <see cref="F:KGySoft.Json.JsonValueType.String"/>,
            or the <see cref="F:KGySoft.Json.JsonDateTimeFormat.UnixMilliseconds"/> format if the target <see cref="P:KGySoft.Json.JsonValue.Type"/> is <see cref="F:KGySoft.Json.JsonValueType.Number"/>.</para>
            <para>When converting a <see cref="!:DateOnly"/> instance to JSON, it is equivalent to the <see cref="F:KGySoft.Json.JsonDateTimeFormat.Iso8601Date"/>
            format if the target <see cref="P:KGySoft.Json.JsonValue.Type"/> is <see cref="F:KGySoft.Json.JsonValueType.String"/>,
            or the <see cref="F:KGySoft.Json.JsonDateTimeFormat.UnixMilliseconds"/> format if the target <see cref="P:KGySoft.Json.JsonValue.Type"/> is <see cref="F:KGySoft.Json.JsonValueType.Number"/>.</para>
            <para>When parsing a <see cref="T:KGySoft.Json.JsonValue"/>, it represents any defined <see cref="T:KGySoft.Json.JsonDateTimeFormat"/>, including some ISO 8601 formats,
            which are not covered by the other values in the <see cref="T:KGySoft.Json.JsonDateTimeFormat"/> enumeration.</para>
            <para><strong>Note:</strong> Parsing a date-time value with the <see cref="F:KGySoft.Json.JsonDateTimeFormat.Auto"/> option from a JSON <see cref="F:KGySoft.Json.JsonValueType.Number"/> can be ambiguous
            (see the <see cref="F:KGySoft.Json.JsonDateTimeFormat.UnixMilliseconds"/>, <see cref="F:KGySoft.Json.JsonDateTimeFormat.UnixSeconds"/>, <see cref="F:KGySoft.Json.JsonDateTimeFormat.UnixSecondsFloat"/> and <see cref="F:KGySoft.Json.JsonDateTimeFormat.Ticks"/> formats).
            Though a "sanity check" is applied for parsing such values use a specific option whenever possible.</para>
            </summary>
        </member>
        <member name="F:KGySoft.Json.JsonDateTimeFormat.UnixMilliseconds">
            <summary>
            <para>Represents the time elapsed since the Unix Epoch time (1970-01-01T00:00Z) in milliseconds.
            This is conform with the constructor of the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/Date" target="_blank">Date</a>
            object and also with its <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getTime" target="_blank">getTime</a> method in JavaScript.</para>
            <para>When converting to JSON, local times will be adjusted to UTC. When parsing, the value is interpreted as UTC time.</para>
            <para><strong>Example:</strong> 2020-01-01T00:00+01:00 becomes <c>1577833200000</c></para>
            </summary>
        </member>
        <member name="F:KGySoft.Json.JsonDateTimeFormat.UnixSeconds">
            <summary>
            <para>Represents the time elapsed since the Unix Epoch time (1970-01-01T00:00Z) in seconds.</para>
            <para>When converting to JSON, local times will be adjusted to UTC. When parsing, the value is interpreted as UTC time.</para>
            <para><strong>Example:</strong> 2020-01-01T00:00+01:00 becomes <c>1577833200</c></para>
            </summary>
        </member>
        <member name="F:KGySoft.Json.JsonDateTimeFormat.UnixSecondsFloat">
            <summary>
            <para>Represents the time elapsed since the Unix Epoch time (1970-01-01T00:00Z) in seconds as a floating point number.</para>
            <para>When converting to JSON, local times will be adjusted to UTC. When parsing, the value is interpreted as UTC time.</para>
            <para><strong>Example:</strong> 2020-01-01T00:00+01:00 becomes <c>1577833200.000</c></para>
            </summary>
        </member>
        <member name="F:KGySoft.Json.JsonDateTimeFormat.Ticks">
            <summary>
            <para>Represents the time elapsed since 0001-01-01T00:00Z in 100 nanoseconds, in UTC.
            This is conform with the constructor of the .NET <see cref="T:System.DateTime"/> type and its <see cref="P:System.DateTime.Ticks"/> property.</para>
            <para>When converting to JSON, local times will be adjusted to UTC. When parsing, the value is interpreted as UTC time.</para>
            <para><strong>Example:</strong> 2020-01-01T00:00+01:00 becomes <c>637134300000000000</c></para>
            </summary>
        </member>
        <member name="F:KGySoft.Json.JsonDateTimeFormat.Iso8601JavaScript">
            <summary>
            <para>Represents an ISO 8601 conform date/time format in UTC, as it is returned by the
            <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toJSON" target="_blank">toJSON</a>
            method of the JavaScript <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date" target="_blank">Date</a>
            object prototype by most of the recent JavaScript implementations.</para>
            <para>When converting to JSON, local times will be adjusted to UTC. When parsing, the value is interpreted as UTC time.</para>
            <para><strong>Example:</strong> 2020-01-01T00:00+01:00 becomes <c>2019-12-31T23:00:00.000Z</c></para>
            </summary>
        </member>
        <member name="F:KGySoft.Json.JsonDateTimeFormat.Iso8601Roundtrip">
            <summary>
            <para>Represents an ISO 8601 conform date/time, which can encode .NET <see cref="T:System.DateTime"/> and <see cref="T:System.DateTimeOffset"/> instances without losing precision.
            It can be parsed also by JavaScript, although the time value beyond milliseconds precision might be lost.</para>
            <para>When converting a <see cref="T:System.DateTime"/> instance to JSON, the <see cref="P:System.DateTime.Kind">DateTime.Kind</see>
            is also reflected in the result, which is restored on parsing.</para>
            <para>A <see cref="T:System.DateTimeOffset"/> is always treated as a local time of the time zone specified by its offset.
            You can obtain its <see cref="P:System.DateTimeOffset.UtcDateTime"/> property to encode it as a UTC time.</para>
            <para>A <see cref="!:DateOnly"/> instance is always formatted without time and zone information.</para>
            <para><strong>Examples:</strong>
            <list type="bullet">
            <item><see cref="P:System.DateTime.Kind">DateTime.Kind</see> is <see cref="F:System.DateTimeKind.Unspecified"/>: <c>2020-01-01T00:00:00.0000000</c> (JavaScript interprets it as a local time)</item>
            <item><see cref="P:System.DateTime.Kind">DateTime.Kind</see> is <see cref="F:System.DateTimeKind.Utc"/>: <c>2020-01-01T00:00:00.0000000Z</c></item>
            <item><see cref="P:System.DateTime.Kind">DateTime.Kind</see> is <see cref="F:System.DateTimeKind.Local"/> or <see cref="T:System.DateTimeOffset"/> instances: <c>2020-01-01T00:00:00.0000000+01:00</c></item>
            <item><see cref="!:DateOnly"/> instances: <c>2020-01-01</c>, just like when using the <see cref="F:KGySoft.Json.JsonDateTimeFormat.Iso8601Date"/> format.</item>
            </list></para>
            </summary>
        </member>
        <member name="F:KGySoft.Json.JsonDateTimeFormat.Iso8601Utc">
            <summary>
            <para>Represents an ISO 8601 conform date/time format in UTC, which can encode .NET <see cref="T:System.DateTime"/> and <see cref="T:System.DateTimeOffset"/> instances without losing precision.
            It can be parsed also by JavaScript, although the time value beyond milliseconds precision might be lost.</para>
            <para>When converting to JSON, local times will be adjusted to UTC. When parsing, the value is interpreted as UTC time.</para>
            <para><strong>Example:</strong> 2020-01-01T00:00+01:00 becomes <c>2019-12-31T23:00:00.0000000Z</c></para>
            </summary>
        </member>
        <member name="F:KGySoft.Json.JsonDateTimeFormat.Iso8601Local">
            <summary>
            <para>Represents an ISO 8601 conform date/time format with time zone, which can encode .NET <see cref="T:System.DateTime"/> and <see cref="T:System.DateTimeOffset"/> instances without losing precision.
            It can be parsed also by JavaScript, although the time value beyond milliseconds precision might be lost.</para>
            <para>When converting to JSON, <see cref="T:System.DateTime"/> instances with <see cref="F:System.DateTimeKind.Utc"/>&#160;<see cref="P:System.DateTime.Kind"/>
            will be adjusted to local time. When parsing as <see cref="T:System.DateTime"/>, the value will be adjusted to the actual local time.</para>
            <para><strong>Example:</strong> 2020-01-01T00:00+01:00 becomes <c>2020-01-01T00:00:00.0000000+01:00</c></para>
            </summary>
        </member>
        <member name="F:KGySoft.Json.JsonDateTimeFormat.Iso8601Date">
            <summary>
            <para>Represents an ISO 8601 conform date, without time and time zone information.</para>
            <para>When converting a <see cref="T:System.DateTime"/> instance to JSON, the <see cref="P:System.DateTime.Kind">Kind</see> property is ignored and the time value is not adjusted.
            When parsing as a <see cref="T:System.DateTime"/> the <see cref="P:System.DateTime.Kind">Kind</see> will be <see cref="F:System.DateTimeKind.Unspecified"/> by default.</para>
            <para>A <see cref="T:System.DateTimeOffset"/> is always treated as a local time of the time zone specified by its offset.
            You can obtain its <see cref="P:System.DateTimeOffset.UtcDateTime"/> property to encode it as a UTC date.</para>
            <para><strong>Example:</strong> 2020-01-01T00:00+01:00 becomes <c>2020-01-01</c></para>
            </summary>
        </member>
        <member name="F:KGySoft.Json.JsonDateTimeFormat.Iso8601Minutes">
            <summary>
            <para>Represents an ISO 8601 conform date/time with hours and minutes.</para>
            <para>When converting a <see cref="T:System.DateTime"/> instance to JSON, the <see cref="P:System.DateTime.Kind">DateTime.Kind</see>
            is also reflected in the result, which is restored on parsing.</para>
            <para>A <see cref="T:System.DateTimeOffset"/> is always treated as a local time of the time zone specified by its offset.
            You can obtain its <see cref="P:System.DateTimeOffset.UtcDateTime"/> property to encode it as a UTC time.</para>
            <para>A <see cref="!:DateOnly"/> instance is always formatted with zero time and without time zone information.</para>
            <para><strong>Examples:</strong>
            <list type="bullet">
            <item><see cref="P:System.DateTime.Kind">DateTime.Kind</see> is <see cref="F:System.DateTimeKind.Unspecified"/> or <see cref="!:DateOnly"/> instances: <c>2020-01-01T00:00</c> (JavaScript interprets it as a local time)</item>
            <item><see cref="P:System.DateTime.Kind">DateTime.Kind</see> is <see cref="F:System.DateTimeKind.Utc"/>: <c>2020-01-01T00:00Z</c></item>
            <item><see cref="P:System.DateTime.Kind">DateTime.Kind</see> is <see cref="F:System.DateTimeKind.Local"/> or <see cref="T:System.DateTimeOffset"/> instances: <c>2020-01-01T00:00+01:00</c></item>
            </list></para>
            </summary>
        </member>
        <member name="F:KGySoft.Json.JsonDateTimeFormat.Iso8601Seconds">
            <summary>
            <para>Represents an ISO 8601 conform date/time with hours, minutes and seconds.</para>
            <para>When converting a <see cref="T:System.DateTime"/> instance to JSON, the <see cref="P:System.DateTime.Kind">DateTime.Kind</see>
            is also reflected in the result, which is restored on parsing.</para>
            <para>A <see cref="T:System.DateTimeOffset"/> is always treated as a local time of the time zone specified by its offset.
            You can obtain its <see cref="P:System.DateTimeOffset.UtcDateTime"/> property to encode it as a UTC time.</para>
            <para>A <see cref="!:DateOnly"/> instance is always formatted with zero time and without time zone information.</para>
            <para><strong>Examples:</strong>
            <list type="bullet">
            <item><see cref="P:System.DateTime.Kind">DateTime.Kind</see> is <see cref="F:System.DateTimeKind.Unspecified"/> or <see cref="!:DateOnly"/> instances: <c>2020-01-01T00:00:00</c> (JavaScript interprets it as a local time)</item>
            <item><see cref="P:System.DateTime.Kind">DateTime.Kind</see> is <see cref="F:System.DateTimeKind.Utc"/>: <c>2020-01-01T00:00:00Z</c></item>
            <item><see cref="P:System.DateTime.Kind">DateTime.Kind</see> is <see cref="F:System.DateTimeKind.Local"/> or <see cref="T:System.DateTimeOffset"/> instances: <c>2020-01-01T00:00:00+01:00</c></item>
            </list></para>
            </summary>
        </member>
        <member name="F:KGySoft.Json.JsonDateTimeFormat.Iso8601Milliseconds">
            <summary>
            <para>Represents an ISO 8601 conform date/time with milliseconds precision. Similar to the <see cref="F:KGySoft.Json.JsonDateTimeFormat.Iso8601JavaScript"/> format,
            except that this one does not convert local times to UTC.</para>
            <para>When converting a <see cref="T:System.DateTime"/> instance to JSON, the <see cref="P:System.DateTime.Kind">DateTime.Kind</see>
            is also reflected in the result, which is restored on parsing.</para>
            <para>A <see cref="T:System.DateTimeOffset"/> is always treated as a local time of the time zone specified by its offset.
            You can obtain its <see cref="P:System.DateTimeOffset.UtcDateTime"/> property to encode it as a UTC time.</para>
            <para>A <see cref="!:DateOnly"/> instance is always formatted with zero time and without time zone information.</para>
            <para><strong>Examples:</strong>
            <list type="bullet">
            <item><see cref="P:System.DateTime.Kind">DateTime.Kind</see> is <see cref="F:System.DateTimeKind.Unspecified"/> or <see cref="!:DateOnly"/> instances: <c>2020-01-01T00:00:00.000</c> (JavaScript interprets it as a local time)</item>
            <item><see cref="P:System.DateTime.Kind">DateTime.Kind</see> is <see cref="F:System.DateTimeKind.Utc"/>: <c>2020-01-01T00:00:00.000Z</c></item>
            <item><see cref="P:System.DateTime.Kind">DateTime.Kind</see> is <see cref="F:System.DateTimeKind.Local"/> or <see cref="T:System.DateTimeOffset"/> instances: <c>2020-01-01T00:00:00.000+01:00</c></item>
            </list></para>
            </summary>
        </member>
        <member name="F:KGySoft.Json.JsonDateTimeFormat.MicrosoftLegacy">
            <summary>
            <para>Represents Microsoft's legacy AJAX and WCF REST date-time format. Similarly to <see cref="F:KGySoft.Json.JsonDateTimeFormat.UnixMilliseconds"/>, it is also
            based elapsed milliseconds since Unix Epic time but has a specific string format and can also encode time offset.</para>
            <para><strong>Examples:</strong>
            <list type="bullet">
            <item><see cref="P:System.DateTime.Kind">DateTime.Kind</see> is <see cref="F:System.DateTimeKind.Utc"/> or <see cref="F:System.DateTimeKind.Unspecified"/>, or <see cref="!:DateOnly"/> instances: <c>/Date(1578873600000)/</c></item>
            <item><see cref="P:System.DateTime.Kind">DateTime.Kind</see> is <see cref="F:System.DateTimeKind.Local"/> or <see cref="T:System.DateTimeOffset"/> instances: <c>/Date(1577833200000+0100)/</c></item>
            </list></para>
            </summary>
        </member>
        <member name="T:KGySoft.Json.JsonEnumFormat">
            <summary>
            Specifies how .NET enums (assuming conventional C# Pascal casing) are formatted when converted to JSON
            by the <see cref="M:KGySoft.Json.JsonValueExtensions.ToJson``1(``0,KGySoft.Json.JsonEnumFormat,System.String)"/> extension method.
            </summary>
        </member>
        <member name="F:KGySoft.Json.JsonEnumFormat.PascalCase">
            <summary>
            Represents Pascal casing, eg. <c>EnumValue</c>.
            Assuming that enums already use Pascal casing as per .NET conventions this formatting preserves the original format.
            When using the <see cref="M:KGySoft.Json.JsonValueExtensions.ToJson``1(``0,KGySoft.Json.JsonEnumFormat,System.String)"/> method it adjusts only the first character if that is not an upper case one.
            </summary>
        </member>
        <member name="F:KGySoft.Json.JsonEnumFormat.CamelCase">
            <summary>
            Represents camel casing, eg. <c>enumValue</c>.
            Assuming that enums already use Pascal casing as per .NET conventions this formatting adjusts the first character only.
            When using the <see cref="M:KGySoft.Json.JsonValueExtensions.ToJson``1(``0,KGySoft.Json.JsonEnumFormat,System.String)"/> method it adjusts only the first character if that is not a lower case one.
            </summary>
        </member>
        <member name="F:KGySoft.Json.JsonEnumFormat.LowerCase">
            <summary>
            Represents lower casing, eg. <c>enumvalue</c>.
            </summary>
        </member>
        <member name="F:KGySoft.Json.JsonEnumFormat.UpperCase">
            <summary>
            Represents upper casing, eg. <c>ENUMVALUE</c>.
            </summary>
        </member>
        <member name="F:KGySoft.Json.JsonEnumFormat.LowerCaseWithUnderscores">
            <summary>
            Represents lower casing with underscores, eg. <c>enum_value</c>.
            </summary>
        </member>
        <member name="F:KGySoft.Json.JsonEnumFormat.UpperCaseWithUnderscores">
            <summary>
            Represents upper casing with underscores, eg. <c>ENUM_VALUE</c>.
            </summary>
        </member>
        <member name="F:KGySoft.Json.JsonEnumFormat.LowerCaseWithHyphens">
            <summary>
            Represents lower casing with hyphens, eg. <c>enum-value</c>.
            </summary>
        </member>
        <member name="F:KGySoft.Json.JsonEnumFormat.UpperCaseWithHyphens">
            <summary>
            Represents upper casing with hyphens, eg. <c>ENUM-VALUE</c>.
            </summary>
        </member>
        <member name="F:KGySoft.Json.JsonEnumFormat.Number">
            <summary>
            Represents numeric formatting of enum values even if they have named representation.
            The result <see cref="T:KGySoft.Json.JsonValue"/> will have <see cref="F:KGySoft.Json.JsonValueType.Number"/>&#160;<see cref="P:KGySoft.Json.JsonValue.Type"/>.
            </summary>
        </member>
        <member name="F:KGySoft.Json.JsonEnumFormat.NumberAsString">
            <summary>
            Represents numeric formatting of enum values even if they have named representation.
            The result <see cref="T:KGySoft.Json.JsonValue"/> will have <see cref="F:KGySoft.Json.JsonValueType.String"/>&#160;<see cref="P:KGySoft.Json.JsonValue.Type"/>.
            </summary>
        </member>
        <member name="T:KGySoft.Json.JsonTimeFormat">
            <summary>
            Specifies how <see cref="T:System.TimeSpan"/> and <see cref="!:TimeOnly"/> instances are formatted and parsed by the <see cref="T:KGySoft.Json.JsonValueExtensions"/> methods.
            </summary>
        </member>
        <member name="F:KGySoft.Json.JsonTimeFormat.Auto">
            <summary>
            <para>When converting to JSON, it is equivalent to the <see cref="F:KGySoft.Json.JsonTimeFormat.Text"/> format if the target <see cref="P:KGySoft.Json.JsonValue.Type"/> is <see cref="F:KGySoft.Json.JsonValueType.String"/>,
            or the <see cref="F:KGySoft.Json.JsonTimeFormat.Milliseconds"/> format if the target <see cref="P:KGySoft.Json.JsonValue.Type"/> is <see cref="F:KGySoft.Json.JsonValueType.Number"/>.</para>
            <para>When parsing a <see cref="T:KGySoft.Json.JsonValue"/>, it represents any defined <see cref="T:KGySoft.Json.JsonTimeFormat"/> format.</para>
            <para><strong>Note:</strong> Parsing <see cref="T:System.TimeSpan"/>/<see cref="!:TimeOnly"/> values with the <see cref="F:KGySoft.Json.JsonTimeFormat.Auto"/> option formatted as numeric values (<see cref="F:KGySoft.Json.JsonTimeFormat.Milliseconds"/>
            and <see cref="F:KGySoft.Json.JsonTimeFormat.Ticks"/>) can be ambiguous. Though a "sanity check" is applied for parsing such values use a
            specific option whenever possible.</para>
            </summary>
        </member>
        <member name="F:KGySoft.Json.JsonTimeFormat.Milliseconds">
            <summary>
            Represents a time in milliseconds. This is conform with the difference of
            two <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date" target="_blank">Date</a> instances in JavaScript.
            </summary>
        </member>
        <member name="F:KGySoft.Json.JsonTimeFormat.Ticks">
            <summary>
            Represents a time in 100 nanoseconds. This is conform with the constructor of the .NET <see cref="T:System.TimeSpan"/>/<see cref="!:TimeOnly"/>
            types and their <c>Ticks</c> property.
            </summary>
        </member>
        <member name="F:KGySoft.Json.JsonTimeFormat.Text">
            <summary>
            Represents a time as a textual value. This is conform with the regular string representation of the <see cref="T:System.TimeSpan"/>/<see cref="!:TimeOnly"/> types.
            </summary>
        </member>
        <member name="T:KGySoft.Json.JsonValueType">
            <summary>
            Represents the possible values of the <see cref="P:KGySoft.Json.JsonValue.Type"/> property of a <see cref="T:KGySoft.Json.JsonValue"/> instance.
            </summary>
        </member>
        <member name="F:KGySoft.Json.JsonValueType.UnknownLiteral">
            <summary>
            The <see cref="T:KGySoft.Json.JsonValue"/> contains an unknown JSON literal.
            Can occur when parsing an invalid JSON or when the <see cref="T:KGySoft.Json.JsonValue"/> was created by the <see cref="M:KGySoft.Json.JsonValue.CreateLiteralUnchecked(System.String)">CreateLiteralUnchecked</see> method.
            If the <see cref="P:KGySoft.Json.JsonValue.Type"/> property of a <see cref="T:KGySoft.Json.JsonValue"/> instance is <see cref="F:KGySoft.Json.JsonValueType.UnknownLiteral"/>,
            then both <see cref="P:KGySoft.Json.JsonValue.AsLiteral"/> and <see cref="O:KGySoft.Json.JsonValue.ToString">ToString</see> return the actual value.
            </summary>
        </member>
        <member name="F:KGySoft.Json.JsonValueType.Undefined">
            <summary>
            Represents the <c>undefined</c> type in JavaScript.
            This is the <see cref="P:KGySoft.Json.JsonValue.Type"/> of a default <see cref="T:KGySoft.Json.JsonValue"/> instance and also the <see cref="F:KGySoft.Json.JsonValue.Undefined"/> field.
            If the <see cref="P:KGySoft.Json.JsonValue.Type"/> property of a <see cref="T:KGySoft.Json.JsonValue"/> instance is <see cref="F:KGySoft.Json.JsonValueType.Undefined"/>,
            then <see cref="P:KGySoft.Json.JsonValue.IsUndefined"/> returns <see langword="true"/>,
            and both <see cref="P:KGySoft.Json.JsonValue.AsLiteral"/> and <see cref="O:KGySoft.Json.JsonValue.ToString">ToString</see> return <c>undefined</c>.
            </summary>
        </member>
        <member name="F:KGySoft.Json.JsonValueType.Null">
            <summary>
            Represents the <c>null</c> type in JavaScript.
            This is the <see cref="P:KGySoft.Json.JsonValue.Type"/> of the <see cref="F:KGySoft.Json.JsonValue.Null"/> field.
            If the <see cref="P:KGySoft.Json.JsonValue.Type"/> property of a <see cref="T:KGySoft.Json.JsonValue"/> instance is <see cref="F:KGySoft.Json.JsonValueType.Null"/>,
            then <see cref="P:KGySoft.Json.JsonValue.IsNull"/> returns <see langword="true"/>,
            and both <see cref="P:KGySoft.Json.JsonValue.AsLiteral"/> and <see cref="O:KGySoft.Json.JsonValue.ToString">ToString</see> return <c>null</c>.
            </summary>
        </member>
        <member name="F:KGySoft.Json.JsonValueType.Boolean">
            <summary>
            Represents the <c>Boolean</c> type in JavaScript.
            This is the <see cref="P:KGySoft.Json.JsonValue.Type"/> of the <see cref="F:KGySoft.Json.JsonValue.True"/> and <see cref="F:KGySoft.Json.JsonValue.False"/> fields.
            If the <see cref="P:KGySoft.Json.JsonValue.Type"/> property of a <see cref="T:KGySoft.Json.JsonValue"/> instance is <see cref="F:KGySoft.Json.JsonValueType.Boolean"/>,
            then <see cref="P:KGySoft.Json.JsonValue.AsBoolean"/> returns the actual value,
            and both <see cref="P:KGySoft.Json.JsonValue.AsLiteral"/> and <see cref="O:KGySoft.Json.JsonValue.ToString">ToString</see> return its string representation.
            </summary>
        </member>
        <member name="F:KGySoft.Json.JsonValueType.Number">
            <summary>
            Represents the <c>Number</c> type in JavaScript. The actual number is always stored as a string in <see cref="T:KGySoft.Json.JsonValue"/>.
            If the <see cref="P:KGySoft.Json.JsonValue.Type"/> property of a <see cref="T:KGySoft.Json.JsonValue"/> instance is <see cref="F:KGySoft.Json.JsonValueType.Number"/>,
            then <see cref="P:KGySoft.Json.JsonValue.AsNumber"/> returns the represented value using the same precision as JavaScript does,
            whereas <see cref="P:KGySoft.Json.JsonValue.AsLiteral"/> and <see cref="O:KGySoft.Json.JsonValue.ToString">ToString</see> return the actual underlying value preserving the original precision.
            <br/>See also the <strong>Remarks</strong> section of the <see cref="P:KGySoft.Json.JsonValue.AsNumber"/> property for details.
            </summary>
        </member>
        <member name="F:KGySoft.Json.JsonValueType.String">
            <summary>
            Represents the <c>String</c> type in JavaScript.
            If the <see cref="P:KGySoft.Json.JsonValue.Type"/> property of a <see cref="T:KGySoft.Json.JsonValue"/> instance is <see cref="F:KGySoft.Json.JsonValueType.String"/>,
            then both <see cref="P:KGySoft.Json.JsonValue.AsString"/> and <see cref="P:KGySoft.Json.JsonValue.AsLiteral"/> return the actual string,
            wheres <see cref="O:KGySoft.Json.JsonValue.ToString">ToString</see> returns the JSON representation with the added quotes and possible escape characters.
            </summary>
        </member>
        <member name="F:KGySoft.Json.JsonValueType.Array">
            <summary>
            Represents the <c>Array</c> type in JavaScript.
            If the <see cref="P:KGySoft.Json.JsonValue.Type"/> property of a <see cref="T:KGySoft.Json.JsonValue"/> instance is <see cref="F:KGySoft.Json.JsonValueType.Array"/>,
            then <see cref="P:KGySoft.Json.JsonValue.AsArray"/> returns a non-<see langword="null"/> instance, the elements can be accessed by
            the <see cref="T:System.Int32">int</see> value <see cref="P:KGySoft.Json.JsonValue.Item(System.Int32)">indexer</see>,
            and <see cref="O:KGySoft.Json.JsonValue.ToString">ToString</see> returns the JSON representation of the array.
            </summary>
        </member>
        <member name="F:KGySoft.Json.JsonValueType.Object">
            <summary>
            Represents the <c>Object</c> type in JavaScript.
            If the <see cref="P:KGySoft.Json.JsonValue.Type"/> property of a <see cref="T:KGySoft.Json.JsonValue"/> instance is <see cref="F:KGySoft.Json.JsonValueType.Object"/>,
            then <see cref="P:KGySoft.Json.JsonValue.AsObject"/> returns a non-<see langword="null"/> instance, the property values can be accessed by
            the <see cref="T:System.String">string</see> value <see cref="P:KGySoft.Json.JsonValue.Item(System.String)">indexer</see>,
            and <see cref="O:KGySoft.Json.JsonValue.ToString">ToString</see> returns the JSON representation of the object.
            </summary>
        </member>
        <member name="T:KGySoft.Json.DateTimeExtensions">
            <summary>
            Helper methods for parsing <see cref="T:System.DateTime"/>, <see cref="T:System.DateTimeOffset"/> and <see cref="T:System.TimeSpan"/> instances.
            </summary>
        </member>
        <member name="T:KGySoft.Json.JsonValueExtensions">
            <summary>
            Provides extension methods for <see cref="T:KGySoft.Json.JsonValue"/> conversions.
            </summary>
        </member>
        <member name="M:KGySoft.Json.JsonValueExtensions.AsBoolean(KGySoft.Json.JsonValue@,KGySoft.Json.JsonValueType)">
            <summary>
            Gets the specified <see cref="T:KGySoft.Json.JsonValue"/> as a <see cref="T:System.Boolean"/> value if <paramref name="expectedType"/> is <see cref="F:KGySoft.Json.JsonValueType.Undefined"/>
            or matches the <see cref="P:KGySoft.Json.JsonValue.Type"/> property of the specified <paramref name="json"/> parameter and it can be converted to <see cref="T:System.Boolean"/>;
            otherwise, returns <see langword="null"/>.
            This method allows interpreting numeric values as booleans where nonzero values are <see langword="true"/>.
            </summary>
            <param name="json">The <see cref="T:KGySoft.Json.JsonValue"/> to be converted to <see cref="T:System.Boolean"/>.</param>
            <param name="expectedType">The expected <see cref="P:KGySoft.Json.JsonValue.Type"/> of the specified <paramref name="json"/> parameter,
            or <see cref="F:KGySoft.Json.JsonValueType.Undefined"/> to allow any type. This parameter is optional.
            <br/>Default value: <see cref="F:KGySoft.Json.JsonValueType.Undefined"/>.</param>
            <returns>A <see cref="T:System.Boolean"/> value if <paramref name="json"/> could be converted; otherwise, <see langword="null"/>.</returns>
        </member>
        <member name="M:KGySoft.Json.JsonValueExtensions.TryGetBoolean(KGySoft.Json.JsonValue@,System.Boolean@,KGySoft.Json.JsonValueType)">
            <summary>
            Tries to get the specified <see cref="T:KGySoft.Json.JsonValue"/> as a <see cref="T:System.Boolean"/> value if <paramref name="expectedType"/> is <see cref="F:KGySoft.Json.JsonValueType.Undefined"/>
            or matches the <see cref="P:KGySoft.Json.JsonValue.Type"/> property of the specified <paramref name="json"/> parameter.
            This method allows interpreting numeric values as booleans where nonzero values are <see langword="true"/>.
            </summary>
            <param name="json">The <see cref="T:KGySoft.Json.JsonValue"/> to be converted to <see cref="T:System.Boolean"/>.</param>
            <param name="value">When this method returns, the result of the conversion, if <paramref name="json"/> could be converted;
            otherwise, <see langword="false"/>. This parameter is passed uninitialized.</param>
            <param name="expectedType">The expected <see cref="P:KGySoft.Json.JsonValue.Type"/> of the specified <paramref name="json"/> parameter,
            or <see cref="F:KGySoft.Json.JsonValueType.Undefined"/> to allow any type. This parameter is optional.
            <br/>Default value: <see cref="F:KGySoft.Json.JsonValueType.Undefined"/>.</param>
            <returns><see langword="true"/> if the specified <see cref="T:KGySoft.Json.JsonValue"/> could be converted; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:KGySoft.Json.JsonValueExtensions.GetBooleanOrDefault(KGySoft.Json.JsonValue@,System.Boolean,KGySoft.Json.JsonValueType)">
            <summary>
            Gets the specified <see cref="T:KGySoft.Json.JsonValue"/> as a <see cref="T:System.Boolean"/> value if <paramref name="expectedType"/> is <see cref="F:KGySoft.Json.JsonValueType.Undefined"/>
            or matches the <see cref="P:KGySoft.Json.JsonValue.Type"/> property of the specified <paramref name="json"/> parameter and it can be converted to <see cref="T:System.Boolean"/>;
            otherwise, returns <paramref name="defaultValue"/>.
            This method allows interpreting numeric values as booleans where nonzero values are <see langword="true"/>.
            </summary>
            <param name="json">The <see cref="T:KGySoft.Json.JsonValue"/> to be converted to <see cref="T:System.Boolean"/>.</param>
            <param name="defaultValue">The value to be returned if the conversion fails. This parameter is optional.
            <br/>Default value: <see langword="false"/>.</param>
            <param name="expectedType">The expected <see cref="P:KGySoft.Json.JsonValue.Type"/> of the specified <paramref name="json"/> parameter,
            or <see cref="F:KGySoft.Json.JsonValueType.Undefined"/> to allow any type. This parameter is optional.
            <br/>Default value: <see cref="F:KGySoft.Json.JsonValueType.Undefined"/>.</param>
            <returns>A <see cref="T:System.Boolean"/> value if <paramref name="json"/> could be converted; otherwise, <paramref name="defaultValue"/>.</returns>
        </member>
        <member name="M:KGySoft.Json.JsonValueExtensions.GetBooleanOrDefault(KGySoft.Json.JsonValue@,KGySoft.Json.JsonValueType)">
            <summary>
            Gets the specified <see cref="T:KGySoft.Json.JsonValue"/> as a <see cref="T:System.Boolean"/> value if <paramref name="expectedType"/> is <see cref="F:KGySoft.Json.JsonValueType.Undefined"/>
            or matches the <see cref="P:KGySoft.Json.JsonValue.Type"/> property of the specified <paramref name="json"/> parameter and it can be converted to <see cref="T:System.Boolean"/>;
            otherwise, returns <see langword="false"/>, which is the default value of <see cref="T:System.Boolean"/>.
            This method allows interpreting numeric values as booleans where nonzero values are <see langword="true"/>.
            </summary>
            <param name="json">The <see cref="T:KGySoft.Json.JsonValue"/> to be converted to <see cref="T:System.Boolean"/>.</param>
            <param name="expectedType">The expected <see cref="P:KGySoft.Json.JsonValue.Type"/> of the specified <paramref name="json"/> parameter,
            or <see cref="F:KGySoft.Json.JsonValueType.Undefined"/> to allow any type..</param>
            <returns>A <see cref="T:System.Boolean"/> value if <paramref name="json"/> could be converted; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:KGySoft.Json.JsonValueExtensions.ToJson(System.Boolean)">
            <summary>
            Converts the specified <paramref name="value"/> to <see cref="T:KGySoft.Json.JsonValue"/>.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A <see cref="T:KGySoft.Json.JsonValue"/> instance that is the JSON representation of the specified <paramref name="value"/>.</returns>
        </member>
        <member name="M:KGySoft.Json.JsonValueExtensions.ToJson(System.Nullable{System.Boolean})">
            <summary>
            Converts the specified <paramref name="value"/> to <see cref="T:KGySoft.Json.JsonValue"/>.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A <see cref="T:KGySoft.Json.JsonValue"/> instance that is the JSON representation of the specified <paramref name="value"/>.</returns>
        </member>
        <member name="M:KGySoft.Json.JsonValueExtensions.TryGetByte(KGySoft.Json.JsonValue@,System.Byte@,KGySoft.Json.JsonValueType)">
            <summary>
            Tries to get the specified <see cref="T:KGySoft.Json.JsonValue"/> as a <see cref="T:System.Byte"/> value if <paramref name="expectedType"/> is <see cref="F:KGySoft.Json.JsonValueType.Undefined"/>
            or matches the <see cref="P:KGySoft.Json.JsonValue.Type"/> property of the specified <paramref name="json"/> parameter.
            </summary>
            <param name="json">The <see cref="T:KGySoft.Json.JsonValue"/> to be converted to <see cref="T:System.Byte"/>.</param>
            <param name="value">When this method returns, the result of the conversion, if <paramref name="json"/> could be converted;
            otherwise, <c>0</c>. This parameter is passed uninitialized.</param>
            <param name="expectedType">The expected <see cref="P:KGySoft.Json.JsonValue.Type"/> of the specified <paramref name="json"/> parameter,
            or <see cref="F:KGySoft.Json.JsonValueType.Undefined"/> to allow any type. This parameter is optional.
            <br/>Default value: <see cref="F:KGySoft.Json.JsonValueType.Undefined"/>.</param>
            <returns><see langword="true"/> if the specified <see cref="T:KGySoft.Json.JsonValue"/> could be converted; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:KGySoft.Json.JsonValueExtensions.AsByte(KGySoft.Json.JsonValue@,KGySoft.Json.JsonValueType)">
            <summary>
            Gets the specified <see cref="T:KGySoft.Json.JsonValue"/> as a <see cref="T:System.Byte"/> value if <paramref name="expectedType"/> is <see cref="F:KGySoft.Json.JsonValueType.Undefined"/>
            or matches the <see cref="P:KGySoft.Json.JsonValue.Type"/> property of the specified <paramref name="json"/> parameter and it can be converted to <see cref="T:System.Byte"/>;
            otherwise, returns <see langword="null"/>.
            </summary>
            <param name="json">The <see cref="T:KGySoft.Json.JsonValue"/> to be converted to <see cref="T:System.Byte"/>.</param>
            <param name="expectedType">The expected <see cref="P:KGySoft.Json.JsonValue.Type"/> of the specified <paramref name="json"/> parameter,
            or <see cref="F:KGySoft.Json.JsonValueType.Undefined"/> to allow any type. This parameter is optional.
            <br/>Default value: <see cref="F:KGySoft.Json.JsonValueType.Undefined"/>.</param>
            <returns>A <see cref="T:System.Byte"/> value if <paramref name="json"/> could be converted; otherwise, <see langword="null"/>.</returns>
        </member>
        <member name="M:KGySoft.Json.JsonValueExtensions.GetByteOrDefault(KGySoft.Json.JsonValue@,System.Byte,KGySoft.Json.JsonValueType)">
            <summary>
            Gets the specified <see cref="T:KGySoft.Json.JsonValue"/> as a <see cref="T:System.Byte"/> value if <paramref name="expectedType"/> is <see cref="F:KGySoft.Json.JsonValueType.Undefined"/>
            or matches the <see cref="P:KGySoft.Json.JsonValue.Type"/> property of the specified <paramref name="json"/> parameter and it can be converted to <see cref="T:System.Byte"/>;
            otherwise, returns <paramref name="defaultValue"/>.
            </summary>
            <param name="json">The <see cref="T:KGySoft.Json.JsonValue"/> to be converted to <see cref="T:System.Byte"/>.</param>
            <param name="defaultValue">The value to be returned if the conversion fails. This parameter is optional.
            <br/>Default value: <c>0</c>.</param>
            <param name="expectedType">The expected <see cref="P:KGySoft.Json.JsonValue.Type"/> of the specified <paramref name="json"/> parameter,
            or <see cref="F:KGySoft.Json.JsonValueType.Undefined"/> to allow any type. This parameter is optional.
            <br/>Default value: <see cref="F:KGySoft.Json.JsonValueType.Undefined"/>.</param>
            <returns>A <see cref="T:System.Byte"/> value if <paramref name="json"/> could be converted; otherwise, <paramref name="defaultValue"/>.</returns>
        </member>
        <member name="M:KGySoft.Json.JsonValueExtensions.GetByteOrDefault(KGySoft.Json.JsonValue@,KGySoft.Json.JsonValueType)">
            <summary>
            Gets the specified <see cref="T:KGySoft.Json.JsonValue"/> as a <see cref="T:System.Byte"/> value if <paramref name="expectedType"/> is <see cref="F:KGySoft.Json.JsonValueType.Undefined"/>
            or matches the <see cref="P:KGySoft.Json.JsonValue.Type"/> property of the specified <paramref name="json"/> parameter and it can be converted to <see cref="T:System.Byte"/>;
            otherwise, returns <c>0</c>.
            </summary>
            <param name="json">The <see cref="T:KGySoft.Json.JsonValue"/> to be converted to <see cref="T:System.Byte"/>.</param>
            <param name="expectedType">The expected <see cref="P:KGySoft.Json.JsonValue.Type"/> of the specified <paramref name="json"/> parameter,
            or <see cref="F:KGySoft.Json.JsonValueType.Undefined"/> to allow any type.</param>
            <returns>A <see cref="T:System.Byte"/> value if <paramref name="json"/> could be converted; otherwise, <c>0</c>.</returns>
        </member>
        <member name="M:KGySoft.Json.JsonValueExtensions.ToJson(System.Byte,System.Boolean)">
            <summary>
            Converts the specified <paramref name="value"/> to <see cref="T:KGySoft.Json.JsonValue"/>.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="asString"><see langword="true"/> to convert the <paramref name="value"/> to a <see cref="T:KGySoft.Json.JsonValue"/>
            with <see cref="F:KGySoft.Json.JsonValueType.String"/>&#160;<see cref="P:KGySoft.Json.JsonValue.Type"/>; otherwise, <see langword="false"/>. This parameter is optional.
            <br/>Default value: <see langword="false"/>.</param>
            <returns>A <see cref="T:KGySoft.Json.JsonValue"/> instance that is the JSON representation of the specified <paramref name="value"/>.</returns>
        </member>
        <member name="M:KGySoft.Json.JsonValueExtensions.ToJson(System.Nullable{System.Byte},System.Boolean)">
            <summary>
            Converts the specified <paramref name="value"/> to <see cref="T:KGySoft.Json.JsonValue"/>.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="asString"><see langword="true"/> to convert the <paramref name="value"/> to a <see cref="T:KGySoft.Json.JsonValue"/>
            with <see cref="F:KGySoft.Json.JsonValueType.String"/>&#160;<see cref="P:KGySoft.Json.JsonValue.Type"/>; otherwise, <see langword="false"/>. This parameter is optional.
            <br/>Default value: <see langword="false"/>.</param>
            <returns>A <see cref="T:KGySoft.Json.JsonValue"/> instance that is the JSON representation of the specified <paramref name="value"/>.</returns>
        </member>
        <member name="M:KGySoft.Json.JsonValueExtensions.TryGetSByte(KGySoft.Json.JsonValue@,System.SByte@,KGySoft.Json.JsonValueType)">
            <summary>
            Tries to get the specified <see cref="T:KGySoft.Json.JsonValue"/> as an <see cref="T:System.SByte"/> value if <paramref name="expectedType"/> is <see cref="F:KGySoft.Json.JsonValueType.Undefined"/>
            or matches the <see cref="P:KGySoft.Json.JsonValue.Type"/> property of the specified <paramref name="json"/> parameter.
            </summary>
            <param name="json">The <see cref="T:KGySoft.Json.JsonValue"/> to be converted to <see cref="T:System.SByte"/>.</param>
            <param name="value">When this method returns, the result of the conversion, if <paramref name="json"/> could be converted;
            otherwise, <c>0</c>. This parameter is passed uninitialized.</param>
            <param name="expectedType">The expected <see cref="P:KGySoft.Json.JsonValue.Type"/> of the specified <paramref name="json"/> parameter,
            or <see cref="F:KGySoft.Json.JsonValueType.Undefined"/> to allow any type. This parameter is optional.
            <br/>Default value: <see cref="F:KGySoft.Json.JsonValueType.Undefined"/>.</param>
            <returns><see langword="true"/> if the specified <see cref="T:KGySoft.Json.JsonValue"/> could be converted; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:KGySoft.Json.JsonValueExtensions.AsSByte(KGySoft.Json.JsonValue@,KGySoft.Json.JsonValueType)">
            <summary>
            Gets the specified <see cref="T:KGySoft.Json.JsonValue"/> as an <see cref="T:System.SByte"/> value if <paramref name="expectedType"/> is <see cref="F:KGySoft.Json.JsonValueType.Undefined"/>
            or matches the <see cref="P:KGySoft.Json.JsonValue.Type"/> property of the specified <paramref name="json"/> parameter and it can be converted to <see cref="T:System.SByte"/>;
            otherwise, returns <see langword="null"/>.
            </summary>
            <param name="json">The <see cref="T:KGySoft.Json.JsonValue"/> to be converted to <see cref="T:System.SByte"/>.</param>
            <param name="expectedType">The expected <see cref="P:KGySoft.Json.JsonValue.Type"/> of the specified <paramref name="json"/> parameter,
            or <see cref="F:KGySoft.Json.JsonValueType.Undefined"/> to allow any type. This parameter is optional.
            <br/>Default value: <see cref="F:KGySoft.Json.JsonValueType.Undefined"/>.</param>
            <returns>An <see cref="T:System.SByte"/> value if <paramref name="json"/> could be converted; otherwise, <see langword="null"/>.</returns>
        </member>
        <member name="M:KGySoft.Json.JsonValueExtensions.GetSByteOrDefault(KGySoft.Json.JsonValue@,System.SByte,KGySoft.Json.JsonValueType)">
            <summary>
            Gets the specified <see cref="T:KGySoft.Json.JsonValue"/> as an <see cref="T:System.SByte"/> value if <paramref name="expectedType"/> is <see cref="F:KGySoft.Json.JsonValueType.Undefined"/>
            or matches the <see cref="P:KGySoft.Json.JsonValue.Type"/> property of the specified <paramref name="json"/> parameter and it can be converted to <see cref="T:System.SByte"/>;
            otherwise, returns <paramref name="defaultValue"/>.
            </summary>
            <param name="json">The <see cref="T:KGySoft.Json.JsonValue"/> to be converted to <see cref="T:System.SByte"/>.</param>
            <param name="defaultValue">The value to be returned if the conversion fails. This parameter is optional.
            <br/>Default value: <c>0</c>.</param>
            <param name="expectedType">The expected <see cref="P:KGySoft.Json.JsonValue.Type"/> of the specified <paramref name="json"/> parameter,
            or <see cref="F:KGySoft.Json.JsonValueType.Undefined"/> to allow any type. This parameter is optional.
            <br/>Default value: <see cref="F:KGySoft.Json.JsonValueType.Undefined"/>.</param>
            <returns>An <see cref="T:System.SByte"/> value if <paramref name="json"/> could be converted; otherwise, <paramref name="defaultValue"/>.</returns>
        </member>
        <member name="M:KGySoft.Json.JsonValueExtensions.GetSByteOrDefault(KGySoft.Json.JsonValue@,KGySoft.Json.JsonValueType)">
            <summary>
            Gets the specified <see cref="T:KGySoft.Json.JsonValue"/> as an <see cref="T:System.SByte"/> value if <paramref name="expectedType"/> is <see cref="F:KGySoft.Json.JsonValueType.Undefined"/>
            or matches the <see cref="P:KGySoft.Json.JsonValue.Type"/> property of the specified <paramref name="json"/> parameter and it can be converted to <see cref="T:System.SByte"/>;
            otherwise, returns <c>0</c>.
            </summary>
            <param name="json">The <see cref="T:KGySoft.Json.JsonValue"/> to be converted to <see cref="T:System.SByte"/>.</param>
            <param name="expectedType">The expected <see cref="P:KGySoft.Json.JsonValue.Type"/> of the specified <paramref name="json"/> parameter,
            or <see cref="F:KGySoft.Json.JsonValueType.Undefined"/> to allow any type. This parameter is optional.
            <br/>Default value: <see cref="F:KGySoft.Json.JsonValueType.Undefined"/>.</param>
            <returns>An <see cref="T:System.SByte"/> value if <paramref name="json"/> could be converted; otherwise, <c>0</c>.</returns>
        </member>
        <member name="M:KGySoft.Json.JsonValueExtensions.ToJson(System.SByte,System.Boolean)">
            <summary>
            Converts the specified <paramref name="value"/> to <see cref="T:KGySoft.Json.JsonValue"/>.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="asString"><see langword="true"/> to convert the <paramref name="value"/> to a <see cref="T:KGySoft.Json.JsonValue"/>
            with <see cref="F:KGySoft.Json.JsonValueType.String"/>&#160;<see cref="P:KGySoft.Json.JsonValue.Type"/>; otherwise, <see langword="false"/>.</param>
            <returns>A <see cref="T:KGySoft.Json.JsonValue"/> instance that is the JSON representation of the specified <paramref name="value"/>. This parameter is optional.
            <br/>Default value: <see langword="false"/>.</returns>
        </member>
        <member name="M:KGySoft.Json.JsonValueExtensions.ToJson(System.Nullable{System.SByte},System.Boolean)">
            <summary>
            Converts the specified <paramref name="value"/> to <see cref="T:KGySoft.Json.JsonValue"/>.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="asString"><see langword="true"/> to convert the <paramref name="value"/> to a <see cref="T:KGySoft.Json.JsonValue"/>
            with <see cref="F:KGySoft.Json.JsonValueType.String"/>&#160;<see cref="P:KGySoft.Json.JsonValue.Type"/>; otherwise, <see langword="false"/>.</param>
            <returns>A <see cref="T:KGySoft.Json.JsonValue"/> instance that is the JSON representation of the specified <paramref name="value"/>. This parameter is optional.
            <br/>Default value: <see langword="false"/>.</returns>
        </member>
        <member name="M:KGySoft.Json.JsonValueExtensions.TryGetInt16(KGySoft.Json.JsonValue@,System.Int16@,KGySoft.Json.JsonValueType)">
            <summary>
            Tries to get the specified <see cref="T:KGySoft.Json.JsonValue"/> as an <see cref="T:System.Int16"/> value if <paramref name="expectedType"/> is <see cref="F:KGySoft.Json.JsonValueType.Undefined"/>
            or matches the <see cref="P:KGySoft.Json.JsonValue.Type"/> property of the specified <paramref name="json"/> parameter.
            </summary>
            <param name="json">The <see cref="T:KGySoft.Json.JsonValue"/> to be converted to <see cref="T:System.Int16"/>.</param>
            <param name="value">When this method returns, the result of the conversion, if <paramref name="json"/> could be converted;
            otherwise, <c>0</c>. This parameter is passed uninitialized.</param>
            <param name="expectedType">The expected <see cref="P:KGySoft.Json.JsonValue.Type"/> of the specified <paramref name="json"/> parameter,
            or <see cref="F:KGySoft.Json.JsonValueType.Undefined"/> to allow any type. This parameter is optional.
            <br/>Default value: <see cref="F:KGySoft.Json.JsonValueType.Undefined"/>.</param>
            <returns><see langword="true"/> if the specified <see cref="T:KGySoft.Json.JsonValue"/> could be converted; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:KGySoft.Json.JsonValueExtensions.AsInt16(KGySoft.Json.JsonValue@,KGySoft.Json.JsonValueType)">
            <summary>
            Gets the specified <see cref="T:KGySoft.Json.JsonValue"/> as an <see cref="T:System.Int16"/> value if <paramref name="expectedType"/> is <see cref="F:KGySoft.Json.JsonValueType.Undefined"/>
            or matches the <see cref="P:KGySoft.Json.JsonValue.Type"/> property of the specified <paramref name="json"/> parameter and it can be converted to <see cref="T:System.Int16"/>;
            otherwise, returns <see langword="null"/>.
            </summary>
            <param name="json">The <see cref="T:KGySoft.Json.JsonValue"/> to be converted to <see cref="T:System.Int16"/>.</param>
            <param name="expectedType">The expected <see cref="P:KGySoft.Json.JsonValue.Type"/> of the specified <paramref name="json"/> parameter,
            or <see cref="F:KGySoft.Json.JsonValueType.Undefined"/> to allow any type. This parameter is optional.
            <br/>Default value: <see cref="F:KGySoft.Json.JsonValueType.Undefined"/>.</param>
            <returns>An <see cref="T:System.Int16"/> value if <paramref name="json"/> could be converted; otherwise, <see langword="null"/>.</returns>
        </member>
        <member name="M:KGySoft.Json.JsonValueExtensions.GetInt16OrDefault(KGySoft.Json.JsonValue@,System.Int16,KGySoft.Json.JsonValueType)">
            <summary>
            Gets the specified <see cref="T:KGySoft.Json.JsonValue"/> as an <see cref="T:System.Int16"/> value if <paramref name="expectedType"/> is <see cref="F:KGySoft.Json.JsonValueType.Undefined"/>
            or matches the <see cref="P:KGySoft.Json.JsonValue.Type"/> property of the specified <paramref name="json"/> parameter and it can be converted to <see cref="T:System.Int16"/>;
            otherwise, returns <paramref name="defaultValue"/>.
            </summary>
            <param name="json">The <see cref="T:KGySoft.Json.JsonValue"/> to be converted to <see cref="T:System.Int16"/>.</param>
            <param name="defaultValue">The value to be returned if the conversion fails. This parameter is optional.
            <br/>Default value: <c>0</c>.</param>
            <param name="expectedType">The expected <see cref="P:KGySoft.Json.JsonValue.Type"/> of the specified <paramref name="json"/> parameter,
            or <see cref="F:KGySoft.Json.JsonValueType.Undefined"/> to allow any type. This parameter is optional.
            <br/>Default value: <see cref="F:KGySoft.Json.JsonValueType.Undefined"/>.</param>
            <returns>An <see cref="T:System.Int16"/> value if <paramref name="json"/> could be converted; otherwise, <paramref name="defaultValue"/>.</returns>
        </member>
        <member name="M:KGySoft.Json.JsonValueExtensions.GetInt16OrDefault(KGySoft.Json.JsonValue@,KGySoft.Json.JsonValueType)">
            <summary>
            Gets the specified <see cref="T:KGySoft.Json.JsonValue"/> as an <see cref="T:System.Int16"/> value if <paramref name="expectedType"/> is <see cref="F:KGySoft.Json.JsonValueType.Undefined"/>
            or matches the <see cref="P:KGySoft.Json.JsonValue.Type"/> property of the specified <paramref name="json"/> parameter and it can be converted to <see cref="T:System.Int16"/>;
            otherwise, returns <c>0</c>.
            </summary>
            <param name="json">The <see cref="T:KGySoft.Json.JsonValue"/> to be converted to <see cref="T:System.Int16"/>.</param>
            <param name="expectedType">The expected <see cref="P:KGySoft.Json.JsonValue.Type"/> of the specified <paramref name="json"/> parameter,
            or <see cref="F:KGySoft.Json.JsonValueType.Undefined"/> to allow any type..</param>
            <returns>An <see cref="T:System.Int16"/> value if <paramref name="json"/> could be converted; otherwise, <c>0</c>.</returns>
        </member>
        <member name="M:KGySoft.Json.JsonValueExtensions.ToJson(System.Int16,System.Boolean)">
            <summary>
            Converts the specified <paramref name="value"/> to <see cref="T:KGySoft.Json.JsonValue"/>.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="asString"><see langword="true"/> to convert the <paramref name="value"/> to a <see cref="T:KGySoft.Json.JsonValue"/>
            with <see cref="F:KGySoft.Json.JsonValueType.String"/>&#160;<see cref="P:KGySoft.Json.JsonValue.Type"/>; otherwise, <see langword="false"/>. This parameter is optional.
            <br/>Default value: <see langword="false"/>.</param>
            <returns>A <see cref="T:KGySoft.Json.JsonValue"/> instance that is the JSON representation of the specified <paramref name="value"/>.</returns>
        </member>
        <member name="M:KGySoft.Json.JsonValueExtensions.ToJson(System.Nullable{System.Int16},System.Boolean)">
            <summary>
            Converts the specified <paramref name="value"/> to <see cref="T:KGySoft.Json.JsonValue"/>.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="asString"><see langword="true"/> to convert the <paramref name="value"/> to a <see cref="T:KGySoft.Json.JsonValue"/>
            with <see cref="F:KGySoft.Json.JsonValueType.String"/>&#160;<see cref="P:KGySoft.Json.JsonValue.Type"/>; otherwise, <see langword="false"/>. This parameter is optional.
            <br/>Default value: <see langword="false"/>.</param>
            <returns>A <see cref="T:KGySoft.Json.JsonValue"/> instance that is the JSON representation of the specified <paramref name="value"/>.</returns>
        </member>
        <member name="M:KGySoft.Json.JsonValueExtensions.TryGetUInt16(KGySoft.Json.JsonValue@,System.UInt16@,KGySoft.Json.JsonValueType)">
            <summary>
            Tries to get the specified <see cref="T:KGySoft.Json.JsonValue"/> as an <see cref="T:System.UInt16"/> value if <paramref name="expectedType"/> is <see cref="F:KGySoft.Json.JsonValueType.Undefined"/>
            or matches the <see cref="P:KGySoft.Json.JsonValue.Type"/> property of the specified <paramref name="json"/> parameter.
            </summary>
            <param name="json">The <see cref="T:KGySoft.Json.JsonValue"/> to be converted to <see cref="T:System.UInt16"/>.</param>
            <param name="value">When this method returns, the result of the conversion, if <paramref name="json"/> could be converted;
            otherwise, <c>0</c>. This parameter is passed uninitialized.</param>
            <param name="expectedType">The expected <see cref="P:KGySoft.Json.JsonValue.Type"/> of the specified <paramref name="json"/> parameter,
            or <see cref="F:KGySoft.Json.JsonValueType.Undefined"/> to allow any type. This parameter is optional.
            <br/>Default value: <see cref="F:KGySoft.Json.JsonValueType.Undefined"/>.</param>
            <returns><see langword="true"/> if the specified <see cref="T:KGySoft.Json.JsonValue"/> could be converted; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:KGySoft.Json.JsonValueExtensions.AsUInt16(KGySoft.Json.JsonValue@,KGySoft.Json.JsonValueType)">
            <summary>
            Gets the specified <see cref="T:KGySoft.Json.JsonValue"/> as an <see cref="T:System.UInt16"/> value if <paramref name="expectedType"/> is <see cref="F:KGySoft.Json.JsonValueType.Undefined"/>
            or matches the <see cref="P:KGySoft.Json.JsonValue.Type"/> property of the specified <paramref name="json"/> parameter and it can be converted to <see cref="T:System.UInt16"/>;
            otherwise, returns <see langword="null"/>.
            </summary>
            <param name="json">The <see cref="T:KGySoft.Json.JsonValue"/> to be converted to <see cref="T:System.UInt16"/>.</param>
            <param name="expectedType">The expected <see cref="P:KGySoft.Json.JsonValue.Type"/> of the specified <paramref name="json"/> parameter,
            or <see cref="F:KGySoft.Json.JsonValueType.Undefined"/> to allow any type. This parameter is optional.
            <br/>Default value: <see cref="F:KGySoft.Json.JsonValueType.Undefined"/>.</param>
            <returns>An <see cref="T:System.UInt16"/> value if <paramref name="json"/> could be converted; otherwise, <see langword="null"/>.</returns>
        </member>
        <member name="M:KGySoft.Json.JsonValueExtensions.GetUInt16OrDefault(KGySoft.Json.JsonValue@,System.UInt16,KGySoft.Json.JsonValueType)">
            <summary>
            Gets the specified <see cref="T:KGySoft.Json.JsonValue"/> as an <see cref="T:System.UInt16"/> value if <paramref name="expectedType"/> is <see cref="F:KGySoft.Json.JsonValueType.Undefined"/>
            or matches the <see cref="P:KGySoft.Json.JsonValue.Type"/> property of the specified <paramref name="json"/> parameter and it can be converted to <see cref="T:System.UInt16"/>;
            otherwise, returns <paramref name="defaultValue"/>.
            </summary>
            <param name="json">The <see cref="T:KGySoft.Json.JsonValue"/> to be converted to <see cref="T:System.UInt16"/>.</param>
            <param name="defaultValue">The value to be returned if the conversion fails. This parameter is optional.
            <br/>Default value: <c>0</c>.</param>
            <param name="expectedType">The expected <see cref="P:KGySoft.Json.JsonValue.Type"/> of the specified <paramref name="json"/> parameter,
            or <see cref="F:KGySoft.Json.JsonValueType.Undefined"/> to allow any type. This parameter is optional.
            <br/>Default value: <see cref="F:KGySoft.Json.JsonValueType.Undefined"/>.</param>
            <returns>An <see cref="T:System.UInt16"/> value if <paramref name="json"/> could be converted; otherwise, <paramref name="defaultValue"/>.</returns>
        </member>
        <member name="M:KGySoft.Json.JsonValueExtensions.GetUInt16OrDefault(KGySoft.Json.JsonValue@,KGySoft.Json.JsonValueType)">
            <summary>
            Gets the specified <see cref="T:KGySoft.Json.JsonValue"/> as an <see cref="T:System.UInt16"/> value if <paramref name="expectedType"/> is <see cref="F:KGySoft.Json.JsonValueType.Undefined"/>
            or matches the <see cref="P:KGySoft.Json.JsonValue.Type"/> property of the specified <paramref name="json"/> parameter and it can be converted to <see cref="T:System.UInt16"/>;
            otherwise, returns <c>0</c>.
            </summary>
            <param name="json">The <see cref="T:KGySoft.Json.JsonValue"/> to be converted to <see cref="T:System.UInt16"/>.</param>
            <param name="expectedType">The expected <see cref="P:KGySoft.Json.JsonValue.Type"/> of the specified <paramref name="json"/> parameter,
            or <see cref="F:KGySoft.Json.JsonValueType.Undefined"/> to allow any type. This parameter is optional.
            <br/>Default value: <see cref="F:KGySoft.Json.JsonValueType.Undefined"/>.</param>
            <returns>An <see cref="T:System.UInt16"/> value if <paramref name="json"/> could be converted; otherwise, <c>0</c>.</returns>
        </member>
        <member name="M:KGySoft.Json.JsonValueExtensions.ToJson(System.UInt16,System.Boolean)">
            <summary>
            Converts the specified <paramref name="value"/> to <see cref="T:KGySoft.Json.JsonValue"/>.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="asString"><see langword="true"/> to convert the <paramref name="value"/> to a <see cref="T:KGySoft.Json.JsonValue"/>
            with <see cref="F:KGySoft.Json.JsonValueType.String"/>&#160;<see cref="P:KGySoft.Json.JsonValue.Type"/>; otherwise, <see langword="false"/>. This parameter is optional.
            <br/>Default value: <see langword="false"/>.</param>
            <returns>A <see cref="T:KGySoft.Json.JsonValue"/> instance that is the JSON representation of the specified <paramref name="value"/>.</returns>
        </member>
        <member name="M:KGySoft.Json.JsonValueExtensions.ToJson(System.Nullable{System.UInt16},System.Boolean)">
            <summary>
            Converts the specified <paramref name="value"/> to <see cref="T:KGySoft.Json.JsonValue"/>.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="asString"><see langword="true"/> to convert the <paramref name="value"/> to a <see cref="T:KGySoft.Json.JsonValue"/>
            with <see cref="F:KGySoft.Json.JsonValueType.String"/>&#160;<see cref="P:KGySoft.Json.JsonValue.Type"/>; otherwise, <see langword="false"/>. This parameter is optional.
            <br/>Default value: <see langword="false"/>.</param>
            <returns>A <see cref="T:KGySoft.Json.JsonValue"/> instance that is the JSON representation of the specified <paramref name="value"/>.</returns>
        </member>
        <member name="M:KGySoft.Json.JsonValueExtensions.TryGetInt32(KGySoft.Json.JsonValue@,System.Int32@,KGySoft.Json.JsonValueType)">
            <summary>
            Tries to get the specified <see cref="T:KGySoft.Json.JsonValue"/> as an <see cref="T:System.Int32"/> value if <paramref name="expectedType"/> is <see cref="F:KGySoft.Json.JsonValueType.Undefined"/>
            or matches the <see cref="P:KGySoft.Json.JsonValue.Type"/> property of the specified <paramref name="json"/> parameter.
            </summary>
            <param name="json">The <see cref="T:KGySoft.Json.JsonValue"/> to be converted to <see cref="T:System.Int32"/>.</param>
            <param name="value">When this method returns, the result of the conversion, if <paramref name="json"/> could be converted;
            otherwise, <c>0</c>. This parameter is passed uninitialized.</param>
            <param name="expectedType">The expected <see cref="P:KGySoft.Json.JsonValue.Type"/> of the specified <paramref name="json"/> parameter,
            or <see cref="F:KGySoft.Json.JsonValueType.Undefined"/> to allow any type. This parameter is optional.
            <br/>Default value: <see cref="F:KGySoft.Json.JsonValueType.Undefined"/>.</param>
            <returns><see langword="true"/> if the specified <see cref="T:KGySoft.Json.JsonValue"/> could be converted; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:KGySoft.Json.JsonValueExtensions.AsInt32(KGySoft.Json.JsonValue@,KGySoft.Json.JsonValueType)">
            <summary>
            Gets the specified <see cref="T:KGySoft.Json.JsonValue"/> as an <see cref="T:System.Int32"/> value if <paramref name="expectedType"/> is <see cref="F:KGySoft.Json.JsonValueType.Undefined"/>
            or matches the <see cref="P:KGySoft.Json.JsonValue.Type"/> property of the specified <paramref name="json"/> parameter and it can be converted to <see cref="T:System.Int32"/>;
            otherwise, returns <see langword="null"/>.
            </summary>
            <param name="json">The <see cref="T:KGySoft.Json.JsonValue"/> to be converted to <see cref="T:System.Int32"/>.</param>
            <param name="expectedType">The expected <see cref="P:KGySoft.Json.JsonValue.Type"/> of the specified <paramref name="json"/> parameter,
            or <see cref="F:KGySoft.Json.JsonValueType.Undefined"/> to allow any type. This parameter is optional.
            <br/>Default value: <see cref="F:KGySoft.Json.JsonValueType.Undefined"/>.</param>
            <returns>An <see cref="T:System.Int32"/> value if <paramref name="json"/> could be converted; otherwise, <see langword="null"/>.</returns>
        </member>
        <member name="M:KGySoft.Json.JsonValueExtensions.GetInt32OrDefault(KGySoft.Json.JsonValue@,System.Int32,KGySoft.Json.JsonValueType)">
            <summary>
            Gets the specified <see cref="T:KGySoft.Json.JsonValue"/> as an <see cref="T:System.Int32"/> value if <paramref name="expectedType"/> is <see cref="F:KGySoft.Json.JsonValueType.Undefined"/>
            or matches the <see cref="P:KGySoft.Json.JsonValue.Type"/> property of the specified <paramref name="json"/> parameter and it can be converted to <see cref="T:System.Int32"/>;
            otherwise, returns <paramref name="defaultValue"/>.
            </summary>
            <param name="json">The <see cref="T:KGySoft.Json.JsonValue"/> to be converted to <see cref="T:System.Int32"/>.</param>
            <param name="defaultValue">The value to be returned if the conversion fails. This parameter is optional.
            <br/>Default value: <c>0</c>.</param>
            <param name="expectedType">The expected <see cref="P:KGySoft.Json.JsonValue.Type"/> of the specified <paramref name="json"/> parameter,
            or <see cref="F:KGySoft.Json.JsonValueType.Undefined"/> to allow any type. This parameter is optional.
            <br/>Default value: <see cref="F:KGySoft.Json.JsonValueType.Undefined"/>.</param>
            <returns>An <see cref="T:System.Int32"/> value if <paramref name="json"/> could be converted; otherwise, <paramref name="defaultValue"/>.</returns>
        </member>
        <member name="M:KGySoft.Json.JsonValueExtensions.GetInt32OrDefault(KGySoft.Json.JsonValue@,KGySoft.Json.JsonValueType)">
            <summary>
            Gets the specified <see cref="T:KGySoft.Json.JsonValue"/> as an <see cref="T:System.Int32"/> value if <paramref name="expectedType"/> is <see cref="F:KGySoft.Json.JsonValueType.Undefined"/>
            or matches the <see cref="P:KGySoft.Json.JsonValue.Type"/> property of the specified <paramref name="json"/> parameter and it can be converted to <see cref="T:System.Int32"/>;
            otherwise, returns <c>0</c>.
            </summary>
            <param name="json">The <see cref="T:KGySoft.Json.JsonValue"/> to be converted to <see cref="T:System.Int32"/>.</param>
            <param name="expectedType">The expected <see cref="P:KGySoft.Json.JsonValue.Type"/> of the specified <paramref name="json"/> parameter,
            or <see cref="F:KGySoft.Json.JsonValueType.Undefined"/> to allow any type.</param>
            <returns>An <see cref="T:System.Int32"/> value if <paramref name="json"/> could be converted; otherwise, <c>0</c>.</returns>
        </member>
        <member name="M:KGySoft.Json.JsonValueExtensions.ToJson(System.Int32,System.Boolean)">
            <summary>
            Converts the specified <paramref name="value"/> to <see cref="T:KGySoft.Json.JsonValue"/>.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="asString"><see langword="true"/> to convert the <paramref name="value"/> to a <see cref="T:KGySoft.Json.JsonValue"/>
            with <see cref="F:KGySoft.Json.JsonValueType.String"/>&#160;<see cref="P:KGySoft.Json.JsonValue.Type"/>; otherwise, <see langword="false"/>. This parameter is optional.
            <br/>Default value: <see langword="false"/>.</param>
            <returns>A <see cref="T:KGySoft.Json.JsonValue"/> instance that is the JSON representation of the specified <paramref name="value"/>.</returns>
        </member>
        <member name="M:KGySoft.Json.JsonValueExtensions.ToJson(System.Nullable{System.Int32},System.Boolean)">
            <summary>
            Converts the specified <paramref name="value"/> to <see cref="T:KGySoft.Json.JsonValue"/>.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="asString"><see langword="true"/> to convert the <paramref name="value"/> to a <see cref="T:KGySoft.Json.JsonValue"/>
            with <see cref="F:KGySoft.Json.JsonValueType.String"/>&#160;<see cref="P:KGySoft.Json.JsonValue.Type"/>; otherwise, <see langword="false"/>. This parameter is optional.
            <br/>Default value: <see langword="false"/>.</param>
            <returns>A <see cref="T:KGySoft.Json.JsonValue"/> instance that is the JSON representation of the specified <paramref name="value"/>.</returns>
        </member>
        <member name="M:KGySoft.Json.JsonValueExtensions.TryGetUInt32(KGySoft.Json.JsonValue@,System.UInt32@,KGySoft.Json.JsonValueType)">
            <summary>
            Tries to get the specified <see cref="T:KGySoft.Json.JsonValue"/> as an <see cref="T:System.UInt32"/> value if <paramref name="expectedType"/> is <see cref="F:KGySoft.Json.JsonValueType.Undefined"/>
            or matches the <see cref="P:KGySoft.Json.JsonValue.Type"/> property of the specified <paramref name="json"/> parameter.
            </summary>
            <param name="json">The <see cref="T:KGySoft.Json.JsonValue"/> to be converted to <see cref="T:System.UInt32"/>.</param>
            <param name="value">When this method returns, the result of the conversion, if <paramref name="json"/> could be converted;
            otherwise, <c>0</c>. This parameter is passed uninitialized.</param>
            <param name="expectedType">The expected <see cref="P:KGySoft.Json.JsonValue.Type"/> of the specified <paramref name="json"/> parameter,
            or <see cref="F:KGySoft.Json.JsonValueType.Undefined"/> to allow any type. This parameter is optional.
            <br/>Default value: <see cref="F:KGySoft.Json.JsonValueType.Undefined"/>.</param>
            <returns><see langword="true"/> if the specified <see cref="T:KGySoft.Json.JsonValue"/> could be converted; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:KGySoft.Json.JsonValueExtensions.AsUInt32(KGySoft.Json.JsonValue@,KGySoft.Json.JsonValueType)">
            <summary>
            Gets the specified <see cref="T:KGySoft.Json.JsonValue"/> as an <see cref="T:System.UInt32"/> value if <paramref name="expectedType"/> is <see cref="F:KGySoft.Json.JsonValueType.Undefined"/>
            or matches the <see cref="P:KGySoft.Json.JsonValue.Type"/> property of the specified <paramref name="json"/> parameter and it can be converted to <see cref="T:System.UInt32"/>;
            otherwise, returns <see langword="null"/>.
            </summary>
            <param name="json">The <see cref="T:KGySoft.Json.JsonValue"/> to be converted to <see cref="T:System.UInt32"/>.</param>
            <param name="expectedType">The expected <see cref="P:KGySoft.Json.JsonValue.Type"/> of the specified <paramref name="json"/> parameter,
            or <see cref="F:KGySoft.Json.JsonValueType.Undefined"/> to allow any type. This parameter is optional.
            <br/>Default value: <see cref="F:KGySoft.Json.JsonValueType.Undefined"/>.</param>
            <returns>An <see cref="T:System.UInt32"/> value if <paramref name="json"/> could be converted; otherwise, <see langword="null"/>.</returns>
        </member>
        <member name="M:KGySoft.Json.JsonValueExtensions.GetUInt32OrDefault(KGySoft.Json.JsonValue@,System.UInt32,KGySoft.Json.JsonValueType)">
            <summary>
            Gets the specified <see cref="T:KGySoft.Json.JsonValue"/> as an <see cref="T:System.UInt32"/> value if <paramref name="expectedType"/> is <see cref="F:KGySoft.Json.JsonValueType.Undefined"/>
            or matches the <see cref="P:KGySoft.Json.JsonValue.Type"/> property of the specified <paramref name="json"/> parameter and it can be converted to <see cref="T:System.UInt32"/>;
            otherwise, returns <paramref name="defaultValue"/>.
            </summary>
            <param name="json">The <see cref="T:KGySoft.Json.JsonValue"/> to be converted to <see cref="T:System.UInt32"/>.</param>
            <param name="defaultValue">The value to be returned if the conversion fails. This parameter is optional.
            <br/>Default value: <c>0</c>.</param>
            <param name="expectedType">The expected <see cref="P:KGySoft.Json.JsonValue.Type"/> of the specified <paramref name="json"/> parameter,
            or <see cref="F:KGySoft.Json.JsonValueType.Undefined"/> to allow any type. This parameter is optional.
            <br/>Default value: <see cref="F:KGySoft.Json.JsonValueType.Undefined"/>.</param>
            <returns>An <see cref="T:System.UInt32"/> value if <paramref name="json"/> could be converted; otherwise, <paramref name="defaultValue"/>.</returns>
        </member>
        <member name="M:KGySoft.Json.JsonValueExtensions.GetUInt32OrDefault(KGySoft.Json.JsonValue@,KGySoft.Json.JsonValueType)">
            <summary>
            Gets the specified <see cref="T:KGySoft.Json.JsonValue"/> as an <see cref="T:System.UInt32"/> value if <paramref name="expectedType"/> is <see cref="F:KGySoft.Json.JsonValueType.Undefined"/>
            or matches the <see cref="P:KGySoft.Json.JsonValue.Type"/> property of the specified <paramref name="json"/> parameter and it can be converted to <see cref="T:System.UInt32"/>;
            otherwise, returns <c>0</c>.
            </summary>
            <param name="json">The <see cref="T:KGySoft.Json.JsonValue"/> to be converted to <see cref="T:System.UInt32"/>.</param>
            <param name="expectedType">The expected <see cref="P:KGySoft.Json.JsonValue.Type"/> of the specified <paramref name="json"/> parameter,
            or <see cref="F:KGySoft.Json.JsonValueType.Undefined"/> to allow any type.</param>
            <returns>An <see cref="T:System.UInt32"/> value if <paramref name="json"/> could be converted; otherwise, <c>0</c>.</returns>
        </member>
        <member name="M:KGySoft.Json.JsonValueExtensions.ToJson(System.UInt32,System.Boolean)">
            <summary>
            Converts the specified <paramref name="value"/> to <see cref="T:KGySoft.Json.JsonValue"/>.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="asString"><see langword="true"/> to convert the <paramref name="value"/> to a <see cref="T:KGySoft.Json.JsonValue"/>
            with <see cref="F:KGySoft.Json.JsonValueType.String"/>&#160;<see cref="P:KGySoft.Json.JsonValue.Type"/>; otherwise, <see langword="false"/>. This parameter is optional.
            <br/>Default value: <see langword="false"/>.</param>
            <returns>A <see cref="T:KGySoft.Json.JsonValue"/> instance that is the JSON representation of the specified <paramref name="value"/>.</returns>
        </member>
        <member name="M:KGySoft.Json.JsonValueExtensions.ToJson(System.Nullable{System.UInt32},System.Boolean)">
            <summary>
            Converts the specified <paramref name="value"/> to <see cref="T:KGySoft.Json.JsonValue"/>.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="asString"><see langword="true"/> to convert the <paramref name="value"/> to a <see cref="T:KGySoft.Json.JsonValue"/>
            with <see cref="F:KGySoft.Json.JsonValueType.String"/>&#160;<see cref="P:KGySoft.Json.JsonValue.Type"/>; otherwise, <see langword="false"/>. This parameter is optional.
            <br/>Default value: <see langword="false"/>.</param>
            <returns>A <see cref="T:KGySoft.Json.JsonValue"/> instance that is the JSON representation of the specified <paramref name="value"/>.</returns>
        </member>
        <member name="M:KGySoft.Json.JsonValueExtensions.TryGetInt64(KGySoft.Json.JsonValue@,System.Int64@,KGySoft.Json.JsonValueType)">
            <summary>
            Tries to get the specified <see cref="T:KGySoft.Json.JsonValue"/> as an <see cref="T:System.Int64"/> value if <paramref name="expectedType"/> is <see cref="F:KGySoft.Json.JsonValueType.Undefined"/>
            or matches the <see cref="P:KGySoft.Json.JsonValue.Type"/> property of the specified <paramref name="json"/> parameter.
            </summary>
            <param name="json">The <see cref="T:KGySoft.Json.JsonValue"/> to be converted to <see cref="T:System.Int64"/>.</param>
            <param name="value">When this method returns, the result of the conversion, if <paramref name="json"/> could be converted;
            otherwise, <c>0</c>. This parameter is passed uninitialized.</param>
            <param name="expectedType">The expected <see cref="P:KGySoft.Json.JsonValue.Type"/> of the specified <paramref name="json"/> parameter,
            or <see cref="F:KGySoft.Json.JsonValueType.Undefined"/> to allow any type. This parameter is optional.
            <br/>Default value: <see cref="F:KGySoft.Json.JsonValueType.Undefined"/>.</param>
            <returns><see langword="true"/> if the specified <see cref="T:KGySoft.Json.JsonValue"/> could be converted; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:KGySoft.Json.JsonValueExtensions.AsInt64(KGySoft.Json.JsonValue@,KGySoft.Json.JsonValueType)">
            <summary>
            Gets the specified <see cref="T:KGySoft.Json.JsonValue"/> as an <see cref="T:System.Int64"/> value if <paramref name="expectedType"/> is <see cref="F:KGySoft.Json.JsonValueType.Undefined"/>
            or matches the <see cref="P:KGySoft.Json.JsonValue.Type"/> property of the specified <paramref name="json"/> parameter and it can be converted to <see cref="T:System.Int64"/>;
            otherwise, returns <see langword="null"/>.
            </summary>
            <param name="json">The <see cref="T:KGySoft.Json.JsonValue"/> to be converted to <see cref="T:System.Int64"/>.</param>
            <param name="expectedType">The expected <see cref="P:KGySoft.Json.JsonValue.Type"/> of the specified <paramref name="json"/> parameter,
            or <see cref="F:KGySoft.Json.JsonValueType.Undefined"/> to allow any type. This parameter is optional.
            <br/>Default value: <see cref="F:KGySoft.Json.JsonValueType.Undefined"/>.</param>
            <returns>An <see cref="T:System.Int64"/> value if <paramref name="json"/> could be converted; otherwise, <see langword="null"/>.</returns>
        </member>
        <member name="M:KGySoft.Json.JsonValueExtensions.GetInt64OrDefault(KGySoft.Json.JsonValue@,System.Int64,KGySoft.Json.JsonValueType)">
            <summary>
            Gets the specified <see cref="T:KGySoft.Json.JsonValue"/> as an <see cref="T:System.Int64"/> value if <paramref name="expectedType"/> is <see cref="F:KGySoft.Json.JsonValueType.Undefined"/>
            or matches the <see cref="P:KGySoft.Json.JsonValue.Type"/> property of the specified <paramref name="json"/> parameter and it can be converted to <see cref="T:System.Int64"/>;
            otherwise, returns <paramref name="defaultValue"/>.
            </summary>
            <param name="json">The <see cref="T:KGySoft.Json.JsonValue"/> to be converted to <see cref="T:System.Int64"/>.</param>
            <param name="defaultValue">The value to be returned if the conversion fails. This parameter is optional.
            <br/>Default value: <c>0</c>.</param>
            <param name="expectedType">The expected <see cref="P:KGySoft.Json.JsonValue.Type"/> of the specified <paramref name="json"/> parameter,
            or <see cref="F:KGySoft.Json.JsonValueType.Undefined"/> to allow any type. This parameter is optional.
            <br/>Default value: <see cref="F:KGySoft.Json.JsonValueType.Undefined"/>.</param>
            <returns>An <see cref="T:System.Int64"/> value if <paramref name="json"/> could be converted; otherwise, <paramref name="defaultValue"/>.</returns>
        </member>
        <member name="M:KGySoft.Json.JsonValueExtensions.GetInt64OrDefault(KGySoft.Json.JsonValue@,KGySoft.Json.JsonValueType)">
            <summary>
            Gets the specified <see cref="T:KGySoft.Json.JsonValue"/> as an <see cref="T:System.Int64"/> value if <paramref name="expectedType"/> is <see cref="F:KGySoft.Json.JsonValueType.Undefined"/>
            or matches the <see cref="P:KGySoft.Json.JsonValue.Type"/> property of the specified <paramref name="json"/> parameter and it can be converted to <see cref="T:System.Int64"/>;
            otherwise, returns <c>0</c>.
            </summary>
            <param name="json">The <see cref="T:KGySoft.Json.JsonValue"/> to be converted to <see cref="T:System.Int64"/>.</param>
            <param name="expectedType">The expected <see cref="P:KGySoft.Json.JsonValue.Type"/> of the specified <paramref name="json"/> parameter,
            or <see cref="F:KGySoft.Json.JsonValueType.Undefined"/> to allow any type.</param>
            <returns>An <see cref="T:System.Int64"/> value if <paramref name="json"/> could be converted; otherwise, <c>0</c>.</returns>
        </member>
        <member name="M:KGySoft.Json.JsonValueExtensions.ToJson(System.Int64,System.Boolean)">
            <summary>
            Converts the specified <paramref name="value"/> to <see cref="T:KGySoft.Json.JsonValue"/>.
            To prevent losing precision the default value of the <paramref name="asString"/> parameter is <see langword="true"/> in this overload.
            <br/>See the <strong>Remarks</strong> section of the <see cref="P:KGySoft.Json.JsonValue.AsNumber"/> property for details.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="asString"><see langword="true"/> to convert the <paramref name="value"/> to a <see cref="T:KGySoft.Json.JsonValue"/>
            with <see cref="F:KGySoft.Json.JsonValueType.String"/>&#160;<see cref="P:KGySoft.Json.JsonValue.Type"/>; otherwise, <see langword="false"/>. This parameter is optional.
            <br/>Default value: <see langword="true"/>.</param>
            <returns>A <see cref="T:KGySoft.Json.JsonValue"/> instance that is the JSON representation of the specified <paramref name="value"/>.</returns>
        </member>
        <member name="M:KGySoft.Json.JsonValueExtensions.ToJson(System.Nullable{System.Int64},System.Boolean)">
            <summary>
            Converts the specified <paramref name="value"/> to <see cref="T:KGySoft.Json.JsonValue"/>.
            To prevent losing precision the default value of the <paramref name="asString"/> parameter is <see langword="true"/> in this overload.
            <br/>See the <strong>Remarks</strong> section of the <see cref="P:KGySoft.Json.JsonValue.AsNumber"/> property for details.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="asString"><see langword="true"/> to convert the <paramref name="value"/> to a <see cref="T:KGySoft.Json.JsonValue"/>
            with <see cref="F:KGySoft.Json.JsonValueType.String"/>&#160;<see cref="P:KGySoft.Json.JsonValue.Type"/>; otherwise, <see langword="false"/>. This parameter is optional.
            <br/>Default value: <see langword="false"/>.</param>
            <returns>A <see cref="T:KGySoft.Json.JsonValue"/> instance that is the JSON representation of the specified <paramref name="value"/>.</returns>
        </member>
        <member name="M:KGySoft.Json.JsonValueExtensions.TryGetUInt64(KGySoft.Json.JsonValue@,System.UInt64@,KGySoft.Json.JsonValueType)">
            <summary>
            Tries to get the specified <see cref="T:KGySoft.Json.JsonValue"/> as an <see cref="T:System.UInt64"/> value if <paramref name="expectedType"/> is <see cref="F:KGySoft.Json.JsonValueType.Undefined"/>
            or matches the <see cref="P:KGySoft.Json.JsonValue.Type"/> property of the specified <paramref name="json"/> parameter.
            </summary>
            <param name="json">The <see cref="T:KGySoft.Json.JsonValue"/> to be converted to <see cref="T:System.UInt64"/>.</param>
            <param name="value">When this method returns, the result of the conversion, if <paramref name="json"/> could be converted;
            otherwise, <c>0</c>. This parameter is passed uninitialized.</param>
            <param name="expectedType">The expected <see cref="P:KGySoft.Json.JsonValue.Type"/> of the specified <paramref name="json"/> parameter,
            or <see cref="F:KGySoft.Json.JsonValueType.Undefined"/> to allow any type. This parameter is optional.
            <br/>Default value: <see cref="F:KGySoft.Json.JsonValueType.Undefined"/>.</param>
            <returns><see langword="true"/> if the specified <see cref="T:KGySoft.Json.JsonValue"/> could be converted; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:KGySoft.Json.JsonValueExtensions.AsUInt64(KGySoft.Json.JsonValue@,KGySoft.Json.JsonValueType)">
            <summary>
            Gets the specified <see cref="T:KGySoft.Json.JsonValue"/> as an <see cref="T:System.UInt64"/> value if <paramref name="expectedType"/> is <see cref="F:KGySoft.Json.JsonValueType.Undefined"/>
            or matches the <see cref="P:KGySoft.Json.JsonValue.Type"/> property of the specified <paramref name="json"/> parameter and it can be converted to <see cref="T:System.UInt64"/>;
            otherwise, returns <see langword="null"/>.
            </summary>
            <param name="json">The <see cref="T:KGySoft.Json.JsonValue"/> to be converted to <see cref="T:System.UInt64"/>.</param>
            <param name="expectedType">The expected <see cref="P:KGySoft.Json.JsonValue.Type"/> of the specified <paramref name="json"/> parameter,
            or <see cref="F:KGySoft.Json.JsonValueType.Undefined"/> to allow any type. This parameter is optional.
            <br/>Default value: <see cref="F:KGySoft.Json.JsonValueType.Undefined"/>.</param>
            <returns>An <see cref="T:System.UInt64"/> value if <paramref name="json"/> could be converted; otherwise, <see langword="null"/>.</returns>
        </member>
        <member name="M:KGySoft.Json.JsonValueExtensions.GetUInt64OrDefault(KGySoft.Json.JsonValue@,System.UInt64,KGySoft.Json.JsonValueType)">
            <summary>
            Gets the specified <see cref="T:KGySoft.Json.JsonValue"/> as an <see cref="T:System.UInt64"/> value if <paramref name="expectedType"/> is <see cref="F:KGySoft.Json.JsonValueType.Undefined"/>
            or matches the <see cref="P:KGySoft.Json.JsonValue.Type"/> property of the specified <paramref name="json"/> parameter and it can be converted to <see cref="T:System.UInt64"/>;
            otherwise, returns <paramref name="defaultValue"/>.
            </summary>
            <param name="json">The <see cref="T:KGySoft.Json.JsonValue"/> to be converted to <see cref="T:System.UInt64"/>.</param>
            <param name="defaultValue">The value to be returned if the conversion fails. This parameter is optional.
            <br/>Default value: <c>0</c>.</param>
            <param name="expectedType">The expected <see cref="P:KGySoft.Json.JsonValue.Type"/> of the specified <paramref name="json"/> parameter,
            or <see cref="F:KGySoft.Json.JsonValueType.Undefined"/> to allow any type. This parameter is optional.
            <br/>Default value: <see cref="F:KGySoft.Json.JsonValueType.Undefined"/>.</param>
            <returns>An <see cref="T:System.UInt64"/> value if <paramref name="json"/> could be converted; otherwise, <paramref name="defaultValue"/>.</returns>
        </member>
        <member name="M:KGySoft.Json.JsonValueExtensions.GetUInt64OrDefault(KGySoft.Json.JsonValue@,KGySoft.Json.JsonValueType)">
            <summary>
            Gets the specified <see cref="T:KGySoft.Json.JsonValue"/> as an <see cref="T:System.UInt64"/> value if <paramref name="expectedType"/> is <see cref="F:KGySoft.Json.JsonValueType.Undefined"/>
            or matches the <see cref="P:KGySoft.Json.JsonValue.Type"/> property of the specified <paramref name="json"/> parameter and it can be converted to <see cref="T:System.UInt64"/>;
            otherwise, returns <c>0</c>.
            </summary>
            <param name="json">The <see cref="T:KGySoft.Json.JsonValue"/> to be converted to <see cref="T:System.UInt64"/>.</param>
            <param name="expectedType">The expected <see cref="P:KGySoft.Json.JsonValue.Type"/> of the specified <paramref name="json"/> parameter,
            or <see cref="F:KGySoft.Json.JsonValueType.Undefined"/> to allow any type.</param>
            <returns>An <see cref="T:System.UInt64"/> value if <paramref name="json"/> could be converted; otherwise, <c>0</c>.</returns>
        </member>
        <member name="M:KGySoft.Json.JsonValueExtensions.ToJson(System.UInt64,System.Boolean)">
            <summary>
            Converts the specified <paramref name="value"/> to <see cref="T:KGySoft.Json.JsonValue"/>.
            To prevent losing precision the default value of the <paramref name="asString"/> parameter is <see langword="true"/> in this overload.
            <br/>See the <strong>Remarks</strong> section of the <see cref="P:KGySoft.Json.JsonValue.AsNumber"/> property for details.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="asString"><see langword="true"/> to convert the <paramref name="value"/> to a <see cref="T:KGySoft.Json.JsonValue"/>
            with <see cref="F:KGySoft.Json.JsonValueType.String"/>&#160;<see cref="P:KGySoft.Json.JsonValue.Type"/>; otherwise, <see langword="false"/>. This parameter is optional.
            <br/>Default value: <see langword="true"/>.</param>
            <returns>A <see cref="T:KGySoft.Json.JsonValue"/> instance that is the JSON representation of the specified <paramref name="value"/>.</returns>
        </member>
        <member name="M:KGySoft.Json.JsonValueExtensions.ToJson(System.Nullable{System.UInt64},System.Boolean)">
            <summary>
            Converts the specified <paramref name="value"/> to <see cref="T:KGySoft.Json.JsonValue"/>.
            To prevent losing precision the default value of the <paramref name="asString"/> parameter is <see langword="true"/> in this overload.
            <br/>See the <strong>Remarks</strong> section of the <see cref="P:KGySoft.Json.JsonValue.AsNumber"/> property for details.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="asString"><see langword="true"/> to convert the <paramref name="value"/> to a <see cref="T:KGySoft.Json.JsonValue"/>
            with <see cref="F:KGySoft.Json.JsonValueType.String"/>&#160;<see cref="P:KGySoft.Json.JsonValue.Type"/>; otherwise, <see langword="false"/>. This parameter is optional.
            <br/>Default value: <see langword="true"/>.</param>
            <returns>A <see cref="T:KGySoft.Json.JsonValue"/> instance that is the JSON representation of the specified <paramref name="value"/>.</returns>
        </member>
        <member name="M:KGySoft.Json.JsonValueExtensions.TryGetBigInteger(KGySoft.Json.JsonValue@,System.Numerics.BigInteger@,KGySoft.Json.JsonValueType)">
            <summary>
            Tries to get the specified <see cref="T:KGySoft.Json.JsonValue"/> as a <see cref="T:System.Numerics.BigInteger"/> value if <paramref name="expectedType"/> is <see cref="F:KGySoft.Json.JsonValueType.Undefined"/>
            or matches the <see cref="P:KGySoft.Json.JsonValue.Type"/> property of the specified <paramref name="json"/> parameter.
            </summary>
            <param name="json">The <see cref="T:KGySoft.Json.JsonValue"/> to be converted to <see cref="T:System.Numerics.BigInteger"/>.</param>
            <param name="value">When this method returns, the result of the conversion, if <paramref name="json"/> could be converted;
            otherwise, <c>0</c>. This parameter is passed uninitialized.</param>
            <param name="expectedType">The expected <see cref="P:KGySoft.Json.JsonValue.Type"/> of the specified <paramref name="json"/> parameter,
            or <see cref="F:KGySoft.Json.JsonValueType.Undefined"/> to allow any type. This parameter is optional.
            <br/>Default value: <see cref="F:KGySoft.Json.JsonValueType.Undefined"/>.</param>
            <returns><see langword="true"/> if the specified <see cref="T:KGySoft.Json.JsonValue"/> could be converted; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:KGySoft.Json.JsonValueExtensions.AsBigInteger(KGySoft.Json.JsonValue@,KGySoft.Json.JsonValueType)">
            <summary>
            Gets the specified <see cref="T:KGySoft.Json.JsonValue"/> as a <see cref="T:System.Numerics.BigInteger"/> value if <paramref name="expectedType"/> is <see cref="F:KGySoft.Json.JsonValueType.Undefined"/>
            or matches the <see cref="P:KGySoft.Json.JsonValue.Type"/> property of the specified <paramref name="json"/> parameter and it can be converted to <see cref="T:System.Numerics.BigInteger"/>;
            otherwise, returns <see langword="null"/>.
            </summary>
            <param name="json">The <see cref="T:KGySoft.Json.JsonValue"/> to be converted to <see cref="T:System.Numerics.BigInteger"/>.</param>
            <param name="expectedType">The expected <see cref="P:KGySoft.Json.JsonValue.Type"/> of the specified <paramref name="json"/> parameter,
            or <see cref="F:KGySoft.Json.JsonValueType.Undefined"/> to allow any type. This parameter is optional.
            <br/>Default value: <see cref="F:KGySoft.Json.JsonValueType.Undefined"/>.</param>
            <returns>A <see cref="T:System.Numerics.BigInteger"/> value if <paramref name="json"/> could be converted; otherwise, <see langword="null"/>.</returns>
        </member>
        <member name="M:KGySoft.Json.JsonValueExtensions.GetBigIntegerOrDefault(KGySoft.Json.JsonValue@,System.Numerics.BigInteger,KGySoft.Json.JsonValueType)">
            <summary>
            Gets the specified <see cref="T:KGySoft.Json.JsonValue"/> as a <see cref="T:System.Numerics.BigInteger"/> value if <paramref name="expectedType"/> is <see cref="F:KGySoft.Json.JsonValueType.Undefined"/>
            or matches the <see cref="P:KGySoft.Json.JsonValue.Type"/> property of the specified <paramref name="json"/> parameter and it can be converted to <see cref="T:System.Numerics.BigInteger"/>;
            otherwise, returns <paramref name="defaultValue"/>.
            </summary>
            <param name="json">The <see cref="T:KGySoft.Json.JsonValue"/> to be converted to <see cref="T:System.Numerics.BigInteger"/>.</param>
            <param name="defaultValue">The value to be returned if the conversion fails. This parameter is optional.
            <br/>Default value: <c>0</c>.</param>
            <param name="expectedType">The expected <see cref="P:KGySoft.Json.JsonValue.Type"/> of the specified <paramref name="json"/> parameter,
            or <see cref="F:KGySoft.Json.JsonValueType.Undefined"/> to allow any type. This parameter is optional.
            <br/>Default value: <see cref="F:KGySoft.Json.JsonValueType.Undefined"/>.</param>
            <returns>A <see cref="T:System.Numerics.BigInteger"/> value if <paramref name="json"/> could be converted; otherwise, <paramref name="defaultValue"/>.</returns>
        </member>
        <member name="M:KGySoft.Json.JsonValueExtensions.GetBigIntegerOrDefault(KGySoft.Json.JsonValue@,KGySoft.Json.JsonValueType)">
            <summary>
            Gets the specified <see cref="T:KGySoft.Json.JsonValue"/> as a <see cref="T:System.Numerics.BigInteger"/> value if <paramref name="expectedType"/> is <see cref="F:KGySoft.Json.JsonValueType.Undefined"/>
            or matches the <see cref="P:KGySoft.Json.JsonValue.Type"/> property of the specified <paramref name="json"/> parameter and it can be converted to <see cref="T:System.Numerics.BigInteger"/>;
            otherwise, returns <c>0</c>.
            </summary>
            <param name="json">The <see cref="T:KGySoft.Json.JsonValue"/> to be converted to <see cref="T:System.Numerics.BigInteger"/>.</param>
            <param name="expectedType">The expected <see cref="P:KGySoft.Json.JsonValue.Type"/> of the specified <paramref name="json"/> parameter,
            or <see cref="F:KGySoft.Json.JsonValueType.Undefined"/> to allow any type.</param>
            <returns>A <see cref="T:System.Numerics.BigInteger"/> value if <paramref name="json"/> could be converted; otherwise, <c>0</c>.</returns>
        </member>
        <member name="M:KGySoft.Json.JsonValueExtensions.ToJson(System.Numerics.BigInteger,System.Boolean)">
            <summary>
            Converts the specified <paramref name="value"/> to <see cref="T:KGySoft.Json.JsonValue"/>.
            To prevent losing precision the default value of the <paramref name="asString"/> parameter is <see langword="true"/> in this overload.
            <br/>See the <strong>Remarks</strong> section of the <see cref="P:KGySoft.Json.JsonValue.AsNumber"/> property for details.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="asString"><see langword="true"/> to convert the <paramref name="value"/> to a <see cref="T:KGySoft.Json.JsonValue"/>
            with <see cref="F:KGySoft.Json.JsonValueType.String"/>&#160;<see cref="P:KGySoft.Json.JsonValue.Type"/>; otherwise, <see langword="false"/>. This parameter is optional.
            <br/>Default value: <see langword="true"/>.</param>
            <returns>A <see cref="T:KGySoft.Json.JsonValue"/> instance that is the JSON representation of the specified <paramref name="value"/>.</returns>
        </member>
        <member name="M:KGySoft.Json.JsonValueExtensions.ToJson(System.Nullable{System.Numerics.BigInteger},System.Boolean)">
            <summary>
            Converts the specified <paramref name="value"/> to <see cref="T:KGySoft.Json.JsonValue"/>.
            To prevent losing precision the default value of the <paramref name="asString"/> parameter is <see langword="true"/> in this overload.
            <br/>See the <strong>Remarks</strong> section of the <see cref="P:KGySoft.Json.JsonValue.AsNumber"/> property for details.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="asString"><see langword="true"/> to convert the <paramref name="value"/> to a <see cref="T:KGySoft.Json.JsonValue"/>
            with <see cref="F:KGySoft.Json.JsonValueType.String"/>&#160;<see cref="P:KGySoft.Json.JsonValue.Type"/>; otherwise, <see langword="false"/>. This parameter is optional.
            <br/>Default value: <see langword="false"/>.</param>
            <returns>A <see cref="T:KGySoft.Json.JsonValue"/> instance that is the JSON representation of the specified <paramref name="value"/>.</returns>
        </member>
        <member name="M:KGySoft.Json.JsonValueExtensions.TryGetSingle(KGySoft.Json.JsonValue@,System.Single@,KGySoft.Json.JsonValueType)">
            <summary>
            Tries to get the specified <see cref="T:KGySoft.Json.JsonValue"/> as a <see cref="T:System.Single"/> value if <paramref name="expectedType"/> is <see cref="F:KGySoft.Json.JsonValueType.Undefined"/>
            or matches the <see cref="P:KGySoft.Json.JsonValue.Type"/> property of the specified <paramref name="json"/> parameter.
            </summary>
            <param name="json">The <see cref="T:KGySoft.Json.JsonValue"/> to be converted to <see cref="T:System.Single"/>.</param>
            <param name="value">When this method returns, the result of the conversion, if <paramref name="json"/> could be converted;
            otherwise, <c>0.0</c>. This parameter is passed uninitialized.</param>
            <param name="expectedType">The expected <see cref="P:KGySoft.Json.JsonValue.Type"/> of the specified <paramref name="json"/> parameter,
            or <see cref="F:KGySoft.Json.JsonValueType.Undefined"/> to allow any type. This parameter is optional.
            <br/>Default value: <see cref="F:KGySoft.Json.JsonValueType.Undefined"/>.</param>
            <returns><see langword="true"/> if the specified <see cref="T:KGySoft.Json.JsonValue"/> could be converted; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:KGySoft.Json.JsonValueExtensions.AsSingle(KGySoft.Json.JsonValue@,KGySoft.Json.JsonValueType)">
            <summary>
            Gets the specified <see cref="T:KGySoft.Json.JsonValue"/> as a <see cref="T:System.Single"/> value if <paramref name="expectedType"/> is <see cref="F:KGySoft.Json.JsonValueType.Undefined"/>
            or matches the <see cref="P:KGySoft.Json.JsonValue.Type"/> property of the specified <paramref name="json"/> parameter and it can be converted to <see cref="T:System.Single"/>;
            otherwise, returns <see langword="null"/>.
            </summary>
            <param name="json">The <see cref="T:KGySoft.Json.JsonValue"/> to be converted to <see cref="T:System.Single"/>.</param>
            <param name="expectedType">The expected <see cref="P:KGySoft.Json.JsonValue.Type"/> of the specified <paramref name="json"/> parameter,
            or <see cref="F:KGySoft.Json.JsonValueType.Undefined"/> to allow any type. This parameter is optional.
            <br/>Default value: <see cref="F:KGySoft.Json.JsonValueType.Undefined"/>.</param>
            <returns>A <see cref="T:System.Single"/> value if <paramref name="json"/> could be converted; otherwise, <see langword="null"/>.</returns>
        </member>
        <member name="M:KGySoft.Json.JsonValueExtensions.GetSingleOrDefault(KGySoft.Json.JsonValue@,System.Single,KGySoft.Json.JsonValueType)">
            <summary>
            Gets the specified <see cref="T:KGySoft.Json.JsonValue"/> as a <see cref="T:System.Single"/> value if <paramref name="expectedType"/> is <see cref="F:KGySoft.Json.JsonValueType.Undefined"/>
            or matches the <see cref="P:KGySoft.Json.JsonValue.Type"/> property of the specified <paramref name="json"/> parameter and it can be converted to <see cref="T:System.Single"/>;
            otherwise, returns <paramref name="defaultValue"/>.
            </summary>
            <param name="json">The <see cref="T:KGySoft.Json.JsonValue"/> to be converted to <see cref="T:System.Single"/>.</param>
            <param name="defaultValue">The value to be returned if the conversion fails. This parameter is optional.
            <br/>Default value: <c>0.0</c>.</param>
            <param name="expectedType">The expected <see cref="P:KGySoft.Json.JsonValue.Type"/> of the specified <paramref name="json"/> parameter,
            or <see cref="F:KGySoft.Json.JsonValueType.Undefined"/> to allow any type. This parameter is optional.
            <br/>Default value: <see cref="F:KGySoft.Json.JsonValueType.Undefined"/>.</param>
            <returns>A <see cref="T:System.Single"/> value if <paramref name="json"/> could be converted; otherwise, <paramref name="defaultValue"/>.</returns>
        </member>
        <member name="M:KGySoft.Json.JsonValueExtensions.GetSingleOrDefault(KGySoft.Json.JsonValue@,KGySoft.Json.JsonValueType)">
            <summary>
            Gets the specified <see cref="T:KGySoft.Json.JsonValue"/> as a <see cref="T:System.Single"/> value if <paramref name="expectedType"/> is <see cref="F:KGySoft.Json.JsonValueType.Undefined"/>
            or matches the <see cref="P:KGySoft.Json.JsonValue.Type"/> property of the specified <paramref name="json"/> parameter and it can be converted to <see cref="T:System.Single"/>;
            otherwise, returns <c>0.0</c>.
            </summary>
            <param name="json">The <see cref="T:KGySoft.Json.JsonValue"/> to be converted to <see cref="T:System.Single"/>.</param>
            <param name="expectedType">The expected <see cref="P:KGySoft.Json.JsonValue.Type"/> of the specified <paramref name="json"/> parameter,
            or <see cref="F:KGySoft.Json.JsonValueType.Undefined"/> to allow any type.</param>
            <returns>A <see cref="T:System.Single"/> value if <paramref name="json"/> could be converted; otherwise, <c>0.0</c>.</returns>
        </member>
        <member name="M:KGySoft.Json.JsonValueExtensions.ToJson(System.Single,System.Boolean)">
            <summary>
            Converts the specified <paramref name="value"/> to <see cref="T:KGySoft.Json.JsonValue"/>.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="asString"><see langword="true"/> to convert the <paramref name="value"/> to a <see cref="T:KGySoft.Json.JsonValue"/>
            with <see cref="F:KGySoft.Json.JsonValueType.String"/>&#160;<see cref="P:KGySoft.Json.JsonValue.Type"/>; otherwise, <see langword="false"/>. This parameter is optional.
            <br/>Default value: <see langword="false"/>.</param>
            <returns>A <see cref="T:KGySoft.Json.JsonValue"/> instance that is the JSON representation of the specified <paramref name="value"/>.</returns>
        </member>
        <member name="M:KGySoft.Json.JsonValueExtensions.ToJson(System.Nullable{System.Single},System.Boolean)">
            <summary>
            Converts the specified <paramref name="value"/> to <see cref="T:KGySoft.Json.JsonValue"/>.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="asString"><see langword="true"/> to convert the <paramref name="value"/> to a <see cref="T:KGySoft.Json.JsonValue"/>
            with <see cref="F:KGySoft.Json.JsonValueType.String"/>&#160;<see cref="P:KGySoft.Json.JsonValue.Type"/>; otherwise, <see langword="false"/>. This parameter is optional.
            <br/>Default value: <see langword="false"/>.</param>
            <returns>A <see cref="T:KGySoft.Json.JsonValue"/> instance that is the JSON representation of the specified <paramref name="value"/>.</returns>
        </member>
        <member name="M:KGySoft.Json.JsonValueExtensions.TryGetDouble(KGySoft.Json.JsonValue@,System.Double@,KGySoft.Json.JsonValueType)">
            <summary>
            Tries to get the specified <see cref="T:KGySoft.Json.JsonValue"/> as a <see cref="T:System.Double"/> value if <paramref name="expectedType"/> is <see cref="F:KGySoft.Json.JsonValueType.Undefined"/>
            or matches the <see cref="P:KGySoft.Json.JsonValue.Type"/> property of the specified <paramref name="json"/> parameter.
            </summary>
            <param name="json">The <see cref="T:KGySoft.Json.JsonValue"/> to be converted to <see cref="T:System.Double"/>.</param>
            <param name="value">When this method returns, the result of the conversion, if <paramref name="json"/> could be converted;
            otherwise, <c>0.0</c>. This parameter is passed uninitialized.</param>
            <param name="expectedType">The expected <see cref="P:KGySoft.Json.JsonValue.Type"/> of the specified <paramref name="json"/> parameter,
            or <see cref="F:KGySoft.Json.JsonValueType.Undefined"/> to allow any type. This parameter is optional.
            <br/>Default value: <see cref="F:KGySoft.Json.JsonValueType.Undefined"/>.</param>
            <returns><see langword="true"/> if the specified <see cref="T:KGySoft.Json.JsonValue"/> could be converted; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:KGySoft.Json.JsonValueExtensions.AsDouble(KGySoft.Json.JsonValue@,KGySoft.Json.JsonValueType)">
            <summary>
            Gets the specified <see cref="T:KGySoft.Json.JsonValue"/> as a <see cref="T:System.Double"/> value if <paramref name="expectedType"/> is <see cref="F:KGySoft.Json.JsonValueType.Undefined"/>
            or matches the <see cref="P:KGySoft.Json.JsonValue.Type"/> property of the specified <paramref name="json"/> parameter and it can be converted to <see cref="T:System.Double"/>;
            otherwise, returns <see langword="null"/>.
            </summary>
            <param name="json">The <see cref="T:KGySoft.Json.JsonValue"/> to be converted to <see cref="T:System.Double"/>.</param>
            <param name="expectedType">The expected <see cref="P:KGySoft.Json.JsonValue.Type"/> of the specified <paramref name="json"/> parameter,
            or <see cref="F:KGySoft.Json.JsonValueType.Undefined"/> to allow any type. This parameter is optional.
            <br/>Default value: <see cref="F:KGySoft.Json.JsonValueType.Undefined"/>.</param>
            <returns>A <see cref="T:System.Double"/> value if <paramref name="json"/> could be converted; otherwise, <see langword="null"/>.</returns>
        </member>
        <member name="M:KGySoft.Json.JsonValueExtensions.GetDoubleOrDefault(KGySoft.Json.JsonValue@,System.Double,KGySoft.Json.JsonValueType)">
            <summary>
            Gets the specified <see cref="T:KGySoft.Json.JsonValue"/> as a <see cref="T:System.Double"/> value if <paramref name="expectedType"/> is <see cref="F:KGySoft.Json.JsonValueType.Undefined"/>
            or matches the <see cref="P:KGySoft.Json.JsonValue.Type"/> property of the specified <paramref name="json"/> parameter and it can be converted to <see cref="T:System.Double"/>;
            otherwise, returns <paramref name="defaultValue"/>.
            </summary>
            <param name="json">The <see cref="T:KGySoft.Json.JsonValue"/> to be converted to <see cref="T:System.Double"/>.</param>
            <param name="defaultValue">The value to be returned if the conversion fails. This parameter is optional.
            <br/>Default value: <c>0.0</c>.</param>
            <param name="expectedType">The expected <see cref="P:KGySoft.Json.JsonValue.Type"/> of the specified <paramref name="json"/> parameter,
            or <see cref="F:KGySoft.Json.JsonValueType.Undefined"/> to allow any type. This parameter is optional.
            <br/>Default value: <see cref="F:KGySoft.Json.JsonValueType.Undefined"/>.</param>
            <returns>A <see cref="T:System.Double"/> value if <paramref name="json"/> could be converted; otherwise, <paramref name="defaultValue"/>.</returns>
        </member>
        <member name="M:KGySoft.Json.JsonValueExtensions.GetDoubleOrDefault(KGySoft.Json.JsonValue@,KGySoft.Json.JsonValueType)">
            <summary>
            Gets the specified <see cref="T:KGySoft.Json.JsonValue"/> as a <see cref="T:System.Double"/> value if <paramref name="expectedType"/> is <see cref="F:KGySoft.Json.JsonValueType.Undefined"/>
            or matches the <see cref="P:KGySoft.Json.JsonValue.Type"/> property of the specified <paramref name="json"/> parameter and it can be converted to <see cref="T:System.Double"/>;
            otherwise, returns <c>0.0</c>.
            </summary>
            <param name="json">The <see cref="T:KGySoft.Json.JsonValue"/> to be converted to <see cref="T:System.Double"/>.</param>
            <param name="expectedType">The expected <see cref="P:KGySoft.Json.JsonValue.Type"/> of the specified <paramref name="json"/> parameter,
            or <see cref="F:KGySoft.Json.JsonValueType.Undefined"/> to allow any type.</param>
            <returns>A <see cref="T:System.Double"/> value if <paramref name="json"/> could be converted; otherwise, <c>0.0</c>.</returns>
        </member>
        <member name="M:KGySoft.Json.JsonValueExtensions.ToJson(System.Double,System.Boolean)">
            <summary>
            Converts the specified <paramref name="value"/> to <see cref="T:KGySoft.Json.JsonValue"/>.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="asString"><see langword="true"/> to convert the <paramref name="value"/> to a <see cref="T:KGySoft.Json.JsonValue"/>
            with <see cref="F:KGySoft.Json.JsonValueType.String"/>&#160;<see cref="P:KGySoft.Json.JsonValue.Type"/>; otherwise, <see langword="false"/>. This parameter is optional.
            <br/>Default value: <see langword="false"/>.</param>
            <returns>A <see cref="T:KGySoft.Json.JsonValue"/> instance that is the JSON representation of the specified <paramref name="value"/>.</returns>
        </member>
        <member name="M:KGySoft.Json.JsonValueExtensions.ToJson(System.Nullable{System.Double},System.Boolean)">
            <summary>
            Converts the specified <paramref name="value"/> to <see cref="T:KGySoft.Json.JsonValue"/>.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="asString"><see langword="true"/> to convert the <paramref name="value"/> to a <see cref="T:KGySoft.Json.JsonValue"/>
            with <see cref="F:KGySoft.Json.JsonValueType.String"/>&#160;<see cref="P:KGySoft.Json.JsonValue.Type"/>; otherwise, <see langword="false"/>. This parameter is optional.
            <br/>Default value: <see langword="false"/>.</param>
            <returns>A <see cref="T:KGySoft.Json.JsonValue"/> instance that is the JSON representation of the specified <paramref name="value"/>.</returns>
        </member>
        <member name="M:KGySoft.Json.JsonValueExtensions.TryGetDecimal(KGySoft.Json.JsonValue@,System.Decimal@,KGySoft.Json.JsonValueType)">
            <summary>
            Tries to get the specified <see cref="T:KGySoft.Json.JsonValue"/> as a <see cref="T:System.Decimal"/> value if <paramref name="expectedType"/> is <see cref="F:KGySoft.Json.JsonValueType.Undefined"/>
            or matches the <see cref="P:KGySoft.Json.JsonValue.Type"/> property of the specified <paramref name="json"/> parameter.
            </summary>
            <param name="json">The <see cref="T:KGySoft.Json.JsonValue"/> to be converted to <see cref="T:System.Decimal"/>.</param>
            <param name="value">When this method returns, the result of the conversion, if <paramref name="json"/> could be converted;
            otherwise, <c>0.0</c>. This parameter is passed uninitialized.</param>
            <param name="expectedType">The expected <see cref="P:KGySoft.Json.JsonValue.Type"/> of the specified <paramref name="json"/> parameter,
            or <see cref="F:KGySoft.Json.JsonValueType.Undefined"/> to allow any type. This parameter is optional.
            <br/>Default value: <see cref="F:KGySoft.Json.JsonValueType.Undefined"/>.</param>
            <returns><see langword="true"/> if the specified <see cref="T:KGySoft.Json.JsonValue"/> could be converted; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:KGySoft.Json.JsonValueExtensions.AsDecimal(KGySoft.Json.JsonValue@,KGySoft.Json.JsonValueType)">
            <summary>
            Gets the specified <see cref="T:KGySoft.Json.JsonValue"/> as a <see cref="T:System.Decimal"/> value if <paramref name="expectedType"/> is <see cref="F:KGySoft.Json.JsonValueType.Undefined"/>
            or matches the <see cref="P:KGySoft.Json.JsonValue.Type"/> property of the specified <paramref name="json"/> parameter and it can be converted to <see cref="T:System.Decimal"/>;
            otherwise, returns <see langword="null"/>.
            </summary>
            <param name="json">The <see cref="T:KGySoft.Json.JsonValue"/> to be converted to <see cref="T:System.Decimal"/>.</param>
            <param name="expectedType">The expected <see cref="P:KGySoft.Json.JsonValue.Type"/> of the specified <paramref name="json"/> parameter,
            or <see cref="F:KGySoft.Json.JsonValueType.Undefined"/> to allow any type. This parameter is optional.
            <br/>Default value: <see cref="F:KGySoft.Json.JsonValueType.Undefined"/>.</param>
            <returns>A <see cref="T:System.Decimal"/> value if <paramref name="json"/> could be converted; otherwise, <see langword="null"/>.</returns>
        </member>
        <member name="M:KGySoft.Json.JsonValueExtensions.GetDecimalOrDefault(KGySoft.Json.JsonValue@,System.Decimal,KGySoft.Json.JsonValueType)">
            <summary>
            Gets the specified <see cref="T:KGySoft.Json.JsonValue"/> as a <see cref="T:System.Decimal"/> value if <paramref name="expectedType"/> is <see cref="F:KGySoft.Json.JsonValueType.Undefined"/>
            or matches the <see cref="P:KGySoft.Json.JsonValue.Type"/> property of the specified <paramref name="json"/> parameter and it can be converted to <see cref="T:System.Decimal"/>;
            otherwise, returns <paramref name="defaultValue"/>.
            </summary>
            <param name="json">The <see cref="T:KGySoft.Json.JsonValue"/> to be converted to <see cref="T:System.Decimal"/>.</param>
            <param name="defaultValue">The value to be returned if the conversion fails. This parameter is optional.
            <br/>Default value: <c>0.0</c>.</param>
            <param name="expectedType">The expected <see cref="P:KGySoft.Json.JsonValue.Type"/> of the specified <paramref name="json"/> parameter,
            or <see cref="F:KGySoft.Json.JsonValueType.Undefined"/> to allow any type. This parameter is optional.
            <br/>Default value: <see cref="F:KGySoft.Json.JsonValueType.Undefined"/>.</param>
            <returns>A <see cref="T:System.Decimal"/> value if <paramref name="json"/> could be converted; otherwise, <paramref name="defaultValue"/>.</returns>
        </member>
        <member name="M:KGySoft.Json.JsonValueExtensions.GetDecimalOrDefault(KGySoft.Json.JsonValue@,KGySoft.Json.JsonValueType)">
            <summary>
            Gets the specified <see cref="T:KGySoft.Json.JsonValue"/> as a <see cref="T:System.Decimal"/> value if <paramref name="expectedType"/> is <see cref="F:KGySoft.Json.JsonValueType.Undefined"/>
            or matches the <see cref="P:KGySoft.Json.JsonValue.Type"/> property of the specified <paramref name="json"/> parameter and it can be converted to <see cref="T:System.Decimal"/>;
            otherwise, returns <c>0.0</c>.
            </summary>
            <param name="json">The <see cref="T:KGySoft.Json.JsonValue"/> to be converted to <see cref="T:System.Decimal"/>.</param>
            <param name="expectedType">The expected <see cref="P:KGySoft.Json.JsonValue.Type"/> of the specified <paramref name="json"/> parameter,
            or <see cref="F:KGySoft.Json.JsonValueType.Undefined"/> to allow any type.</param>
            <returns>A <see cref="T:System.Decimal"/> value if <paramref name="json"/> could be converted; otherwise, <c>0.0</c>.</returns>
        </member>
        <member name="M:KGySoft.Json.JsonValueExtensions.ToJson(System.Decimal,System.Boolean)">
            <summary>
            Converts the specified <paramref name="value"/> to <see cref="T:KGySoft.Json.JsonValue"/>.
            To prevent losing precision the default value of the <paramref name="asString"/> parameter is <see langword="true"/> in this overload.
            <br/>See the <strong>Remarks</strong> section of the <see cref="P:KGySoft.Json.JsonValue.AsNumber"/> property for details.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="asString"><see langword="true"/> to convert the <paramref name="value"/> to a <see cref="T:KGySoft.Json.JsonValue"/>
            with <see cref="F:KGySoft.Json.JsonValueType.String"/>&#160;<see cref="P:KGySoft.Json.JsonValue.Type"/>; otherwise, <see langword="false"/>. This parameter is optional.
            <br/>Default value: <see langword="true"/>.</param>
            <returns>A <see cref="T:KGySoft.Json.JsonValue"/> instance that is the JSON representation of the specified <paramref name="value"/>.</returns>
        </member>
        <member name="M:KGySoft.Json.JsonValueExtensions.ToJson(System.Nullable{System.Decimal},System.Boolean)">
            <summary>
            Converts the specified <paramref name="value"/> to <see cref="T:KGySoft.Json.JsonValue"/>.
            To prevent losing precision the default value of the <paramref name="asString"/> parameter is <see langword="true"/> in this overload.
            <br/>See the <strong>Remarks</strong> section of the <see cref="P:KGySoft.Json.JsonValue.AsNumber"/> property for details.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="asString"><see langword="true"/> to convert the <paramref name="value"/> to a <see cref="T:KGySoft.Json.JsonValue"/>
            with <see cref="F:KGySoft.Json.JsonValueType.String"/>&#160;<see cref="P:KGySoft.Json.JsonValue.Type"/>; otherwise, <see langword="false"/>. This parameter is optional.
            <br/>Default value: <see langword="true"/>.</param>
            <returns>A <see cref="T:KGySoft.Json.JsonValue"/> instance that is the JSON representation of the specified <paramref name="value"/>.</returns>
        </member>
        <member name="M:KGySoft.Json.JsonValueExtensions.TryGetString(KGySoft.Json.JsonValue@,System.String@,KGySoft.Json.JsonValueType,System.Boolean)">
            <summary>
            Tries to get the specified <see cref="T:KGySoft.Json.JsonValue"/> as a <see cref="T:System.String"/> value if <paramref name="expectedType"/> is <see cref="F:KGySoft.Json.JsonValueType.Undefined"/>
            or matches the <see cref="P:KGySoft.Json.JsonValue.Type"/> property of the specified <paramref name="json"/> parameter.
            </summary>
            <param name="json">The <see cref="T:KGySoft.Json.JsonValue"/> to be converted to <see cref="T:System.String"/>.</param>
            <param name="value">When this method returns, the result of the conversion, if <paramref name="json"/> could be converted;
            otherwise, <see langword="null"/>. This parameter is passed uninitialized.</param>
            <param name="expectedType">The expected <see cref="P:KGySoft.Json.JsonValue.Type"/> of the specified <paramref name="json"/> parameter,
            or <see cref="F:KGySoft.Json.JsonValueType.Undefined"/> to allow any type. This parameter is optional.
            <br/>Default value: <see cref="F:KGySoft.Json.JsonValueType.Undefined"/>.</param>
            <param name="allowNullIfStringIsExpected"><see langword="true"/> to return <see langword="true"/> if <paramref name="expectedType"/> is <see cref="F:KGySoft.Json.JsonValueType.String"/>
            but the actual <see cref="P:KGySoft.Json.JsonValue.Type"/> is <see cref="F:KGySoft.Json.JsonValueType.Null"/>; otherwise, <see langword="false"/>. This parameter is optional.
            <br/>Default value: <see langword="false"/>.</param>
            <returns><see langword="true"/> if the specified <see cref="T:KGySoft.Json.JsonValue"/> could be converted; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:KGySoft.Json.JsonValueExtensions.AsString(KGySoft.Json.JsonValue@,KGySoft.Json.JsonValueType)">
            <summary>
            Gets the specified <see cref="T:KGySoft.Json.JsonValue"/> as a <see cref="T:System.String"/> value if <paramref name="expectedType"/> is <see cref="F:KGySoft.Json.JsonValueType.Undefined"/>
            or matches the <see cref="P:KGySoft.Json.JsonValue.Type"/> property of the specified <paramref name="json"/> parameter and it can be converted to <see cref="T:System.String"/>;
            otherwise, returns <see langword="null"/>.
            </summary>
            <param name="json">The <see cref="T:KGySoft.Json.JsonValue"/> to be converted to <see cref="T:System.String"/>.</param>
            <param name="expectedType">The expected <see cref="P:KGySoft.Json.JsonValue.Type"/> of the specified <paramref name="json"/> parameter,
            or <see cref="F:KGySoft.Json.JsonValueType.Undefined"/> to allow any type. This parameter is optional.
            <br/>Default value: <see cref="F:KGySoft.Json.JsonValueType.Undefined"/>.</param>
            <returns>A <see cref="T:System.String"/> value if <paramref name="json"/> could be converted; otherwise, <see langword="null"/>.</returns>
        </member>
        <member name="M:KGySoft.Json.JsonValueExtensions.GetStringOrDefault(KGySoft.Json.JsonValue@,System.String,KGySoft.Json.JsonValueType)">
            <summary>
            Gets the specified <see cref="T:KGySoft.Json.JsonValue"/> as a <see cref="T:System.String"/> value if <paramref name="expectedType"/> is <see cref="F:KGySoft.Json.JsonValueType.Undefined"/>
            or matches the <see cref="P:KGySoft.Json.JsonValue.Type"/> property of the specified <paramref name="json"/> parameter and it can be converted to <see cref="T:System.String"/>;
            otherwise, returns <paramref name="defaultValue"/>.
            </summary>
            <param name="json">The <see cref="T:KGySoft.Json.JsonValue"/> to be converted to <see cref="T:System.String"/>.</param>
            <param name="defaultValue">The value to be returned if the conversion fails. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <param name="expectedType">The expected <see cref="P:KGySoft.Json.JsonValue.Type"/> of the specified <paramref name="json"/> parameter,
            or <see cref="F:KGySoft.Json.JsonValueType.Undefined"/> to allow any type. This parameter is optional.
            <br/>Default value: <see cref="F:KGySoft.Json.JsonValueType.Undefined"/>.</param>
            <returns>A <see cref="T:System.String"/> value if <paramref name="json"/> could be converted; otherwise, <paramref name="defaultValue"/>.</returns>
        </member>
        <member name="M:KGySoft.Json.JsonValueExtensions.GetStringOrDefault(KGySoft.Json.JsonValue@,KGySoft.Json.JsonValueType)">
            <summary>
            Gets the specified <see cref="T:KGySoft.Json.JsonValue"/> as a <see cref="T:System.String"/> value if <paramref name="expectedType"/> is <see cref="F:KGySoft.Json.JsonValueType.Undefined"/>
            or matches the <see cref="P:KGySoft.Json.JsonValue.Type"/> property of the specified <paramref name="json"/> parameter and it can be converted to <see cref="T:System.String"/>;
            otherwise, returns <see langword="null"/>.
            </summary>
            <param name="json">The <see cref="T:KGySoft.Json.JsonValue"/> to be converted to <see cref="T:System.String"/>.</param>
            <param name="expectedType">The expected <see cref="P:KGySoft.Json.JsonValue.Type"/> of the specified <paramref name="json"/> parameter,
            or <see cref="F:KGySoft.Json.JsonValueType.Undefined"/> to allow any type.</param>
            <returns>A <see cref="T:System.String"/> value if <paramref name="json"/> could be converted; otherwise, <see langword="null"/>.</returns>
        </member>
        <member name="M:KGySoft.Json.JsonValueExtensions.ToJson(System.String)">
            <summary>
            Converts the specified <paramref name="value"/> to <see cref="T:KGySoft.Json.JsonValue"/>.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A <see cref="T:KGySoft.Json.JsonValue"/> instance that is the JSON representation of the specified <paramref name="value"/>.</returns>
        </member>
        <member name="M:KGySoft.Json.JsonValueExtensions.TryGetEnum``1(KGySoft.Json.JsonValue@,``0@,KGySoft.Json.JsonValueType)">
            <summary>
            Tries to get the specified <see cref="T:KGySoft.Json.JsonValue"/> as a <typeparamref name="TEnum"/> value if <paramref name="expectedType"/> is <see cref="F:KGySoft.Json.JsonValueType.Undefined"/>
            or matches the <see cref="P:KGySoft.Json.JsonValue.Type"/> property of the specified <paramref name="json"/> parameter.
            </summary>
            <typeparam name="TEnum">The type of the enumeration. Must be an <see cref="T:System.Enum"/> type.</typeparam>
            <param name="json">The <see cref="T:KGySoft.Json.JsonValue"/> to be converted to <typeparamref name="TEnum"/>.</param>
            <param name="value">When this method returns, the result of the conversion, if <paramref name="json"/> could be converted;
            otherwise, the default value of <typeparamref name="TEnum"/>. This parameter is passed uninitialized.</param>
            <param name="expectedType">The expected <see cref="P:KGySoft.Json.JsonValue.Type"/> of the specified <paramref name="json"/> parameter,
            or <see cref="F:KGySoft.Json.JsonValueType.Undefined"/> to allow any type. This parameter is optional.
            <br/>Default value: <see cref="F:KGySoft.Json.JsonValueType.Undefined"/>.</param>
            <returns><see langword="true"/> if the specified <see cref="T:KGySoft.Json.JsonValue"/> could be converted; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:KGySoft.Json.JsonValueExtensions.TryGetEnum``1(KGySoft.Json.JsonValue@,System.Boolean,``0@,System.String,KGySoft.Json.JsonValueType)">
            <summary>
            Tries to get the specified <see cref="T:KGySoft.Json.JsonValue"/> as <typeparamref name="TEnum"/> if <paramref name="expectedType"/> is <see cref="F:KGySoft.Json.JsonValueType.Undefined"/>
            or matches the <see cref="P:KGySoft.Json.JsonValue.Type"/> property of the specified <paramref name="json"/> parameter.
            </summary>
            <typeparam name="TEnum">The type of the enumeration. Must be an <see cref="T:System.Enum"/> type.</typeparam>
            <param name="json">The <see cref="T:KGySoft.Json.JsonValue"/> to be converted to <typeparamref name="TEnum"/>.</param>
            <param name="ignoreFormat"><see langword="true"/> to remove underscores or hyphens, and ignore case when parsing the value; otherwise, <see langword="false"/>.</param>
            <param name="value">When this method returns, the result of the conversion, if <paramref name="json"/> could be converted;
            otherwise, the default value of <typeparamref name="TEnum"/>. This parameter is passed uninitialized.</param>
            <param name="flagsSeparator">Specifies the separator if the <paramref name="json"/> value consists of multiple flags. This parameter is optional.
            <br/>Default value: <see langword="null"/>, which uses the default <c>","</c> separator.</param>
            <param name="expectedType">The expected <see cref="P:KGySoft.Json.JsonValue.Type"/> of the specified <paramref name="json"/> parameter,
            or <see cref="F:KGySoft.Json.JsonValueType.Undefined"/> to allow any type. This parameter is optional.
            <br/>Default value: <see cref="F:KGySoft.Json.JsonValueType.Undefined"/>.</param>
            <returns><see langword="true"/> if the specified <see cref="T:KGySoft.Json.JsonValue"/> could be converted; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:KGySoft.Json.JsonValueExtensions.TryGetEnum``1(KGySoft.Json.JsonValue@,System.Boolean,``0@,KGySoft.Json.JsonValueType)">
            <summary>
            Tries to get the specified <see cref="T:KGySoft.Json.JsonValue"/> as <typeparamref name="TEnum"/> if <paramref name="expectedType"/> is <see cref="F:KGySoft.Json.JsonValueType.Undefined"/>
            or matches the <see cref="P:KGySoft.Json.JsonValue.Type"/> property of the specified <paramref name="json"/> parameter.
            </summary>
            <typeparam name="TEnum">The type of the enumeration. Must be an <see cref="T:System.Enum"/> type.</typeparam>
            <param name="json">The <see cref="T:KGySoft.Json.JsonValue"/> to be converted to <typeparamref name="TEnum"/>.</param>
            <param name="ignoreFormat"><see langword="true"/> to remove underscores or hyphens, and ignore case when parsing the value; otherwise, <see langword="false"/>.</param>
            <param name="value">When this method returns, the result of the conversion, if <paramref name="json"/> could be converted;
            otherwise, the default value of <typeparamref name="TEnum"/>. This parameter is passed uninitialized.</param>
            <param name="expectedType">The expected <see cref="P:KGySoft.Json.JsonValue.Type"/> of the specified <paramref name="json"/> parameter,
            or <see cref="F:KGySoft.Json.JsonValueType.Undefined"/> to allow any type.</param>
            <returns><see langword="true"/> if the specified <see cref="T:KGySoft.Json.JsonValue"/> could be converted; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:KGySoft.Json.JsonValueExtensions.AsEnum``1(KGySoft.Json.JsonValue@,KGySoft.Json.JsonValueType)">
            <summary>
            Gets the specified <see cref="T:KGySoft.Json.JsonValue"/> as <typeparamref name="TEnum"/> if <paramref name="expectedType"/> is <see cref="F:KGySoft.Json.JsonValueType.Undefined"/>
            or matches the <see cref="P:KGySoft.Json.JsonValue.Type"/> property of the specified <paramref name="json"/> parameter and it can be converted to <typeparamref name="TEnum"/>;
            otherwise, returns <see langword="null"/>.
            </summary>
            <typeparam name="TEnum">The type of the enumeration. Must be an <see cref="T:System.Enum"/> type.</typeparam>
            <param name="json">The <see cref="T:KGySoft.Json.JsonValue"/> to be converted to <typeparamref name="TEnum"/>.</param>
            <param name="expectedType">The expected <see cref="P:KGySoft.Json.JsonValue.Type"/> of the specified <paramref name="json"/> parameter,
            or <see cref="F:KGySoft.Json.JsonValueType.Undefined"/> to allow any type. This parameter is optional.
            <br/>Default value: <see cref="F:KGySoft.Json.JsonValueType.Undefined"/>.</param>
            <returns>A <typeparamref name="TEnum"/> value if <paramref name="json"/> could be converted; otherwise, <see langword="null"/>.</returns>
        </member>
        <member name="M:KGySoft.Json.JsonValueExtensions.AsEnum``1(KGySoft.Json.JsonValue@,System.Boolean,System.String,KGySoft.Json.JsonValueType)">
            <summary>
            Gets the specified <see cref="T:KGySoft.Json.JsonValue"/> as <typeparamref name="TEnum"/> if <paramref name="expectedType"/> is <see cref="F:KGySoft.Json.JsonValueType.Undefined"/>
            or matches the <see cref="P:KGySoft.Json.JsonValue.Type"/> property of the specified <paramref name="json"/> parameter and it can be converted to <typeparamref name="TEnum"/>;
            otherwise, returns <see langword="null"/>.
            </summary>
            <typeparam name="TEnum">The type of the enumeration. Must be an <see cref="T:System.Enum"/> type.</typeparam>
            <param name="json">The <see cref="T:KGySoft.Json.JsonValue"/> to be converted to <typeparamref name="TEnum"/>.</param>
            <param name="ignoreFormat"><see langword="true"/> to remove underscores or hyphens, and ignore case when parsing the value; otherwise, <see langword="false"/>.</param>
            <param name="flagsSeparator">Specifies the separator if the <paramref name="json"/> value consists of multiple flags. This parameter is optional.
            <br/>Default value: <see langword="null"/>, which uses the default <c>","</c> separator.</param>
            <param name="expectedType">The expected <see cref="P:KGySoft.Json.JsonValue.Type"/> of the specified <paramref name="json"/> parameter,
            or <see cref="F:KGySoft.Json.JsonValueType.Undefined"/> to allow any type. This parameter is optional.
            <br/>Default value: <see cref="F:KGySoft.Json.JsonValueType.Undefined"/>.</param>
            <returns>A <typeparamref name="TEnum"/> value if <paramref name="json"/> could be converted; otherwise, <see langword="null"/>.</returns>
        </member>
        <member name="M:KGySoft.Json.JsonValueExtensions.AsEnum``1(KGySoft.Json.JsonValue@,System.Boolean,KGySoft.Json.JsonValueType)">
            <summary>
            Gets the specified <see cref="T:KGySoft.Json.JsonValue"/> as <typeparamref name="TEnum"/> if <paramref name="expectedType"/> is <see cref="F:KGySoft.Json.JsonValueType.Undefined"/>
            or matches the <see cref="P:KGySoft.Json.JsonValue.Type"/> property of the specified <paramref name="json"/> parameter and it can be converted to <typeparamref name="TEnum"/>;
            otherwise, returns <see langword="null"/>.
            </summary>
            <typeparam name="TEnum">The type of the enumeration. Must be an <see cref="T:System.Enum"/> type.</typeparam>
            <param name="json">The <see cref="T:KGySoft.Json.JsonValue"/> to be converted to <typeparamref name="TEnum"/>.</param>
            <param name="ignoreFormat"><see langword="true"/> to remove underscores or hyphens, and ignore case when parsing the value; otherwise, <see langword="false"/>.</param>
            <param name="expectedType">The expected <see cref="P:KGySoft.Json.JsonValue.Type"/> of the specified <paramref name="json"/> parameter,
            or <see cref="F:KGySoft.Json.JsonValueType.Undefined"/> to allow any type.</param>
            <returns>A <typeparamref name="TEnum"/> value if <paramref name="json"/> could be converted; otherwise, <see langword="null"/>.</returns>
        </member>
        <member name="M:KGySoft.Json.JsonValueExtensions.GetEnumOrDefault``1(KGySoft.Json.JsonValue@,``0,KGySoft.Json.JsonValueType)">
            <summary>
            Gets the specified <see cref="T:KGySoft.Json.JsonValue"/> as <typeparamref name="TEnum"/> if <paramref name="expectedType"/> is <see cref="F:KGySoft.Json.JsonValueType.Undefined"/>
            or matches the <see cref="P:KGySoft.Json.JsonValue.Type"/> property of the specified <paramref name="json"/> parameter and it can be converted to <typeparamref name="TEnum"/>;
            otherwise, returns <paramref name="defaultValue"/>.
            </summary>
            <typeparam name="TEnum">The type of the enumeration. Must be an <see cref="T:System.Enum"/> type.</typeparam>
            <param name="json">The <see cref="T:KGySoft.Json.JsonValue"/> to be converted to <typeparamref name="TEnum"/>.</param>
            <param name="defaultValue">The value to be returned if the conversion fails. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <param name="expectedType">The expected <see cref="P:KGySoft.Json.JsonValue.Type"/> of the specified <paramref name="json"/> parameter,
            or <see cref="F:KGySoft.Json.JsonValueType.Undefined"/> to allow any type. This parameter is optional.
            <br/>Default value: <see cref="F:KGySoft.Json.JsonValueType.Undefined"/>.</param>
            <returns>A <typeparamref name="TEnum"/> value if <paramref name="json"/> could be converted; otherwise, <paramref name="defaultValue"/>.</returns>
        </member>
        <member name="M:KGySoft.Json.JsonValueExtensions.GetEnumOrDefault``1(KGySoft.Json.JsonValue@,KGySoft.Json.JsonValueType)">
            <summary>
            Gets the specified <see cref="T:KGySoft.Json.JsonValue"/> as <typeparamref name="TEnum"/> if <paramref name="expectedType"/> is <see cref="F:KGySoft.Json.JsonValueType.Undefined"/>
            or matches the <see cref="P:KGySoft.Json.JsonValue.Type"/> property of the specified <paramref name="json"/> parameter and it can be converted to <typeparamref name="TEnum"/>;
            otherwise, returns the default value of <typeparamref name="TEnum"/>.
            </summary>
            <typeparam name="TEnum">The type of the enumeration. Must be an <see cref="T:System.Enum"/> type.</typeparam>
            <param name="json">The <see cref="T:KGySoft.Json.JsonValue"/> to be converted to <typeparamref name="TEnum"/>.</param>
            <param name="expectedType">The expected <see cref="P:KGySoft.Json.JsonValue.Type"/> of the specified <paramref name="json"/> parameter,
            or <see cref="F:KGySoft.Json.JsonValueType.Undefined"/> to allow any type.</param>
            <returns>A <typeparamref name="TEnum"/> value if <paramref name="json"/> could be converted; otherwise, the default value of <typeparamref name="TEnum"/>.</returns>
        </member>
        <member name="M:KGySoft.Json.JsonValueExtensions.GetEnumOrDefault``1(KGySoft.Json.JsonValue@,System.Boolean,``0,System.String,KGySoft.Json.JsonValueType)">
            <summary>
            Gets the specified <see cref="T:KGySoft.Json.JsonValue"/> as <typeparamref name="TEnum"/> if <paramref name="expectedType"/> is <see cref="F:KGySoft.Json.JsonValueType.Undefined"/>
            or matches the <see cref="P:KGySoft.Json.JsonValue.Type"/> property of the specified <paramref name="json"/> parameter and it can be converted to <typeparamref name="TEnum"/>;
            otherwise, returns <paramref name="defaultValue"/>.
            </summary>
            <typeparam name="TEnum">The type of the enumeration. Must be an <see cref="T:System.Enum"/> type.</typeparam>
            <param name="json">The <see cref="T:KGySoft.Json.JsonValue"/> to be converted to <typeparamref name="TEnum"/>.</param>
            <param name="ignoreFormat"><see langword="true"/> to remove underscores or hyphens, and ignore case when parsing the value; otherwise, <see langword="false"/>.</param>
            <param name="defaultValue">The value to be returned if the conversion fails. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <param name="flagsSeparator">Specifies the separator character if the <paramref name="json"/> value consists of multiple flags. This parameter is optional.
            <br/>Default value: <see langword="null"/>, which uses the default <c>","</c> separator.</param>
            <param name="expectedType">The expected <see cref="P:KGySoft.Json.JsonValue.Type"/> of the specified <paramref name="json"/> parameter,
            or <see cref="F:KGySoft.Json.JsonValueType.Undefined"/> to allow any type. This parameter is optional.
            <br/>Default value: <see cref="F:KGySoft.Json.JsonValueType.Undefined"/>.</param>
            <returns>A <typeparamref name="TEnum"/> value if <paramref name="json"/> could be converted; otherwise, <paramref name="defaultValue"/>.</returns>
        </member>
        <member name="M:KGySoft.Json.JsonValueExtensions.GetEnumOrDefault``1(KGySoft.Json.JsonValue@,System.Boolean,System.String,KGySoft.Json.JsonValueType)">
            <summary>
            Gets the specified <see cref="T:KGySoft.Json.JsonValue"/> as <typeparamref name="TEnum"/> if <paramref name="expectedType"/> is <see cref="F:KGySoft.Json.JsonValueType.Undefined"/>
            or matches the <see cref="P:KGySoft.Json.JsonValue.Type"/> property of the specified <paramref name="json"/> parameter and it can be converted to <typeparamref name="TEnum"/>;
            otherwise, returns the default value of <typeparamref name="TEnum"/>.
            </summary>
            <typeparam name="TEnum">The type of the enumeration. Must be an <see cref="T:System.Enum"/> type.</typeparam>
            <param name="json">The <see cref="T:KGySoft.Json.JsonValue"/> to be converted to <typeparamref name="TEnum"/>.</param>
            <param name="ignoreFormat"><see langword="true"/> to remove underscores or hyphens, and ignore case when parsing the value; otherwise, <see langword="false"/>.</param>
            <param name="flagsSeparator">Specifies the separator character if the <paramref name="json"/> value consists of multiple flags.</param>
            <param name="expectedType">The expected <see cref="P:KGySoft.Json.JsonValue.Type"/> of the specified <paramref name="json"/> parameter,
            or <see cref="F:KGySoft.Json.JsonValueType.Undefined"/> to allow any type. This parameter is optional.
            <br/>Default value: <see cref="F:KGySoft.Json.JsonValueType.Undefined"/>.</param>
            <returns>A <typeparamref name="TEnum"/> value if <paramref name="json"/> could be converted; otherwise, the default value of <typeparamref name="TEnum"/>.</returns>
        </member>
        <member name="M:KGySoft.Json.JsonValueExtensions.GetEnumOrDefault``1(KGySoft.Json.JsonValue@,System.Boolean,``0,KGySoft.Json.JsonValueType)">
            <summary>
            Gets the specified <see cref="T:KGySoft.Json.JsonValue"/> as <typeparamref name="TEnum"/> if <paramref name="expectedType"/> is <see cref="F:KGySoft.Json.JsonValueType.Undefined"/>
            or matches the <see cref="P:KGySoft.Json.JsonValue.Type"/> property of the specified <paramref name="json"/> parameter and it can be converted to <typeparamref name="TEnum"/>;
            otherwise, returns <paramref name="defaultValue"/>.
            </summary>
            <typeparam name="TEnum">The type of the enumeration. Must be an <see cref="T:System.Enum"/> type.</typeparam>
            <param name="json">The <see cref="T:KGySoft.Json.JsonValue"/> to be converted to <typeparamref name="TEnum"/>.</param>
            <param name="ignoreFormat"><see langword="true"/> to remove underscores or hyphens, and ignore case when parsing the value; otherwise, <see langword="false"/>.</param>
            <param name="defaultValue">The value to be returned if the conversion fails.</param>
            <param name="expectedType">The expected <see cref="P:KGySoft.Json.JsonValue.Type"/> of the specified <paramref name="json"/> parameter,
            or <see cref="F:KGySoft.Json.JsonValueType.Undefined"/> to allow any type.</param>
            <returns>A <typeparamref name="TEnum"/> value if <paramref name="json"/> could be converted; otherwise, <paramref name="defaultValue"/>.</returns>
        </member>
        <member name="M:KGySoft.Json.JsonValueExtensions.GetEnumOrDefault``1(KGySoft.Json.JsonValue@,System.Boolean,KGySoft.Json.JsonValueType)">
            <summary>
            Gets the specified <see cref="T:KGySoft.Json.JsonValue"/> as <typeparamref name="TEnum"/> if <paramref name="expectedType"/> is <see cref="F:KGySoft.Json.JsonValueType.Undefined"/>
            or matches the <see cref="P:KGySoft.Json.JsonValue.Type"/> property of the specified <paramref name="json"/> parameter and it can be converted to <typeparamref name="TEnum"/>;
            otherwise, returns the default value of <typeparamref name="TEnum"/>.
            </summary>
            <typeparam name="TEnum">The type of the enumeration. Must be an <see cref="T:System.Enum"/> type.</typeparam>
            <param name="json">The <see cref="T:KGySoft.Json.JsonValue"/> to be converted to <typeparamref name="TEnum"/>.</param>
            <param name="ignoreFormat"><see langword="true"/> to remove underscores or hyphens, and ignore case when parsing the value; otherwise, <see langword="false"/>.</param>
            <param name="expectedType">The expected <see cref="P:KGySoft.Json.JsonValue.Type"/> of the specified <paramref name="json"/> parameter,
            or <see cref="F:KGySoft.Json.JsonValueType.Undefined"/> to allow any type.</param>
            <returns>A <typeparamref name="TEnum"/> value if <paramref name="json"/> could be converted; otherwise, the default value of <typeparamref name="TEnum"/>.</returns>
        </member>
        <member name="M:KGySoft.Json.JsonValueExtensions.ToJson``1(``0,KGySoft.Json.JsonEnumFormat,System.String)">
            <summary>
            Converts the specified <paramref name="value"/> to <see cref="T:KGySoft.Json.JsonValue"/>.
            </summary>
            <typeparam name="TEnum">The type of the enumeration. Must be an <see cref="T:System.Enum"/> type.</typeparam>
            <param name="value">The value to convert.</param>
            <param name="format">Specifies the format of the enum in the JSON value. This parameter is optional.
            <br/>Default value: <see cref="F:KGySoft.Json.JsonEnumFormat.PascalCase"/>.</param>
            <param name="flagsSeparator">Specifies the separator if <paramref name="value"/> consists of multiple flags. This parameter is optional.
            <br/>Default value: <see langword="null"/>, which uses the default <c>", "</c> separator.</param>
            <returns>A <see cref="T:KGySoft.Json.JsonValue"/> instance that is the JSON representation of the specified <paramref name="value"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="format"/> is not one of the defined values.</exception>
        </member>
        <member name="M:KGySoft.Json.JsonValueExtensions.ToJson``1(System.Nullable{``0},KGySoft.Json.JsonEnumFormat,System.String)">
            <summary>
            Converts the specified <paramref name="value"/> to <see cref="T:KGySoft.Json.JsonValue"/>.
            </summary>
            <typeparam name="TEnum">The type of the enumeration. Must be an <see cref="T:System.Enum"/> type.</typeparam>
            <param name="value">The value to convert.</param>
            <param name="format">Specifies the format of the enum in the JSON value. This parameter is optional.
            <br/>Default value: <see cref="F:KGySoft.Json.JsonEnumFormat.PascalCase"/>.</param>
            <param name="flagsSeparator">Specifies the separator if <paramref name="value"/> consists of multiple flags. This parameter is optional.
            <br/>Default value: <see langword="null"/>, which uses the default <c>", "</c> separator.</param>
            <returns>A <see cref="T:KGySoft.Json.JsonValue"/> instance that is the JSON representation of the specified <paramref name="value"/>.</returns>
        </member>
        <member name="M:KGySoft.Json.JsonValueExtensions.TryGetDateTime(KGySoft.Json.JsonValue@,System.DateTime@,System.Nullable{System.DateTimeKind},KGySoft.Json.JsonValueType)">
            <summary>
            Tries to get the specified <see cref="T:KGySoft.Json.JsonValue"/> as a <see cref="T:System.DateTime"/> value if <paramref name="expectedType"/> is <see cref="F:KGySoft.Json.JsonValueType.Undefined"/>
            or matches the <see cref="P:KGySoft.Json.JsonValue.Type"/> property of the specified <paramref name="json"/> parameter.
            The actual format is attempted to be auto detected. If you know exact format use the
            other <see cref="O:KGySoft.Json.JsonValueExtensions.TryGetDateTime">TryGetDateTime</see> overloads.
            </summary>
            <param name="json">The <see cref="T:KGySoft.Json.JsonValue"/> to be converted to <see cref="T:System.DateTime"/>.</param>
            <param name="value">When this method returns, the result of the conversion, if <paramref name="json"/> could be converted;
            otherwise, <see cref="F:System.DateTime.MinValue"/>. This parameter is passed uninitialized.</param>
            <param name="desiredKind">The desired value of the <see cref="P:System.DateTime.Kind"/> property of the returned <paramref name="value"/>,
            or <see langword="null"/> to preserve the one that could be retrieved from the <see cref="T:KGySoft.Json.JsonValue"/>.
            Converting between <see cref="F:System.DateTimeKind.Utc"/> and <see cref="F:System.DateTimeKind.Local"/> affects the actual time value,
            while changing to or from <see cref="F:System.DateTimeKind.Unspecified"/> just changes the <see cref="P:System.DateTime.Kind"/> property without converting the value. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <param name="expectedType">The expected <see cref="P:KGySoft.Json.JsonValue.Type"/> of the specified <paramref name="json"/> parameter,
            or <see cref="F:KGySoft.Json.JsonValueType.Undefined"/> to allow any type. This parameter is optional.
            <br/>Default value: <see cref="F:KGySoft.Json.JsonValueType.Undefined"/>.</param>
            <returns><see langword="true"/> if the specified <see cref="T:KGySoft.Json.JsonValue"/> could be converted; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:KGySoft.Json.JsonValueExtensions.TryGetDateTime(KGySoft.Json.JsonValue@,KGySoft.Json.JsonDateTimeFormat,System.DateTime@,System.Nullable{System.DateTimeKind},KGySoft.Json.JsonValueType)">
            <summary>
            Tries to get the specified <see cref="T:KGySoft.Json.JsonValue"/> as a <see cref="T:System.DateTime"/> value using the specified <paramref name="format"/>
            if <paramref name="expectedType"/> is <see cref="F:KGySoft.Json.JsonValueType.Undefined"/> or matches the <see cref="P:KGySoft.Json.JsonValue.Type"/> property of the specified <paramref name="json"/> parameter.
            </summary>
            <param name="json">The <see cref="T:KGySoft.Json.JsonValue"/> to be converted to <see cref="T:System.DateTime"/>.</param>
            <param name="format">A <see cref="T:KGySoft.Json.JsonDateTimeFormat"/> value that specifies the format of the date-time value in the <see cref="T:KGySoft.Json.JsonValue"/>.</param>
            <param name="value">When this method returns, the result of the conversion, if <paramref name="json"/> could be converted;
            otherwise, <see cref="F:System.DateTime.MinValue"/>. This parameter is passed uninitialized.</param>
            <param name="desiredKind">The desired value of the <see cref="P:System.DateTime.Kind"/> property of the returned <paramref name="value"/>,
            or <see langword="null"/> to preserve the one that could be retrieved from the <see cref="T:KGySoft.Json.JsonValue"/>.
            Converting between <see cref="F:System.DateTimeKind.Utc"/> and <see cref="F:System.DateTimeKind.Local"/> affects the actual time value,
            while changing to or from <see cref="F:System.DateTimeKind.Unspecified"/> just changes the <see cref="P:System.DateTime.Kind"/> property without converting the value. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <param name="expectedType">The expected <see cref="P:KGySoft.Json.JsonValue.Type"/> of the specified <paramref name="json"/> parameter,
            or <see cref="F:KGySoft.Json.JsonValueType.Undefined"/> to allow any type. This parameter is optional.
            <br/>Default value: <see cref="F:KGySoft.Json.JsonValueType.Undefined"/>.</param>
            <returns><see langword="true"/> if the specified <see cref="T:KGySoft.Json.JsonValue"/> could be converted; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:KGySoft.Json.JsonValueExtensions.TryGetDateTime(KGySoft.Json.JsonValue@,System.String,System.DateTime@,System.Nullable{System.DateTimeKind})">
            <summary>
            Tries to get the specified <see cref="T:KGySoft.Json.JsonValue"/> as a <see cref="T:System.DateTime"/> value using the specified <paramref name="format"/>
            if <see cref="P:KGySoft.Json.JsonValue.Type"/> property of the specified <paramref name="json"/> parameter is <see cref="F:KGySoft.Json.JsonValueType.String"/>.
            </summary>
            <param name="json">The <see cref="T:KGySoft.Json.JsonValue"/> to be converted to <see cref="T:System.DateTime"/>.</param>
            <param name="format">Specifies the exact format of the date-time value in the <see cref="T:KGySoft.Json.JsonValue"/>.</param>
            <param name="value">When this method returns, the result of the conversion, if <paramref name="json"/> could be converted;
            otherwise, <see cref="F:System.DateTime.MinValue"/>. This parameter is passed uninitialized.</param>
            <param name="desiredKind">The desired value of the <see cref="P:System.DateTime.Kind"/> property of the returned <paramref name="value"/>,
            or <see langword="null"/> to preserve the one that could be retrieved from the <see cref="T:KGySoft.Json.JsonValue"/>.
            Converting between <see cref="F:System.DateTimeKind.Utc"/> and <see cref="F:System.DateTimeKind.Local"/> affects the actual time value,
            while changing to or from <see cref="F:System.DateTimeKind.Unspecified"/> just changes the <see cref="P:System.DateTime.Kind"/> property without converting the value. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <returns><see langword="true"/> if the specified <see cref="T:KGySoft.Json.JsonValue"/> could be converted; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:KGySoft.Json.JsonValueExtensions.AsDateTime(KGySoft.Json.JsonValue@,KGySoft.Json.JsonDateTimeFormat,System.Nullable{System.DateTimeKind},KGySoft.Json.JsonValueType)">
            <summary>
            Gets the specified <see cref="T:KGySoft.Json.JsonValue"/> as a <see cref="T:System.DateTime"/> value using the specified <paramref name="format"/>
            if <paramref name="expectedType"/> is <see cref="F:KGySoft.Json.JsonValueType.Undefined"/> or matches the <see cref="P:KGySoft.Json.JsonValue.Type"/>
            property of the specified <paramref name="json"/> parameter and it can be converted to <see cref="T:System.DateTime"/>; otherwise, returns <see langword="null"/>.
            </summary>
            <param name="json">The <see cref="T:KGySoft.Json.JsonValue"/> to be converted to <see cref="T:System.DateTime"/>.</param>
            <param name="format">A <see cref="T:KGySoft.Json.JsonDateTimeFormat"/> value that specifies the format of the date-time value in the <see cref="T:KGySoft.Json.JsonValue"/>. This parameter is optional.
            <br/>Default value: <see cref="F:KGySoft.Json.JsonDateTimeFormat.Auto"/>, which attempts to auto detect the format.</param>
            <param name="desiredKind">The desired value of the <see cref="P:System.DateTime.Kind"/> property of the returned <see cref="T:System.DateTime"/> instance,
            or <see langword="null"/> to preserve the one that could be retrieved from the <see cref="T:KGySoft.Json.JsonValue"/>.
            Converting between <see cref="F:System.DateTimeKind.Utc"/> and <see cref="F:System.DateTimeKind.Local"/> affects the actual time value,
            while changing to or from <see cref="F:System.DateTimeKind.Unspecified"/> just changes the <see cref="P:System.DateTime.Kind"/> property without converting the value. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <param name="expectedType">The expected <see cref="P:KGySoft.Json.JsonValue.Type"/> of the specified <paramref name="json"/> parameter,
            or <see cref="F:KGySoft.Json.JsonValueType.Undefined"/> to allow any type. This parameter is optional.
            <br/>Default value: <see cref="F:KGySoft.Json.JsonValueType.Undefined"/>.</param>
            <returns>A <see cref="T:System.DateTime"/> value if <paramref name="json"/> could be converted; otherwise, <see langword="null"/>.</returns>
        </member>
        <member name="M:KGySoft.Json.JsonValueExtensions.AsDateTime(KGySoft.Json.JsonValue@,System.String,System.Nullable{System.DateTimeKind})">
            <summary>
            Gets the specified <see cref="T:KGySoft.Json.JsonValue"/> as a <see cref="T:System.DateTime"/> value using the specified <paramref name="format"/>
            if <see cref="P:KGySoft.Json.JsonValue.Type"/> property of the specified <paramref name="json"/> parameter is <see cref="F:KGySoft.Json.JsonValueType.String"/>
            and it can be converted to <see cref="T:System.DateTime"/>; otherwise, returns <see langword="null"/>.
            </summary>
            <param name="json">The <see cref="T:KGySoft.Json.JsonValue"/> to be converted to <see cref="T:System.DateTime"/>.</param>
            <param name="format">Specifies the exact format of the date-time value in the <see cref="T:KGySoft.Json.JsonValue"/>.</param>
            <param name="desiredKind">The desired value of the <see cref="P:System.DateTime.Kind"/> property of the returned <see cref="T:System.DateTime"/> instance,
            or <see langword="null"/> to preserve the one that could be retrieved from the <see cref="T:KGySoft.Json.JsonValue"/>.
            Converting between <see cref="F:System.DateTimeKind.Utc"/> and <see cref="F:System.DateTimeKind.Local"/> affects the actual time value,
            while changing to or from <see cref="F:System.DateTimeKind.Unspecified"/> just changes the <see cref="P:System.DateTime.Kind"/> property without converting the value. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <returns>A <see cref="T:System.DateTime"/> value if <paramref name="json"/> could be converted; otherwise, <see langword="null"/>.</returns>
        </member>
        <member name="M:KGySoft.Json.JsonValueExtensions.GetDateTimeOrDefault(KGySoft.Json.JsonValue@,System.DateTime,System.Nullable{System.DateTimeKind},KGySoft.Json.JsonValueType)">
            <summary>
            Gets the specified <see cref="T:KGySoft.Json.JsonValue"/> as a <see cref="T:System.DateTime"/> value if <paramref name="expectedType"/> is <see cref="F:KGySoft.Json.JsonValueType.Undefined"/>
            or matches the <see cref="P:KGySoft.Json.JsonValue.Type"/> property of the specified <paramref name="json"/> parameter and it can be converted to <see cref="T:System.DateTime"/>;
            otherwise, returns <paramref name="defaultValue"/>. The actual format is attempted to be auto detected. If you know exact format use the
            other <see cref="O:KGySoft.Json.JsonValueExtensions.GetDateTimeOrDefault">GetDateTimeOrDefault</see> overloads.
            </summary>
            <param name="json">The <see cref="T:KGySoft.Json.JsonValue"/> to be converted to <see cref="T:System.DateTime"/>.</param>
            <param name="defaultValue">The value to be returned if the conversion fails. This parameter is optional.
            <br/>Default value: <see cref="F:System.DateTime.MinValue"/>.</param>
            <param name="desiredKind">The desired value of the <see cref="P:System.DateTime.Kind"/> property of the returned <see cref="T:System.DateTime"/> instance,
            or <see langword="null"/> to preserve the one that could be retrieved from the <see cref="T:KGySoft.Json.JsonValue"/>.
            Converting between <see cref="F:System.DateTimeKind.Utc"/> and <see cref="F:System.DateTimeKind.Local"/> affects the actual time value,
            while changing to or from <see cref="F:System.DateTimeKind.Unspecified"/> just changes the <see cref="P:System.DateTime.Kind"/> property without converting the value. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <param name="expectedType">The expected <see cref="P:KGySoft.Json.JsonValue.Type"/> of the specified <paramref name="json"/> parameter,
            or <see cref="F:KGySoft.Json.JsonValueType.Undefined"/> to allow any type. This parameter is optional.
            <br/>Default value: <see cref="F:KGySoft.Json.JsonValueType.Undefined"/>.</param>
            <returns>A <see cref="T:System.DateTime"/> value if <paramref name="json"/> could be converted; otherwise, <paramref name="defaultValue"/>.</returns>
        </member>
        <member name="M:KGySoft.Json.JsonValueExtensions.GetDateTimeOrDefault(KGySoft.Json.JsonValue@,System.Nullable{System.DateTimeKind},KGySoft.Json.JsonValueType)">
            <summary>
            Gets the specified <see cref="T:KGySoft.Json.JsonValue"/> as a <see cref="T:System.DateTime"/> value if <paramref name="expectedType"/> is <see cref="F:KGySoft.Json.JsonValueType.Undefined"/>
            or matches the <see cref="P:KGySoft.Json.JsonValue.Type"/> property of the specified <paramref name="json"/> parameter and it can be converted to <see cref="T:System.DateTime"/>;
            otherwise, returns <see cref="F:System.DateTime.MinValue">DateTime.MinValue</see>, which is the default value of <see cref="T:System.DateTime"/>.
            The actual format is attempted to be auto detected. If you know exact format use the
            other <see cref="O:KGySoft.Json.JsonValueExtensions.GetDateTimeOrDefault">GetDateTimeOrDefault</see> overloads.
            </summary>
            <param name="json">The <see cref="T:KGySoft.Json.JsonValue"/> to be converted to <see cref="T:System.DateTime"/>.</param>
            <param name="desiredKind">The desired value of the <see cref="P:System.DateTime.Kind"/> property of the returned <see cref="T:System.DateTime"/> instance,
            or <see langword="null"/> to preserve the one that could be retrieved from the <see cref="T:KGySoft.Json.JsonValue"/>.
            Converting between <see cref="F:System.DateTimeKind.Utc"/> and <see cref="F:System.DateTimeKind.Local"/> affects the actual time value,
            while changing to or from <see cref="F:System.DateTimeKind.Unspecified"/> just changes the <see cref="P:System.DateTime.Kind"/> property without converting the value.</param>
            <param name="expectedType">The expected <see cref="P:KGySoft.Json.JsonValue.Type"/> of the specified <paramref name="json"/> parameter,
            or <see cref="F:KGySoft.Json.JsonValueType.Undefined"/> to allow any type. This parameter is optional.
            <br/>Default value: <see cref="F:KGySoft.Json.JsonValueType.Undefined"/>.</param>
            <returns>A <see cref="T:System.DateTime"/> value if <paramref name="json"/> could be converted; otherwise, <see cref="F:System.DateTime.MinValue">DateTime.MinValue</see>, which is the default value of <see cref="T:System.DateTime"/>.</returns>
        </member>
        <member name="M:KGySoft.Json.JsonValueExtensions.GetDateTimeOrDefault(KGySoft.Json.JsonValue@,KGySoft.Json.JsonValueType)">
            <summary>
            Gets the specified <see cref="T:KGySoft.Json.JsonValue"/> as a <see cref="T:System.DateTime"/> value if <paramref name="expectedType"/> is <see cref="F:KGySoft.Json.JsonValueType.Undefined"/>
            or matches the <see cref="P:KGySoft.Json.JsonValue.Type"/> property of the specified <paramref name="json"/> parameter and it can be converted to <see cref="T:System.DateTime"/>;
            otherwise, returns <see cref="F:System.DateTime.MinValue">DateTime.MinValue</see>, which is the default value of <see cref="T:System.DateTime"/>.
            The actual format is attempted to be auto detected. If you know exact format use the
            other <see cref="O:KGySoft.Json.JsonValueExtensions.GetDateTimeOrDefault">GetDateTimeOrDefault</see> overloads.
            </summary>
            <param name="json">The <see cref="T:KGySoft.Json.JsonValue"/> to be converted to <see cref="T:System.DateTime"/>.</param>
            <param name="expectedType">The expected <see cref="P:KGySoft.Json.JsonValue.Type"/> of the specified <paramref name="json"/> parameter,
            or <see cref="F:KGySoft.Json.JsonValueType.Undefined"/> to allow any type. This parameter is optional.
            <br/>Default value: <see cref="F:KGySoft.Json.JsonValueType.Undefined"/>.</param>
            <returns>A <see cref="T:System.DateTime"/> value if <paramref name="json"/> could be converted; otherwise, <see cref="F:System.DateTime.MinValue">DateTime.MinValue</see>, which is the default value of <see cref="T:System.DateTime"/>.</returns>
        </member>
        <member name="M:KGySoft.Json.JsonValueExtensions.GetDateTimeOrDefault(KGySoft.Json.JsonValue@,KGySoft.Json.JsonDateTimeFormat,System.DateTime,System.Nullable{System.DateTimeKind},KGySoft.Json.JsonValueType)">
            <summary>
            Gets the specified <see cref="T:KGySoft.Json.JsonValue"/> as a <see cref="T:System.DateTime"/> value using the specified <paramref name="format"/> if <paramref name="expectedType"/>
            is <see cref="F:KGySoft.Json.JsonValueType.Undefined"/> or matches the <see cref="P:KGySoft.Json.JsonValue.Type"/> property of the specified <paramref name="json"/> parameter and it can be
            converted to <see cref="T:System.DateTime"/>; otherwise, returns <paramref name="defaultValue"/>.
            </summary>
            <param name="json">The <see cref="T:KGySoft.Json.JsonValue"/> to be converted to <see cref="T:System.DateTime"/>.</param>
            <param name="format">A <see cref="T:KGySoft.Json.JsonDateTimeFormat"/> value that specifies the format of the date-time value in the <see cref="T:KGySoft.Json.JsonValue"/>.</param>
            <param name="defaultValue">The value to be returned if the conversion fails. This parameter is optional.
            <br/>Default value: <see cref="F:System.DateTime.MinValue"/>.</param>
            <param name="desiredKind">The desired value of the <see cref="P:System.DateTime.Kind"/> property of the returned <see cref="T:System.DateTime"/> instance,
            or <see langword="null"/> to preserve the one that could be retrieved from the <see cref="T:KGySoft.Json.JsonValue"/>.
            Converting between <see cref="F:System.DateTimeKind.Utc"/> and <see cref="F:System.DateTimeKind.Local"/> affects the actual time value,
            while changing to or from <see cref="F:System.DateTimeKind.Unspecified"/> just changes the <see cref="P:System.DateTime.Kind"/> property without converting the value. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <param name="expectedType">The expected <see cref="P:KGySoft.Json.JsonValue.Type"/> of the specified <paramref name="json"/> parameter,
            or <see cref="F:KGySoft.Json.JsonValueType.Undefined"/> to allow any type. This parameter is optional.
            <br/>Default value: <see cref="F:KGySoft.Json.JsonValueType.Undefined"/>.</param>
            <returns>A <see cref="T:System.DateTime"/> value if <paramref name="json"/> could be converted; otherwise, <paramref name="defaultValue"/>.</returns>
        </member>
        <member name="M:KGySoft.Json.JsonValueExtensions.GetDateTimeOrDefault(KGySoft.Json.JsonValue@,KGySoft.Json.JsonDateTimeFormat,System.Nullable{System.DateTimeKind},KGySoft.Json.JsonValueType)">
            <summary>
            Gets the specified <see cref="T:KGySoft.Json.JsonValue"/> as a <see cref="T:System.DateTime"/> value using the specified <paramref name="format"/> if <paramref name="expectedType"/>
            is <see cref="F:KGySoft.Json.JsonValueType.Undefined"/> or matches the <see cref="P:KGySoft.Json.JsonValue.Type"/> property of the specified <paramref name="json"/> parameter and it can be
            converted to <see cref="T:System.DateTime"/>; otherwise, returns <see cref="F:System.DateTime.MinValue">DateTime.MinValue</see>, which is the default value of <see cref="T:System.DateTime"/>.
            </summary>
            <param name="json">The <see cref="T:KGySoft.Json.JsonValue"/> to be converted to <see cref="T:System.DateTime"/>.</param>
            <param name="format">A <see cref="T:KGySoft.Json.JsonDateTimeFormat"/> value that specifies the format of the date-time value in the <see cref="T:KGySoft.Json.JsonValue"/>.</param>
            <param name="desiredKind">The desired value of the <see cref="P:System.DateTime.Kind"/> property of the returned <see cref="T:System.DateTime"/> instance,
            or <see langword="null"/> to preserve the one that could be retrieved from the <see cref="T:KGySoft.Json.JsonValue"/>.
            Converting between <see cref="F:System.DateTimeKind.Utc"/> and <see cref="F:System.DateTimeKind.Local"/> affects the actual time value,
            while changing to or from <see cref="F:System.DateTimeKind.Unspecified"/> just changes the <see cref="P:System.DateTime.Kind"/> property without converting the value.</param>
            <param name="expectedType">The expected <see cref="P:KGySoft.Json.JsonValue.Type"/> of the specified <paramref name="json"/> parameter,
            or <see cref="F:KGySoft.Json.JsonValueType.Undefined"/> to allow any type. This parameter is optional.
            <br/>Default value: <see cref="F:KGySoft.Json.JsonValueType.Undefined"/>.</param>
            <returns>A <see cref="T:System.DateTime"/> value if <paramref name="json"/> could be converted; otherwise, <see cref="F:System.DateTime.MinValue">DateTime.MinValue</see>, which is the default value of <see cref="T:System.DateTime"/>.</returns>
        </member>
        <member name="M:KGySoft.Json.JsonValueExtensions.GetDateTimeOrDefault(KGySoft.Json.JsonValue@,KGySoft.Json.JsonDateTimeFormat,KGySoft.Json.JsonValueType)">
            <summary>
            Gets the specified <see cref="T:KGySoft.Json.JsonValue"/> as a <see cref="T:System.DateTime"/> value using the specified <paramref name="format"/> if <paramref name="expectedType"/>
            is <see cref="F:KGySoft.Json.JsonValueType.Undefined"/> or matches the <see cref="P:KGySoft.Json.JsonValue.Type"/> property of the specified <paramref name="json"/> parameter and it can be
            converted to <see cref="T:System.DateTime"/>; otherwise, returns <see cref="F:System.DateTime.MinValue">DateTime.MinValue</see>, which is the default value of <see cref="T:System.DateTime"/>.
            </summary>
            <param name="json">The <see cref="T:KGySoft.Json.JsonValue"/> to be converted to <see cref="T:System.DateTime"/>.</param>
            <param name="format">A <see cref="T:KGySoft.Json.JsonDateTimeFormat"/> value that specifies the format of the date-time value in the <see cref="T:KGySoft.Json.JsonValue"/>.</param>
            <param name="expectedType">The expected <see cref="P:KGySoft.Json.JsonValue.Type"/> of the specified <paramref name="json"/> parameter,
            or <see cref="F:KGySoft.Json.JsonValueType.Undefined"/> to allow any type.</param>
            <returns>A <see cref="T:System.DateTime"/> value if <paramref name="json"/> could be converted; otherwise, <see cref="F:System.DateTime.MinValue">DateTime.MinValue</see>, which is the default value of <see cref="T:System.DateTime"/>.</returns>
        </member>
        <member name="M:KGySoft.Json.JsonValueExtensions.GetDateTimeOrDefault(KGySoft.Json.JsonValue@,System.String,System.DateTime,System.Nullable{System.DateTimeKind})">
            <summary>
            Gets the specified <see cref="T:KGySoft.Json.JsonValue"/> as a <see cref="T:System.DateTime"/> value using the specified <paramref name="format"/>
            if <see cref="P:KGySoft.Json.JsonValue.Type"/> property of the specified <paramref name="json"/> parameter is <see cref="F:KGySoft.Json.JsonValueType.String"/> and it can be
            converted to <see cref="T:System.DateTime"/>; otherwise, returns <paramref name="defaultValue"/>.
            </summary>
            <param name="json">The <see cref="T:KGySoft.Json.JsonValue"/> to be converted to <see cref="T:System.DateTime"/>.</param>
            <param name="format">Specifies the exact format of the date-time value in the <see cref="T:KGySoft.Json.JsonValue"/>.</param>
            <param name="defaultValue">The value to be returned if the conversion fails. This parameter is optional.
            <br/>Default value: <see cref="F:System.DateTime.MinValue"/>.</param>
            <param name="desiredKind">The desired value of the <see cref="P:System.DateTime.Kind"/> property of the returned <see cref="T:System.DateTime"/> instance,
            or <see langword="null"/> to preserve the one that could be retrieved from the <see cref="T:KGySoft.Json.JsonValue"/>.
            Converting between <see cref="F:System.DateTimeKind.Utc"/> and <see cref="F:System.DateTimeKind.Local"/> affects the actual time value,
            while changing to or from <see cref="F:System.DateTimeKind.Unspecified"/> just changes the <see cref="P:System.DateTime.Kind"/> property without converting the value. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <returns>A <see cref="T:System.DateTime"/> value if <paramref name="json"/> could be converted; otherwise, <paramref name="defaultValue"/>.</returns>
        </member>
        <member name="M:KGySoft.Json.JsonValueExtensions.GetDateTimeOrDefault(KGySoft.Json.JsonValue@,System.String,System.Nullable{System.DateTimeKind})">
            <summary>
            Gets the specified <see cref="T:KGySoft.Json.JsonValue"/> as a <see cref="T:System.DateTime"/> value using the specified <paramref name="format"/>
            if <see cref="P:KGySoft.Json.JsonValue.Type"/> property of the specified <paramref name="json"/> parameter is <see cref="F:KGySoft.Json.JsonValueType.String"/> and it can be
            converted to <see cref="T:System.DateTime"/>; otherwise, returns <see cref="F:System.DateTime.MinValue">DateTime.MinValue</see>, which is the default value of <see cref="T:System.DateTime"/>.
            </summary>
            <param name="json">The <see cref="T:KGySoft.Json.JsonValue"/> to be converted to <see cref="T:System.DateTime"/>.</param>
            <param name="format">Specifies the exact format of the date-time value in the <see cref="T:KGySoft.Json.JsonValue"/>.</param>
            <param name="desiredKind">The desired value of the <see cref="P:System.DateTime.Kind"/> property of the returned <see cref="T:System.DateTime"/> instance,
            or <see langword="null"/> to preserve the one that could be retrieved from the <see cref="T:KGySoft.Json.JsonValue"/>.
            Converting between <see cref="F:System.DateTimeKind.Utc"/> and <see cref="F:System.DateTimeKind.Local"/> affects the actual time value,
            while changing to or from <see cref="F:System.DateTimeKind.Unspecified"/> just changes the <see cref="P:System.DateTime.Kind"/> property without converting the value. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <returns>A <see cref="T:System.DateTime"/> value if <paramref name="json"/> could be converted; otherwise, <see cref="F:System.DateTime.MinValue">DateTime.MinValue</see>, which is the default value of <see cref="T:System.DateTime"/>.</returns>
        </member>
        <member name="M:KGySoft.Json.JsonValueExtensions.ToJson(System.DateTime,KGySoft.Json.JsonDateTimeFormat,System.Boolean)">
            <summary>
            Converts the specified <paramref name="value"/> to <see cref="T:KGySoft.Json.JsonValue"/>.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="format">Specifies the format of the <paramref name="value"/> as a JSON value. This parameter is optional.
            <br/>Default value: <see cref="F:KGySoft.Json.JsonDateTimeFormat.Auto"/>, which applies <see cref="F:KGySoft.Json.JsonDateTimeFormat.Iso8601JavaScript"/> if <paramref name="asString"/> is <see langword="true"/>,
            or <see cref="F:KGySoft.Json.JsonDateTimeFormat.UnixMilliseconds"/> if <paramref name="asString"/> is <see langword="false"/>.</param>
            <param name="asString"><see langword="true"/> to convert the <paramref name="value"/> to a <see cref="T:KGySoft.Json.JsonValue"/>
            with <see cref="F:KGySoft.Json.JsonValueType.String"/>&#160;<see cref="P:KGySoft.Json.JsonValue.Type"/>; or <see langword="false"/> to convert it to a <see cref="T:KGySoft.Json.JsonValue"/>
            with <see cref="F:KGySoft.Json.JsonValueType.Number"/>&#160;<see cref="P:KGySoft.Json.JsonValue.Type"/>, which is not applicable for all <paramref name="format"/>s. This parameter is optional.
            <br/>Default value: <see langword="true"/>.</param>
            <returns>A <see cref="T:KGySoft.Json.JsonValue"/> instance that is the JSON representation of the specified <paramref name="value"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="format"/> is not one of the defined values.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="asString"/> is <see langword="false"/> but <paramref name="format"/> represents a string-only format.</exception>
        </member>
        <member name="M:KGySoft.Json.JsonValueExtensions.ToJson(System.Nullable{System.DateTime},KGySoft.Json.JsonDateTimeFormat,System.Boolean)">
            <summary>
            Converts the specified <paramref name="value"/> to <see cref="T:KGySoft.Json.JsonValue"/>.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="format">Specifies the format of the <paramref name="value"/> as a JSON value. This parameter is optional.
            <br/>Default value: <see cref="F:KGySoft.Json.JsonDateTimeFormat.Auto"/>, which applies <see cref="F:KGySoft.Json.JsonDateTimeFormat.Iso8601JavaScript"/> if <paramref name="asString"/> is <see langword="true"/>,
            or <see cref="F:KGySoft.Json.JsonDateTimeFormat.UnixMilliseconds"/> if <paramref name="asString"/> is <see langword="false"/>.</param>
            <param name="asString"><see langword="true"/> to convert the <paramref name="value"/> to a <see cref="T:KGySoft.Json.JsonValue"/>
            with <see cref="F:KGySoft.Json.JsonValueType.String"/>&#160;<see cref="P:KGySoft.Json.JsonValue.Type"/>; or <see langword="false"/> to convert it to a <see cref="T:KGySoft.Json.JsonValue"/>
            with <see cref="F:KGySoft.Json.JsonValueType.Number"/>&#160;<see cref="P:KGySoft.Json.JsonValue.Type"/>, which is not applicable for all <paramref name="format"/>s. This parameter is optional.
            <br/>Default value: <see langword="true"/>.</param>
            <returns>A <see cref="T:KGySoft.Json.JsonValue"/> instance that is the JSON representation of the specified <paramref name="value"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="format"/> is not one of the defined values.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="asString"/> is <see langword="false"/> but <paramref name="format"/> represents a string-only format.</exception>
        </member>
        <member name="M:KGySoft.Json.JsonValueExtensions.ToJson(System.DateTime,System.String)">
            <summary>
            Converts the specified <paramref name="value"/> to <see cref="T:KGySoft.Json.JsonValue"/>.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="format">Specifies the exact format of the <paramref name="value"/> as a JSON value.</param>
            <returns>A <see cref="T:KGySoft.Json.JsonValue"/> instance that is the JSON representation of the specified <paramref name="value"/>.</returns>
            <exception cref="T:System.FormatException"><paramref name="format"/> is invalid.</exception>
        </member>
        <member name="M:KGySoft.Json.JsonValueExtensions.ToJson(System.Nullable{System.DateTime},System.String)">
            <summary>
            Converts the specified <paramref name="value"/> to <see cref="T:KGySoft.Json.JsonValue"/>.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="format">Specifies the exact format of the <paramref name="value"/> as a JSON value.</param>
            <returns>A <see cref="T:KGySoft.Json.JsonValue"/> instance that is the JSON representation of the specified <paramref name="value"/>.</returns>
            <exception cref="T:System.FormatException"><paramref name="format"/> is invalid.</exception>
        </member>
        <member name="M:KGySoft.Json.JsonValueExtensions.TryGetDateTimeOffset(KGySoft.Json.JsonValue@,System.DateTimeOffset@,KGySoft.Json.JsonValueType)">
            <summary>
            Tries to get the specified <see cref="T:KGySoft.Json.JsonValue"/> as a <see cref="T:System.DateTimeOffset"/> value if <paramref name="expectedType"/> is <see cref="F:KGySoft.Json.JsonValueType.Undefined"/>
            or matches the <see cref="P:KGySoft.Json.JsonValue.Type"/> property of the specified <paramref name="json"/> parameter.
            The actual format is attempted to be auto detected. If you know exact format use the
            other <see cref="O:KGySoft.Json.JsonValueExtensions.TryGetDateTimeOffset">TryGetDateTimeOffset</see> overloads.
            </summary>
            <param name="json">The <see cref="T:KGySoft.Json.JsonValue"/> to be converted to <see cref="T:System.DateTimeOffset"/>.</param>
            <param name="value">When this method returns, the result of the conversion, if <paramref name="json"/> could be converted;
            otherwise, <see cref="F:System.DateTimeOffset.MinValue"/>. This parameter is passed uninitialized.</param>
            <param name="expectedType">The expected <see cref="P:KGySoft.Json.JsonValue.Type"/> of the specified <paramref name="json"/> parameter,
            or <see cref="F:KGySoft.Json.JsonValueType.Undefined"/> to allow any type. This parameter is optional.
            <br/>Default value: <see cref="F:KGySoft.Json.JsonValueType.Undefined"/>.</param>
            <returns><see langword="true"/> if the specified <see cref="T:KGySoft.Json.JsonValue"/> could be converted; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:KGySoft.Json.JsonValueExtensions.TryGetDateTimeOffset(KGySoft.Json.JsonValue@,KGySoft.Json.JsonDateTimeFormat,System.DateTimeOffset@,KGySoft.Json.JsonValueType)">
            <summary>
            Tries to get the specified <see cref="T:KGySoft.Json.JsonValue"/> as a <see cref="T:System.DateTimeOffset"/> value using the specified <paramref name="format"/>
            if <paramref name="expectedType"/> is <see cref="F:KGySoft.Json.JsonValueType.Undefined"/> or matches the <see cref="P:KGySoft.Json.JsonValue.Type"/> property of the specified <paramref name="json"/> parameter.
            </summary>
            <param name="json">The <see cref="T:KGySoft.Json.JsonValue"/> to be converted to <see cref="T:System.DateTimeOffset"/>.</param>
            <param name="format">A <see cref="T:KGySoft.Json.JsonDateTimeFormat"/> value that specifies the format of the date-time offset value in the <see cref="T:KGySoft.Json.JsonValue"/>.</param>
            <param name="value">When this method returns, the result of the conversion, if <paramref name="json"/> could be converted;
            otherwise, <see cref="F:System.DateTimeOffset.MinValue"/>. This parameter is passed uninitialized.</param>
            <param name="expectedType">The expected <see cref="P:KGySoft.Json.JsonValue.Type"/> of the specified <paramref name="json"/> parameter,
            or <see cref="F:KGySoft.Json.JsonValueType.Undefined"/> to allow any type. This parameter is optional.
            <br/>Default value: <see cref="F:KGySoft.Json.JsonValueType.Undefined"/>.</param>
            <returns><see langword="true"/> if the specified <see cref="T:KGySoft.Json.JsonValue"/> could be converted; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:KGySoft.Json.JsonValueExtensions.TryGetDateTimeOffset(KGySoft.Json.JsonValue@,System.String,System.DateTimeOffset@)">
            <summary>
            Tries to get the specified <see cref="T:KGySoft.Json.JsonValue"/> as a <see cref="T:System.DateTimeOffset"/> value using the specified <paramref name="format"/>
            if <see cref="P:KGySoft.Json.JsonValue.Type"/> property of the specified <paramref name="json"/> parameter is <see cref="F:KGySoft.Json.JsonValueType.String"/>.
            </summary>
            <param name="json">The <see cref="T:KGySoft.Json.JsonValue"/> to be converted to <see cref="T:System.DateTimeOffset"/>.</param>
            <param name="format">Specifies the exact format of the date-time offset value in the <see cref="T:KGySoft.Json.JsonValue"/>.</param>
            <param name="value">When this method returns, the result of the conversion, if <paramref name="json"/> could be converted;
            otherwise, <see cref="F:System.DateTimeOffset.MinValue"/>. This parameter is passed uninitialized.</param>
            <returns><see langword="true"/> if the specified <see cref="T:KGySoft.Json.JsonValue"/> could be converted; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:KGySoft.Json.JsonValueExtensions.AsDateTimeOffset(KGySoft.Json.JsonValue@,KGySoft.Json.JsonDateTimeFormat,KGySoft.Json.JsonValueType)">
            <summary>
            Gets the specified <see cref="T:KGySoft.Json.JsonValue"/> as a <see cref="T:System.DateTimeOffset"/> value using the specified <paramref name="format"/>
            if <paramref name="expectedType"/> is <see cref="F:KGySoft.Json.JsonValueType.Undefined"/> or matches the <see cref="P:KGySoft.Json.JsonValue.Type"/>
            property of the specified <paramref name="json"/> parameter and it can be converted to <see cref="T:System.DateTimeOffset"/>; otherwise, returns <see langword="null"/>.
            </summary>
            <param name="json">The <see cref="T:KGySoft.Json.JsonValue"/> to be converted to <see cref="T:System.DateTimeOffset"/>.</param>
            <param name="format">A <see cref="T:KGySoft.Json.JsonDateTimeFormat"/> value that specifies the format of the date-time offset value in the <see cref="T:KGySoft.Json.JsonValue"/>. This parameter is optional.
            <br/>Default value: <see cref="F:KGySoft.Json.JsonDateTimeFormat.Auto"/>, which attempts to auto detect the format.</param>
            <param name="expectedType">The expected <see cref="P:KGySoft.Json.JsonValue.Type"/> of the specified <paramref name="json"/> parameter,
            or <see cref="F:KGySoft.Json.JsonValueType.Undefined"/> to allow any type. This parameter is optional.
            <br/>Default value: <see cref="F:KGySoft.Json.JsonValueType.Undefined"/>.</param>
            <returns>A <see cref="T:System.DateTimeOffset"/> value if <paramref name="json"/> could be converted; otherwise, <see langword="null"/>.</returns>
        </member>
        <member name="M:KGySoft.Json.JsonValueExtensions.AsDateTimeOffset(KGySoft.Json.JsonValue@,System.String)">
            <summary>
            Gets the specified <see cref="T:KGySoft.Json.JsonValue"/> as a <see cref="T:System.DateTimeOffset"/> value using the specified <paramref name="format"/>
            if <see cref="P:KGySoft.Json.JsonValue.Type"/> property of the specified <paramref name="json"/> parameter is <see cref="F:KGySoft.Json.JsonValueType.String"/>
            and it can be converted to <see cref="T:System.DateTimeOffset"/>; otherwise, returns <see langword="null"/>.
            </summary>
            <param name="json">The <see cref="T:KGySoft.Json.JsonValue"/> to be converted to <see cref="T:System.DateTimeOffset"/>.</param>
            <param name="format">Specifies the exact format of the date-time offset value in the <see cref="T:KGySoft.Json.JsonValue"/>.</param>
            <returns>A <see cref="T:System.DateTime"/> value if <paramref name="json"/> could be converted; otherwise, <see langword="null"/>.</returns>
        </member>
        <member name="M:KGySoft.Json.JsonValueExtensions.GetDateTimeOffsetOrDefault(KGySoft.Json.JsonValue@,System.DateTimeOffset,KGySoft.Json.JsonValueType)">
            <summary>
            Gets the specified <see cref="T:KGySoft.Json.JsonValue"/> as a <see cref="T:System.DateTimeOffset"/> value if <paramref name="expectedType"/> is <see cref="F:KGySoft.Json.JsonValueType.Undefined"/>
            or matches the <see cref="P:KGySoft.Json.JsonValue.Type"/> property of the specified <paramref name="json"/> parameter and it can be converted to <see cref="T:System.DateTimeOffset"/>;
            otherwise, returns <paramref name="defaultValue"/>. The actual format is attempted to be auto detected. If you know exact format use the
            other <see cref="O:KGySoft.Json.JsonValueExtensions.GetDateTimeOffsetOrDefault">GetDateTimeOffsetOrDefault</see> overloads.
            </summary>
            <param name="json">The <see cref="T:KGySoft.Json.JsonValue"/> to be converted to <see cref="T:System.DateTimeOffset"/>.</param>
            <param name="defaultValue">The value to be returned if the conversion fails. This parameter is optional.
            <br/>Default value: <see cref="F:System.DateTimeOffset.MinValue"/>.</param>
            <param name="expectedType">The expected <see cref="P:KGySoft.Json.JsonValue.Type"/> of the specified <paramref name="json"/> parameter,
            or <see cref="F:KGySoft.Json.JsonValueType.Undefined"/> to allow any type. This parameter is optional.
            <br/>Default value: <see cref="F:KGySoft.Json.JsonValueType.Undefined"/>.</param>
            <returns>A <see cref="T:System.DateTimeOffset"/> value if <paramref name="json"/> could be converted; otherwise, <paramref name="defaultValue"/>.</returns>
        </member>
        <member name="M:KGySoft.Json.JsonValueExtensions.GetDateTimeOffsetOrDefault(KGySoft.Json.JsonValue@,KGySoft.Json.JsonValueType)">
            <summary>
            Gets the specified <see cref="T:KGySoft.Json.JsonValue"/> as a <see cref="T:System.DateTimeOffset"/> value if <paramref name="expectedType"/> is <see cref="F:KGySoft.Json.JsonValueType.Undefined"/>
            or matches the <see cref="P:KGySoft.Json.JsonValue.Type"/> property of the specified <paramref name="json"/> parameter and it can be converted to <see cref="T:System.DateTimeOffset"/>;
            otherwise, returns <see cref="F:System.DateTimeOffset.MinValue">DateTimeOffset.MinValue</see>, which is the default value of <see cref="T:System.DateTimeOffset"/>.
            The actual format is attempted to be auto detected. If you know exact format use the
            other <see cref="O:KGySoft.Json.JsonValueExtensions.GetDateTimeOffsetOrDefault">GetDateTimeOffsetOrDefault</see> overloads.
            </summary>
            <param name="json">The <see cref="T:KGySoft.Json.JsonValue"/> to be converted to <see cref="T:System.DateTimeOffset"/>.</param>
            <param name="expectedType">The expected <see cref="P:KGySoft.Json.JsonValue.Type"/> of the specified <paramref name="json"/> parameter,
            or <see cref="F:KGySoft.Json.JsonValueType.Undefined"/> to allow any type.</param>
            <returns>A <see cref="T:System.DateTimeOffset"/> value if <paramref name="json"/> could be converted;
            otherwise, <see cref="F:System.DateTimeOffset.MinValue">DateTimeOffset.MinValue</see>, which is the default value of <see cref="T:System.DateTimeOffset"/>.</returns>
        </member>
        <member name="M:KGySoft.Json.JsonValueExtensions.GetDateTimeOffsetOrDefault(KGySoft.Json.JsonValue@,KGySoft.Json.JsonDateTimeFormat,System.DateTimeOffset,KGySoft.Json.JsonValueType)">
            <summary>
            Gets the specified <see cref="T:KGySoft.Json.JsonValue"/> as a <see cref="T:System.DateTimeOffset"/> value using the specified <paramref name="format"/> if <paramref name="expectedType"/>
            is <see cref="F:KGySoft.Json.JsonValueType.Undefined"/> or matches the <see cref="P:KGySoft.Json.JsonValue.Type"/> property of the specified <paramref name="json"/> parameter and it can be
            converted to <see cref="T:System.DateTimeOffset"/>; otherwise, returns <paramref name="defaultValue"/>.
            </summary>
            <param name="json">The <see cref="T:KGySoft.Json.JsonValue"/> to be converted to <see cref="T:System.DateTimeOffset"/>.</param>
            <param name="format">A <see cref="T:KGySoft.Json.JsonDateTimeFormat"/> value that specifies the format of the date-time offset value in the <see cref="T:KGySoft.Json.JsonValue"/>.</param>
            <param name="defaultValue">The value to be returned if the conversion fails. This parameter is optional.
            <br/>Default value: <see cref="F:System.DateTimeOffset.MinValue"/>.</param>
            <param name="expectedType">The expected <see cref="P:KGySoft.Json.JsonValue.Type"/> of the specified <paramref name="json"/> parameter,
            or <see cref="F:KGySoft.Json.JsonValueType.Undefined"/> to allow any type. This parameter is optional.
            <br/>Default value: <see cref="F:KGySoft.Json.JsonValueType.Undefined"/>.</param>
            <returns>A <see cref="T:System.DateTimeOffset"/> value if <paramref name="json"/> could be converted; otherwise, <paramref name="defaultValue"/>.</returns>
        </member>
        <member name="M:KGySoft.Json.JsonValueExtensions.GetDateTimeOffsetOrDefault(KGySoft.Json.JsonValue@,KGySoft.Json.JsonDateTimeFormat,KGySoft.Json.JsonValueType)">
            <summary>
            Gets the specified <see cref="T:KGySoft.Json.JsonValue"/> as a <see cref="T:System.DateTimeOffset"/> value using the specified <paramref name="format"/> if <paramref name="expectedType"/>
            is <see cref="F:KGySoft.Json.JsonValueType.Undefined"/> or matches the <see cref="P:KGySoft.Json.JsonValue.Type"/> property of the specified <paramref name="json"/> parameter and it can be
            converted to <see cref="T:System.DateTimeOffset"/>; otherwise, returns <see cref="F:System.DateTimeOffset.MinValue">DateTimeOffset.MinValue</see>, which is the default value of <see cref="T:System.DateTimeOffset"/>.
            </summary>
            <param name="json">The <see cref="T:KGySoft.Json.JsonValue"/> to be converted to <see cref="T:System.DateTimeOffset"/>.</param>
            <param name="format">A <see cref="T:KGySoft.Json.JsonDateTimeFormat"/> value that specifies the format of the date-time offset value in the <see cref="T:KGySoft.Json.JsonValue"/>.</param>
            <param name="expectedType">The expected <see cref="P:KGySoft.Json.JsonValue.Type"/> of the specified <paramref name="json"/> parameter,
            or <see cref="F:KGySoft.Json.JsonValueType.Undefined"/> to allow any type.</param>
            <returns>A <see cref="T:System.DateTimeOffset"/> value if <paramref name="json"/> could be converted;
            otherwise, <see cref="F:System.DateTimeOffset.MinValue">DateTimeOffset.MinValue</see>, which is the default value of <see cref="T:System.DateTimeOffset"/>.</returns>
        </member>
        <member name="M:KGySoft.Json.JsonValueExtensions.GetDateTimeOffsetOrDefault(KGySoft.Json.JsonValue@,System.String,System.DateTimeOffset)">
            <summary>
            Gets the specified <see cref="T:KGySoft.Json.JsonValue"/> as a <see cref="T:System.DateTimeOffset"/> value using the specified <paramref name="format"/>
            if <see cref="P:KGySoft.Json.JsonValue.Type"/> property of the specified <paramref name="json"/> parameter is <see cref="F:KGySoft.Json.JsonValueType.String"/> and it can be
            converted to <see cref="T:System.DateTimeOffset"/>; otherwise, returns <paramref name="defaultValue"/>.
            </summary>
            <param name="json">The <see cref="T:KGySoft.Json.JsonValue"/> to be converted to <see cref="T:System.DateTimeOffset"/>.</param>
            <param name="format">Specifies the exact format of the date-time offset value in the <see cref="T:KGySoft.Json.JsonValue"/>.</param>
            <param name="defaultValue">The value to be returned if the conversion fails. This parameter is optional.
            <br/>Default value: <see cref="F:System.DateTimeOffset.MinValue"/>.</param>
            <returns>A <see cref="T:System.DateTimeOffset"/> value if <paramref name="json"/> could be converted; otherwise, <paramref name="defaultValue"/>.</returns>
        </member>
        <member name="M:KGySoft.Json.JsonValueExtensions.ToJson(System.DateTimeOffset,KGySoft.Json.JsonDateTimeFormat,System.Boolean)">
            <summary>
            Converts the specified <paramref name="value"/> to <see cref="T:KGySoft.Json.JsonValue"/>.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="format">Specifies the format of the <paramref name="value"/> as a JSON value. This parameter is optional.
            <br/>Default value: <see cref="F:KGySoft.Json.JsonDateTimeFormat.Auto"/>, which applies <see cref="F:KGySoft.Json.JsonDateTimeFormat.Iso8601JavaScript"/> if <paramref name="asString"/> is <see langword="true"/>,
            or <see cref="F:KGySoft.Json.JsonDateTimeFormat.UnixMilliseconds"/> if <paramref name="asString"/> is <see langword="false"/>.</param>
            <param name="asString"><see langword="true"/> to convert the <paramref name="value"/> to a <see cref="T:KGySoft.Json.JsonValue"/>
            with <see cref="F:KGySoft.Json.JsonValueType.String"/>&#160;<see cref="P:KGySoft.Json.JsonValue.Type"/>; or <see langword="false"/> to convert it to a <see cref="T:KGySoft.Json.JsonValue"/>
            with <see cref="F:KGySoft.Json.JsonValueType.Number"/>&#160;<see cref="P:KGySoft.Json.JsonValue.Type"/>, which is not applicable for all <paramref name="format"/>s. This parameter is optional.
            <br/>Default value: <see langword="true"/>.</param>
            <returns>A <see cref="T:KGySoft.Json.JsonValue"/> instance that is the JSON representation of the specified <paramref name="value"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="format"/> is not one of the defined values.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="asString"/> is <see langword="false"/> but <paramref name="format"/> represents a string-only format.</exception>
        </member>
        <member name="M:KGySoft.Json.JsonValueExtensions.ToJson(System.Nullable{System.DateTimeOffset},KGySoft.Json.JsonDateTimeFormat,System.Boolean)">
            <summary>
            Converts the specified <paramref name="value"/> to <see cref="T:KGySoft.Json.JsonValue"/>.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="format">Specifies the format of the <paramref name="value"/> as a JSON value. This parameter is optional.
            <br/>Default value: <see cref="F:KGySoft.Json.JsonDateTimeFormat.Auto"/>, which applies <see cref="F:KGySoft.Json.JsonDateTimeFormat.Iso8601JavaScript"/> if <paramref name="asString"/> is <see langword="true"/>,
            or <see cref="F:KGySoft.Json.JsonDateTimeFormat.UnixMilliseconds"/> if <paramref name="asString"/> is <see langword="false"/>.</param>
            <param name="asString"><see langword="true"/> to convert the <paramref name="value"/> to a <see cref="T:KGySoft.Json.JsonValue"/>
            with <see cref="F:KGySoft.Json.JsonValueType.String"/>&#160;<see cref="P:KGySoft.Json.JsonValue.Type"/>; or <see langword="false"/> to convert it to a <see cref="T:KGySoft.Json.JsonValue"/>
            with <see cref="F:KGySoft.Json.JsonValueType.Number"/>&#160;<see cref="P:KGySoft.Json.JsonValue.Type"/>, which is not applicable for all <paramref name="format"/>s. This parameter is optional.
            <br/>Default value: <see langword="true"/>.</param>
            <returns>A <see cref="T:KGySoft.Json.JsonValue"/> instance that is the JSON representation of the specified <paramref name="value"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="format"/> is not one of the defined values.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="asString"/> is <see langword="false"/> but <paramref name="format"/> represents a string-only format.</exception>
        </member>
        <member name="M:KGySoft.Json.JsonValueExtensions.ToJson(System.DateTimeOffset,System.String)">
            <summary>
            Converts the specified <paramref name="value"/> to <see cref="T:KGySoft.Json.JsonValue"/>.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="format">Specifies the exact format of the <paramref name="value"/> as a JSON value.</param>
            <returns>A <see cref="T:KGySoft.Json.JsonValue"/> instance that is the JSON representation of the specified <paramref name="value"/>.</returns>
            <exception cref="T:System.FormatException"><paramref name="format"/> is invalid.</exception>
        </member>
        <member name="M:KGySoft.Json.JsonValueExtensions.ToJson(System.Nullable{System.DateTimeOffset},System.String)">
            <summary>
            Converts the specified <paramref name="value"/> to <see cref="T:KGySoft.Json.JsonValue"/>.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="format">Specifies the exact format of the <paramref name="value"/> as a JSON value.</param>
            <returns>A <see cref="T:KGySoft.Json.JsonValue"/> instance that is the JSON representation of the specified <paramref name="value"/>.</returns>
            <exception cref="T:System.FormatException"><paramref name="format"/> is invalid.</exception>
        </member>
        <member name="M:KGySoft.Json.JsonValueExtensions.TryGetTimeSpan(KGySoft.Json.JsonValue@,System.TimeSpan@,KGySoft.Json.JsonValueType)">
            <summary>
            Tries to get the specified <see cref="T:KGySoft.Json.JsonValue"/> as a <see cref="T:System.TimeSpan"/> value if <paramref name="expectedType"/> is <see cref="F:KGySoft.Json.JsonValueType.Undefined"/>
            or matches the <see cref="P:KGySoft.Json.JsonValue.Type"/> property of the specified <paramref name="json"/> parameter.
            The actual format is attempted to be auto detected. If you know exact format use the
            <see cref="M:KGySoft.Json.JsonValueExtensions.TryGetTimeSpan(KGySoft.Json.JsonValue@,KGySoft.Json.JsonTimeFormat,System.TimeSpan@,KGySoft.Json.JsonValueType)"/> overload instead.
            </summary>
            <param name="json">The <see cref="T:KGySoft.Json.JsonValue"/> to be converted to <see cref="T:System.TimeSpan"/>.</param>
            <param name="value">When this method returns, the result of the conversion, if <paramref name="json"/> could be converted;
            otherwise, <see cref="F:System.TimeSpan.Zero"/>. This parameter is passed uninitialized.</param>
            <param name="expectedType">The expected <see cref="P:KGySoft.Json.JsonValue.Type"/> of the specified <paramref name="json"/> parameter,
            or <see cref="F:KGySoft.Json.JsonValueType.Undefined"/> to allow any type. This parameter is optional.
            <br/>Default value: <see cref="F:KGySoft.Json.JsonValueType.Undefined"/>.</param>
            <returns><see langword="true"/> if the specified <see cref="T:KGySoft.Json.JsonValue"/> could be converted; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:KGySoft.Json.JsonValueExtensions.TryGetTimeSpan(KGySoft.Json.JsonValue@,KGySoft.Json.JsonTimeFormat,System.TimeSpan@,KGySoft.Json.JsonValueType)">
            <summary>
            Tries to get the specified <see cref="T:KGySoft.Json.JsonValue"/> as a <see cref="T:System.TimeSpan"/> value using the specified <paramref name="format"/>
            if <paramref name="expectedType"/> is <see cref="F:KGySoft.Json.JsonValueType.Undefined"/> or matches the <see cref="P:KGySoft.Json.JsonValue.Type"/> property of the specified <paramref name="json"/> parameter.
            </summary>
            <param name="json">The <see cref="T:KGySoft.Json.JsonValue"/> to be converted to <see cref="T:System.TimeSpan"/>.</param>
            <param name="format">A <see cref="T:KGySoft.Json.JsonTimeFormat"/> value that specifies the format of the <see cref="T:System.TimeSpan"/> value in the <see cref="T:KGySoft.Json.JsonValue"/>.</param>
            <param name="value">When this method returns, the result of the conversion, if <paramref name="json"/> could be converted;
            otherwise, <see cref="F:System.TimeSpan.Zero"/>. This parameter is passed uninitialized.</param>
            <param name="expectedType">The expected <see cref="P:KGySoft.Json.JsonValue.Type"/> of the specified <paramref name="json"/> parameter,
            or <see cref="F:KGySoft.Json.JsonValueType.Undefined"/> to allow any type. This parameter is optional.
            <br/>Default value: <see cref="F:KGySoft.Json.JsonValueType.Undefined"/>.</param>
            <returns><see langword="true"/> if the specified <see cref="T:KGySoft.Json.JsonValue"/> could be converted; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:KGySoft.Json.JsonValueExtensions.AsTimeSpan(KGySoft.Json.JsonValue@,KGySoft.Json.JsonTimeFormat,KGySoft.Json.JsonValueType)">
            <summary>
            Gets the specified <see cref="T:KGySoft.Json.JsonValue"/> as a <see cref="T:System.TimeSpan"/> value using the specified <paramref name="format"/>
            if <paramref name="expectedType"/> is <see cref="F:KGySoft.Json.JsonValueType.Undefined"/> or matches the <see cref="P:KGySoft.Json.JsonValue.Type"/>
            property of the specified <paramref name="json"/> parameter and it can be converted to <see cref="T:System.TimeSpan"/>; otherwise, returns <see langword="null"/>.
            </summary>
            <param name="json">The <see cref="T:KGySoft.Json.JsonValue"/> to be converted to <see cref="T:System.TimeSpan"/>.</param>
            <param name="format">A <see cref="T:KGySoft.Json.JsonTimeFormat"/> value that specifies the format of the <see cref="T:System.TimeSpan"/> value in the <see cref="T:KGySoft.Json.JsonValue"/>. This parameter is optional.
            <br/>Default value: <see cref="F:KGySoft.Json.JsonDateTimeFormat.Auto"/>, which attempts to auto detect the format.</param>
            <param name="expectedType">The expected <see cref="P:KGySoft.Json.JsonValue.Type"/> of the specified <paramref name="json"/> parameter,
            or <see cref="F:KGySoft.Json.JsonValueType.Undefined"/> to allow any type. This parameter is optional.
            <br/>Default value: <see cref="F:KGySoft.Json.JsonValueType.Undefined"/>.</param>
            <returns>A <see cref="T:System.TimeSpan"/> value if <paramref name="json"/> could be converted; otherwise, <see langword="null"/>.</returns>
        </member>
        <member name="M:KGySoft.Json.JsonValueExtensions.GetTimeSpanOrDefault(KGySoft.Json.JsonValue@,System.TimeSpan,KGySoft.Json.JsonValueType)">
            <summary>
            Gets the specified <see cref="T:KGySoft.Json.JsonValue"/> as a <see cref="T:System.TimeSpan"/> value if <paramref name="expectedType"/> is <see cref="F:KGySoft.Json.JsonValueType.Undefined"/>
            or matches the <see cref="P:KGySoft.Json.JsonValue.Type"/> property of the specified <paramref name="json"/> parameter and it can be converted to <see cref="T:System.TimeSpan"/>;
            otherwise, returns <paramref name="defaultValue"/>. The actual format is attempted to be auto detected. If you know exact format use the
            <see cref="M:KGySoft.Json.JsonValueExtensions.GetTimeSpanOrDefault(KGySoft.Json.JsonValue@,KGySoft.Json.JsonTimeFormat,System.TimeSpan,KGySoft.Json.JsonValueType)"/> overload instead.
            </summary>
            <param name="json">The <see cref="T:KGySoft.Json.JsonValue"/> to be converted to <see cref="T:System.TimeSpan"/>.</param>
            <param name="defaultValue">The value to be returned if the conversion fails. This parameter is optional.
            <br/>Default value: <see cref="F:System.TimeSpan.Zero"/>.</param>
            <param name="expectedType">The expected <see cref="P:KGySoft.Json.JsonValue.Type"/> of the specified <paramref name="json"/> parameter,
            or <see cref="F:KGySoft.Json.JsonValueType.Undefined"/> to allow any type. This parameter is optional.
            <br/>Default value: <see cref="F:KGySoft.Json.JsonValueType.Undefined"/>.</param>
            <returns>A <see cref="T:System.TimeSpan"/> value if <paramref name="json"/> could be converted; otherwise, <paramref name="defaultValue"/>.</returns>
        </member>
        <member name="M:KGySoft.Json.JsonValueExtensions.GetTimeSpanOrDefault(KGySoft.Json.JsonValue@,KGySoft.Json.JsonValueType)">
            <summary>
            Gets the specified <see cref="T:KGySoft.Json.JsonValue"/> as a <see cref="T:System.TimeSpan"/> value if <paramref name="expectedType"/> is <see cref="F:KGySoft.Json.JsonValueType.Undefined"/>
            or matches the <see cref="P:KGySoft.Json.JsonValue.Type"/> property of the specified <paramref name="json"/> parameter and it can be converted to <see cref="T:System.TimeSpan"/>;
            otherwise, returns <see cref="F:System.TimeSpan.Zero">TimeSpan.Zero</see>, which is the default value of <see cref="T:System.TimeSpan"/>.
            The actual format is attempted to be auto detected. If you know exact format use the
            <see cref="M:KGySoft.Json.JsonValueExtensions.GetTimeSpanOrDefault(KGySoft.Json.JsonValue@,KGySoft.Json.JsonTimeFormat,System.TimeSpan,KGySoft.Json.JsonValueType)"/> overload instead.
            </summary>
            <param name="json">The <see cref="T:KGySoft.Json.JsonValue"/> to be converted to <see cref="T:System.TimeSpan"/>.</param>
            <param name="expectedType">The expected <see cref="P:KGySoft.Json.JsonValue.Type"/> of the specified <paramref name="json"/> parameter,
            or <see cref="F:KGySoft.Json.JsonValueType.Undefined"/> to allow any type.</param>
            <returns>A <see cref="T:System.TimeSpan"/> value if <paramref name="json"/> could be converted;
            otherwise, <see cref="F:System.TimeSpan.Zero">TimeSpan.Zero</see>, which is the default value of <see cref="T:System.TimeSpan"/>.</returns>
        </member>
        <member name="M:KGySoft.Json.JsonValueExtensions.GetTimeSpanOrDefault(KGySoft.Json.JsonValue@,KGySoft.Json.JsonTimeFormat,System.TimeSpan,KGySoft.Json.JsonValueType)">
            <summary>
            Gets the specified <see cref="T:KGySoft.Json.JsonValue"/> as a <see cref="T:System.TimeSpan"/> value using the specified <paramref name="format"/> if <paramref name="expectedType"/>
            is <see cref="F:KGySoft.Json.JsonValueType.Undefined"/> or matches the <see cref="P:KGySoft.Json.JsonValue.Type"/> property of the specified <paramref name="json"/> parameter and it can be
            converted to <see cref="T:System.TimeSpan"/>; otherwise, returns <paramref name="defaultValue"/>.
            </summary>
            <param name="json">The <see cref="T:KGySoft.Json.JsonValue"/> to be converted to <see cref="T:System.TimeSpan"/>.</param>
            <param name="format">A <see cref="T:KGySoft.Json.JsonTimeFormat"/> value that specifies the format of the <see cref="T:System.TimeSpan"/> value in the <see cref="T:KGySoft.Json.JsonValue"/>.</param>
            <param name="defaultValue">The value to be returned if the conversion fails. This parameter is optional.
            <br/>Default value: <see cref="F:System.TimeSpan.Zero"/>.</param>
            <param name="expectedType">The expected <see cref="P:KGySoft.Json.JsonValue.Type"/> of the specified <paramref name="json"/> parameter,
            or <see cref="F:KGySoft.Json.JsonValueType.Undefined"/> to allow any type. This parameter is optional.
            <br/>Default value: <see cref="F:KGySoft.Json.JsonValueType.Undefined"/>.</param>
            <returns>A <see cref="T:System.TimeSpan"/> value if <paramref name="json"/> could be converted; otherwise, <paramref name="defaultValue"/>.</returns>
        </member>
        <member name="M:KGySoft.Json.JsonValueExtensions.GetTimeSpanOrDefault(KGySoft.Json.JsonValue@,KGySoft.Json.JsonTimeFormat,KGySoft.Json.JsonValueType)">
            <summary>
            Gets the specified <see cref="T:KGySoft.Json.JsonValue"/> as a <see cref="T:System.TimeSpan"/> value using the specified <paramref name="format"/> if <paramref name="expectedType"/>
            is <see cref="F:KGySoft.Json.JsonValueType.Undefined"/> or matches the <see cref="P:KGySoft.Json.JsonValue.Type"/> property of the specified <paramref name="json"/> parameter and it can be
            converted to <see cref="T:System.TimeSpan"/>; otherwise, returns <see cref="F:System.TimeSpan.Zero">TimeSpan.Zero</see>, which is the default value of <see cref="T:System.TimeSpan"/>.
            </summary>
            <param name="json">The <see cref="T:KGySoft.Json.JsonValue"/> to be converted to <see cref="T:System.TimeSpan"/>.</param>
            <param name="format">A <see cref="T:KGySoft.Json.JsonTimeFormat"/> value that specifies the format of the <see cref="T:System.TimeSpan"/> value in the <see cref="T:KGySoft.Json.JsonValue"/>.</param>
            <param name="expectedType">The expected <see cref="P:KGySoft.Json.JsonValue.Type"/> of the specified <paramref name="json"/> parameter,
            or <see cref="F:KGySoft.Json.JsonValueType.Undefined"/> to allow any type.</param>
            <returns>A <see cref="T:System.TimeSpan"/> value if <paramref name="json"/> could be converted;
            otherwise, <see cref="F:System.TimeSpan.Zero">TimeSpan.Zero</see>, which is the default value of <see cref="T:System.TimeSpan"/>.</returns>
        </member>
        <member name="M:KGySoft.Json.JsonValueExtensions.ToJson(System.TimeSpan,KGySoft.Json.JsonTimeFormat,System.Boolean)">
            <summary>
            Converts the specified <paramref name="value"/> to <see cref="T:KGySoft.Json.JsonValue"/>.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="format">Specifies the format of the <paramref name="value"/> as a JSON value. This parameter is optional.
            <br/>Default value: <see cref="F:KGySoft.Json.JsonTimeFormat.Auto"/>, which applies <see cref="F:KGySoft.Json.JsonTimeFormat.Text"/> if <paramref name="asString"/> is <see langword="true"/>,
            or <see cref="F:KGySoft.Json.JsonTimeFormat.Milliseconds"/> if <paramref name="asString"/> is <see langword="false"/>.</param>
            <param name="asString"><see langword="true"/> to convert the <paramref name="value"/> to a <see cref="T:KGySoft.Json.JsonValue"/>
            with <see cref="F:KGySoft.Json.JsonValueType.String"/>&#160;<see cref="P:KGySoft.Json.JsonValue.Type"/>; or <see langword="false"/> to convert it to a <see cref="T:KGySoft.Json.JsonValue"/>
            with <see cref="F:KGySoft.Json.JsonValueType.Number"/>&#160;<see cref="P:KGySoft.Json.JsonValue.Type"/>, which is not applicable for all <paramref name="format"/>s. This parameter is optional.
            <br/>Default value: <see langword="true"/>.</param>
            <returns>A <see cref="T:KGySoft.Json.JsonValue"/> instance that is the JSON representation of the specified <paramref name="value"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="format"/> is not one of the defined values.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="asString"/> is <see langword="false"/> but <paramref name="format"/> represents a string-only format.</exception>
        </member>
        <member name="M:KGySoft.Json.JsonValueExtensions.ToJson(System.Nullable{System.TimeSpan},KGySoft.Json.JsonTimeFormat,System.Boolean)">
            <summary>
            Converts the specified <paramref name="value"/> to <see cref="T:KGySoft.Json.JsonValue"/>.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="format">Specifies the format of the <paramref name="value"/> as a JSON value. This parameter is optional.
            <br/>Default value: <see cref="F:KGySoft.Json.JsonTimeFormat.Auto"/>, which applies <see cref="F:KGySoft.Json.JsonTimeFormat.Text"/> if <paramref name="asString"/> is <see langword="true"/>,
            or <see cref="F:KGySoft.Json.JsonTimeFormat.Milliseconds"/> if <paramref name="asString"/> is <see langword="false"/>.</param>
            <param name="asString"><see langword="true"/> to convert the <paramref name="value"/> to a <see cref="T:KGySoft.Json.JsonValue"/>
            with <see cref="F:KGySoft.Json.JsonValueType.String"/>&#160;<see cref="P:KGySoft.Json.JsonValue.Type"/>; or <see langword="false"/> to convert it to a <see cref="T:KGySoft.Json.JsonValue"/>
            with <see cref="F:KGySoft.Json.JsonValueType.Number"/>&#160;<see cref="P:KGySoft.Json.JsonValue.Type"/>, which is not applicable for all <paramref name="format"/>s. This parameter is optional.
            <br/>Default value: <see langword="true"/>.</param>
            <returns>A <see cref="T:KGySoft.Json.JsonValue"/> instance that is the JSON representation of the specified <paramref name="value"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="format"/> is not one of the defined values.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="asString"/> is <see langword="false"/> but <paramref name="format"/> represents a string-only format.</exception>
        </member>
        <member name="M:KGySoft.Json.JsonValueExtensions.TryGetGuid(KGySoft.Json.JsonValue@,System.Guid@)">
            <summary>
            Tries to get the specified <see cref="T:KGySoft.Json.JsonValue"/> as a <see cref="T:System.Guid"/> value
            if <see cref="P:KGySoft.Json.JsonValue.Type"/> property of the specified <paramref name="json"/> parameter is <see cref="F:KGySoft.Json.JsonValueType.String"/>.
            </summary>
            <param name="json">The <see cref="T:KGySoft.Json.JsonValue"/> to be converted to <see cref="T:System.Guid"/>.</param>
            <param name="value">When this method returns, the result of the conversion, if <paramref name="json"/> could be converted;
            otherwise, <see cref="F:System.Guid.Empty"/>. This parameter is passed uninitialized.</param>
            <returns><see langword="true"/> if the specified <see cref="T:KGySoft.Json.JsonValue"/> could be converted; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:KGySoft.Json.JsonValueExtensions.AsGuid(KGySoft.Json.JsonValue@)">
            <summary>
            Gets the specified <see cref="T:KGySoft.Json.JsonValue"/> as a <see cref="T:System.Guid"/> value
            if <see cref="P:KGySoft.Json.JsonValue.Type"/> property of the specified <paramref name="json"/> parameter is <see cref="F:KGySoft.Json.JsonValueType.String"/>.
            </summary>
            <param name="json">The <see cref="T:KGySoft.Json.JsonValue"/> to be converted to <see cref="T:System.Guid"/>.</param>
            <returns>A <see cref="T:System.Guid"/> value if <paramref name="json"/> could be converted; otherwise, <see langword="null"/>.</returns>
        </member>
        <member name="M:KGySoft.Json.JsonValueExtensions.GetGuidOrDefault(KGySoft.Json.JsonValue@,System.Guid)">
            <summary>
            Gets the specified <see cref="T:KGySoft.Json.JsonValue"/> as a <see cref="T:System.Guid"/> value
            if <see cref="P:KGySoft.Json.JsonValue.Type"/> property of the specified <paramref name="json"/> parameter is <see cref="F:KGySoft.Json.JsonValueType.String"/>
            and it can be converted to <see cref="T:System.Guid"/>; otherwise, returns <paramref name="defaultValue"/>.
            </summary>
            <param name="json">The <see cref="T:KGySoft.Json.JsonValue"/> to be converted to <see cref="T:System.Guid"/>.</param>
            <param name="defaultValue">The value to be returned if the conversion fails. This parameter is optional.
            <br/>Default value: <see cref="F:System.Guid.Empty"/>.</param>
            <returns>A <see cref="T:System.Guid"/> value if <paramref name="json"/> could be converted; otherwise, <paramref name="defaultValue"/>.</returns>
        </member>
        <member name="M:KGySoft.Json.JsonValueExtensions.ToJson(System.Guid)">
            <summary>
            Converts the specified <paramref name="value"/> to <see cref="T:KGySoft.Json.JsonValue"/>.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A <see cref="T:KGySoft.Json.JsonValue"/> instance that is the JSON representation of the specified <paramref name="value"/>.</returns>
        </member>
        <member name="M:KGySoft.Json.JsonValueExtensions.ToJson(System.Nullable{System.Guid})">
            <summary>
            Converts the specified <paramref name="value"/> to <see cref="T:KGySoft.Json.JsonValue"/>.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A <see cref="T:KGySoft.Json.JsonValue"/> instance that is the JSON representation of the specified <paramref name="value"/>.</returns>
        </member>
        <member name="P:KGySoft.Res.DefaultJsonPropertyInvalid">
            <summary>A default JsonProperty value is invalid here.</summary>
        </member>
        <member name="P:KGySoft.Res.UnexpectedEndOfJsonStream">
            <summary>Unexpected end of JSON stream.</summary>
        </member>
        <member name="P:KGySoft.Res.UnexpectedEndOfJsonString">
            <summary>Unexpected end of JSON string.</summary>
        </member>
        <member name="P:KGySoft.Res.UnexpectedEndOfJsonArray">
            <summary>Unexpected end of JSON array.</summary>
        </member>
        <member name="P:KGySoft.Res.UnexpectedCommaInJsonArray">
            <summary>Unexpected comma in JSON array.</summary>
        </member>
        <member name="P:KGySoft.Res.UnexpectedEndOfJsonObject">
            <summary>Unexpected end of JSON object.</summary>
        </member>
        <member name="P:KGySoft.Res.UnexpectedCommaInJsonObject">
            <summary>Unexpected comma in JSON object.</summary>
        </member>
        <member name="P:KGySoft.Res.UnexpectedColonInJsonObject">
            <summary>Unexpected colon in JSON object.</summary>
        </member>
        <member name="P:KGySoft.Res.MissingCommaInJsonObject">
            <summary>Missing comma between properties in JSON object.</summary>
        </member>
        <member name="M:KGySoft.Res.EnsureInitialized">
            <summary>
            Just an empty method to be able to trigger the static constructor without running any code other than field initializations.
            </summary>
        </member>
        <member name="M:KGySoft.Res.UnexpectedCharInJsonValue(System.Char)">
            <summary>Unexpected character in JSON value: '{0}'</summary>
        </member>
        <member name="M:KGySoft.Res.UnexpectedCharInJsonLiteral(System.Char)">
            <summary>Unexpected character in JSON literal: '{0}'</summary>
        </member>
        <member name="M:KGySoft.Res.UnexpectedCharInJsonArray(System.Char)">
            <summary>Unexpected character in JSON array: '{0}'</summary>
        </member>
        <member name="M:KGySoft.Res.UnexpectedCharInJsonObject(System.Char)">
            <summary>Unexpected character in JSON object: '{0}'</summary>
        </member>
        <member name="M:KGySoft.Res.UnexpectedEscapeCharInJsonString(System.Char)">
            <summary>Unexpected escape character in JSON string: '{0}'</summary>
        </member>
        <member name="M:KGySoft.Res.DateTimeFormatIsStringOnly(KGySoft.Json.JsonDateTimeFormat)">
            <summary>Date-time format '{0}' cannot be encoded as a JSON number.</summary>
        </member>
        <member name="M:KGySoft.Res.TimeSpanFormatIsStringOnly(KGySoft.Json.JsonTimeFormat)">
            <summary>Time span format '{0}' cannot be encoded as a JSON number.</summary>
        </member>
        <member name="M:KGySoft.Res.JsonValueInvalidCast``1(KGySoft.Json.JsonValueType)">
            <summary>A JsonValue with Type '{0}' cannot be cast to '{1}'.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute">
            <summary>Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue"/>, the parameter may be null even if the corresponding type disallows it.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.#ctor(System.Boolean)">
            <summary>Initializes the attribute with the specified return value condition.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter may be null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue">
            <summary>Gets the return value condition.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute">
            <summary>Applied to a method that will never return under any circumstance.</summary>
        </member>
    </members>
</doc>
